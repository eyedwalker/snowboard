-- =====================================================
-- Eyecare Analytics Datamart V1.0 - Schema Creation
-- =====================================================
-- Based on validated V1.3 revenue cycle analytics
-- Iterative design: Start solid, expand as we learn more

-- Create DATAMART schema
CREATE SCHEMA IF NOT EXISTS DATAMART;
USE SCHEMA DATAMART;

-- =====================================================
-- DIMENSION TABLES
-- =====================================================

-- 1. DIM_DATE - Standard date dimension
CREATE OR REPLACE TABLE DIM_DATE (
    DATE_KEY NUMBER(8) PRIMARY KEY,
    FULL_DATE DATE NOT NULL,
    YEAR NUMBER(4) NOT NULL,
    QUARTER NUMBER(1) NOT NULL,
    MONTH NUMBER(2) NOT NULL,
    MONTH_NAME VARCHAR(20) NOT NULL,
    DAY NUMBER(2) NOT NULL,
    DAY_OF_WEEK NUMBER(1) NOT NULL,
    DAY_NAME VARCHAR(20) NOT NULL,
    WEEK_OF_YEAR NUMBER(2) NOT NULL,
    FISCAL_YEAR NUMBER(4),
    FISCAL_QUARTER NUMBER(1),
    IS_WEEKEND BOOLEAN NOT NULL,
    IS_HOLIDAY BOOLEAN DEFAULT FALSE,
    CREATED_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- 2. DIM_OFFICE - Office/location dimension
CREATE OR REPLACE TABLE DIM_OFFICE (
    OFFICE_KEY NUMBER AUTOINCREMENT PRIMARY KEY,
    OFFICE_ID VARCHAR(50) NOT NULL,
    OFFICE_NAME VARCHAR(200),
    COMPANY_ID VARCHAR(50),
    ADDRESS VARCHAR(500),
    CITY VARCHAR(100),
    STATE VARCHAR(50),
    ZIP_CODE VARCHAR(20),
    PHONE VARCHAR(50),
    MANAGER VARCHAR(200),
    ACTIVE_FLAG BOOLEAN DEFAULT TRUE,
    EFFECTIVE_DATE DATE DEFAULT CURRENT_DATE(),
    CREATED_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UNIQUE(OFFICE_ID)
);

-- 3. DIM_PATIENT - Patient dimension (de-identified)
CREATE OR REPLACE TABLE DIM_PATIENT (
    PATIENT_KEY NUMBER AUTOINCREMENT PRIMARY KEY,
    PATIENT_ID VARCHAR(50) NOT NULL,
    AGE_GROUP VARCHAR(20), -- Instead of DOB for privacy
    GENDER VARCHAR(10),
    ZIP_CODE VARCHAR(20), -- For geographic analysis
    FIRST_VISIT_DATE DATE,
    LAST_VISIT_DATE DATE,
    TOTAL_VISITS NUMBER DEFAULT 0,
    ACTIVE_FLAG BOOLEAN DEFAULT TRUE,
    EFFECTIVE_DATE DATE DEFAULT CURRENT_DATE(),
    CREATED_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UNIQUE(PATIENT_ID)
);

-- 4. DIM_INSURANCE - Insurance plan and carrier dimension
CREATE OR REPLACE TABLE DIM_INSURANCE (
    INSURANCE_KEY NUMBER AUTOINCREMENT PRIMARY KEY,
    CARRIER_ID VARCHAR(50),
    CARRIER_NAME VARCHAR(200),
    PLAN_ID VARCHAR(50),
    PLAN_NAME VARCHAR(200),
    PLAN_TYPE VARCHAR(100),
    CARRIER_ADDRESS VARCHAR(500),
    CARRIER_PHONE VARCHAR(50),
    ACTIVE_FLAG BOOLEAN DEFAULT TRUE,
    EFFECTIVE_DATE DATE DEFAULT CURRENT_DATE(),
    CREATED_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UNIQUE(CARRIER_ID, PLAN_ID)
);

-- 5. DIM_ORDER - Order header dimension
CREATE OR REPLACE TABLE DIM_ORDER (
    ORDER_KEY NUMBER AUTOINCREMENT PRIMARY KEY,
    ORDER_ID VARCHAR(50) NOT NULL,
    ORDER_DATE DATE,
    ORDER_STATUS VARCHAR(100),
    ORDER_TYPE VARCHAR(100),
    TOTAL_AMOUNT NUMBER(10,2),
    PATIENT_KEY NUMBER, -- FK to DIM_PATIENT
    OFFICE_KEY NUMBER,  -- FK to DIM_OFFICE
    ACTIVE_FLAG BOOLEAN DEFAULT TRUE,
    EFFECTIVE_DATE DATE DEFAULT CURRENT_DATE(),
    CREATED_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UNIQUE(ORDER_ID)
);

-- =====================================================
-- FACT TABLES
-- =====================================================

-- 1. FACT_REVENUE_TRANSACTIONS - Primary fact table based on V1.3 query
CREATE OR REPLACE TABLE FACT_REVENUE_TRANSACTIONS (
    TRANSACTION_KEY NUMBER AUTOINCREMENT PRIMARY KEY,
    
    -- Dimension Foreign Keys
    DATE_KEY NUMBER(8) NOT NULL,
    OFFICE_KEY NUMBER NOT NULL,
    PATIENT_KEY NUMBER,
    INSURANCE_KEY NUMBER,
    ORDER_KEY NUMBER,
    
    -- Business Keys
    TRANSACTION_SOURCE VARCHAR(20) NOT NULL, -- 'Billing' or 'POS'
    ORDER_ID VARCHAR(50),
    CLAIM_ID VARCHAR(50),
    
    -- Financial Measures (from V1.3 query)
    BILLED_AMOUNT NUMBER(12,2) DEFAULT 0,
    INSURANCE_AR NUMBER(12,2) DEFAULT 0,
    INSURANCE_PAYMENT NUMBER(12,2) DEFAULT 0,
    PATIENT_PAYMENT NUMBER(12,2) DEFAULT 0,
    ADJUSTMENT NUMBER(12,2) DEFAULT 0,
    REFUND_ADJUSTMENT NUMBER(12,2) DEFAULT 0,
    WRITEOFF_ALL NUMBER(12,2) DEFAULT 0,
    COLLECTIONS NUMBER(12,2) DEFAULT 0,
    INS_TOTAL_BALANCE NUMBER(12,2) DEFAULT 0,
    PATIENT_BALANCE NUMBER(12,2) DEFAULT 0,
    
    -- Metadata
    SOURCE_SYSTEM VARCHAR(50) DEFAULT 'V1.3_QUERY',
    LOAD_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    CREATED_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    
    -- Foreign Key Constraints
    FOREIGN KEY (DATE_KEY) REFERENCES DIM_DATE(DATE_KEY),
    FOREIGN KEY (OFFICE_KEY) REFERENCES DIM_OFFICE(OFFICE_KEY),
    FOREIGN KEY (PATIENT_KEY) REFERENCES DIM_PATIENT(PATIENT_KEY),
    FOREIGN KEY (INSURANCE_KEY) REFERENCES DIM_INSURANCE(INSURANCE_KEY),
    FOREIGN KEY (ORDER_KEY) REFERENCES DIM_ORDER(ORDER_KEY)
);

-- =====================================================
-- INDEXES AND CLUSTERING
-- =====================================================

-- Cluster fact table by date and office for performance
ALTER TABLE FACT_REVENUE_TRANSACTIONS CLUSTER BY (DATE_KEY, OFFICE_KEY);

-- Create indexes on commonly used columns
CREATE INDEX IF NOT EXISTS IDX_FACT_REV_DATE ON FACT_REVENUE_TRANSACTIONS(DATE_KEY);
CREATE INDEX IF NOT EXISTS IDX_FACT_REV_OFFICE ON FACT_REVENUE_TRANSACTIONS(OFFICE_KEY);
CREATE INDEX IF NOT EXISTS IDX_FACT_REV_PATIENT ON FACT_REVENUE_TRANSACTIONS(PATIENT_KEY);
CREATE INDEX IF NOT EXISTS IDX_FACT_REV_ORDER ON FACT_REVENUE_TRANSACTIONS(ORDER_ID);

-- =====================================================
-- ANALYTICAL VIEWS
-- =====================================================

-- Revenue Summary View
CREATE OR REPLACE VIEW VW_REVENUE_SUMMARY AS
SELECT 
    d.FULL_DATE,
    d.YEAR,
    d.MONTH,
    d.MONTH_NAME,
    o.OFFICE_NAME,
    o.CITY,
    o.STATE,
    COUNT(*) as TRANSACTION_COUNT,
    SUM(f.BILLED_AMOUNT) as TOTAL_BILLED,
    SUM(f.INSURANCE_PAYMENT + f.PATIENT_PAYMENT) as TOTAL_PAYMENTS,
    SUM(f.INS_TOTAL_BALANCE + f.PATIENT_BALANCE) as TOTAL_OUTSTANDING,
    SUM(f.INSURANCE_AR) as INSURANCE_AR,
    SUM(f.INS_TOTAL_BALANCE) as INSURANCE_BALANCE,
    SUM(f.PATIENT_BALANCE) as PATIENT_BALANCE,
    SUM(f.WRITEOFF_ALL) as TOTAL_WRITEOFFS,
    SUM(f.COLLECTIONS) as TOTAL_COLLECTIONS
FROM FACT_REVENUE_TRANSACTIONS f
JOIN DIM_DATE d ON f.DATE_KEY = d.DATE_KEY
JOIN DIM_OFFICE o ON f.OFFICE_KEY = o.OFFICE_KEY
GROUP BY d.FULL_DATE, d.YEAR, d.MONTH, d.MONTH_NAME, 
         o.OFFICE_NAME, o.CITY, o.STATE;

-- Office Performance View
CREATE OR REPLACE VIEW VW_OFFICE_PERFORMANCE AS
SELECT 
    o.OFFICE_NAME,
    o.CITY,
    o.STATE,
    COUNT(DISTINCT f.PATIENT_KEY) as UNIQUE_PATIENTS,
    COUNT(*) as TOTAL_TRANSACTIONS,
    SUM(f.BILLED_AMOUNT) as TOTAL_BILLED,
    SUM(f.INSURANCE_PAYMENT + f.PATIENT_PAYMENT) as TOTAL_COLLECTED,
    CASE 
        WHEN SUM(f.BILLED_AMOUNT) > 0 
        THEN (SUM(f.INSURANCE_PAYMENT + f.PATIENT_PAYMENT) / SUM(f.BILLED_AMOUNT)) * 100 
        ELSE 0 
    END as COLLECTION_RATE_PCT,
    SUM(f.INS_TOTAL_BALANCE + f.PATIENT_BALANCE) as TOTAL_AR,
    AVG(f.BILLED_AMOUNT) as AVG_TRANSACTION_AMOUNT
FROM FACT_REVENUE_TRANSACTIONS f
JOIN DIM_OFFICE o ON f.OFFICE_KEY = o.OFFICE_KEY
WHERE f.DATE_KEY >= TO_NUMBER(TO_CHAR(DATEADD('year', -1, CURRENT_DATE()), 'YYYYMMDD'))
GROUP BY o.OFFICE_NAME, o.CITY, o.STATE
ORDER BY TOTAL_BILLED DESC;

-- =====================================================
-- COMMENTS AND DOCUMENTATION
-- =====================================================

COMMENT ON SCHEMA DATAMART IS 'Eyecare Analytics Datamart V1.0 - Iterative design based on validated V1.3 revenue cycle analytics';

COMMENT ON TABLE DIM_DATE IS 'Standard date dimension with fiscal year support';
COMMENT ON TABLE DIM_OFFICE IS 'Office/location dimension with SCD Type 1';
COMMENT ON TABLE DIM_PATIENT IS 'De-identified patient dimension for analytics';
COMMENT ON TABLE DIM_INSURANCE IS 'Insurance carrier and plan dimension';
COMMENT ON TABLE DIM_ORDER IS 'Order header dimension';
COMMENT ON TABLE FACT_REVENUE_TRANSACTIONS IS 'Primary fact table based on validated V1.3 revenue cycle query';

COMMENT ON VIEW VW_REVENUE_SUMMARY IS 'Revenue analytics by date and office';
COMMENT ON VIEW VW_OFFICE_PERFORMANCE IS 'Office performance KPIs and metrics';

-- =====================================================
-- GRANTS AND SECURITY
-- =====================================================

-- Grant usage to analytics roles (adjust as needed)
-- GRANT USAGE ON SCHEMA DATAMART TO ROLE ANALYTICS_READER;
-- GRANT SELECT ON ALL TABLES IN SCHEMA DATAMART TO ROLE ANALYTICS_READER;
-- GRANT SELECT ON ALL VIEWS IN SCHEMA DATAMART TO ROLE ANALYTICS_READER;

SELECT 'Datamart V1.0 schema created successfully!' as STATUS;
