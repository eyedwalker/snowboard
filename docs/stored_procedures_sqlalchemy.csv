schema_name,procedure_name,type_desc,create_date,modify_date,days_between_create_modify,source_availability,definition_length,definition_preview
dbo,GetMonthlyAppliedPaymentSummary,SQL_STORED_PROCEDURE,2019-03-25 10:53:00.407,2025-08-06 07:56:50.803,2326,Has Source,3994,"CREATE PROCEDURE [dbo].[GetMonthlyAppliedPaymentSummary]
@fromDate as datetime,
@toDate as datetime,
@officeNum varchar(max),
@doctorIds varchar(max),
@companyId varchar(20),
@IncludeOldSystemCredit as bit

AS
BEGIN
   SET NOCOUNT ON;
   SELECT ID as OfficeID INTO #OfficeList from GetOfficeNumber(@officeNum);

  SELECT * FROM 
   (         
		SELECT  newId() AS ID, 
		    ISNULL(e.employee, 1) AS DoctorId,
            CASE WHEN LEN(LTRIM(RTRIM(e.ProfessionalSignature))) > 0  THEN e.ProfessionalS"
AdvancedMetric,GetTrizettoIntegration,SQL_STORED_PROCEDURE,2024-12-24 07:55:55.817,2025-08-05 07:57:15.780,224,Has Source,2918,"/****** Object:  StoredProcedure [AdvancedMetric].[GetTrizettoIntegration]    Script Date: 12/04/2024 3:40:12 PM ******/
-- =============================================
-- Author:		Anton
-- Create date: 12/04/2024
-- Description: Gets executed by Advanced Metric system to collect data from the enterprise client
-- This sp is to protect against potential violations via changing query string parameters 
-- =============================================
CREATE PROCEDURE [AdvancedMetric].[Get"
dbo,GenerateBillingAR,SQL_STORED_PROCEDURE,2014-03-10 00:08:09.167,2025-07-25 07:58:57.157,4155,Has Source,12133,"CREATE PROCEDURE [dbo].[GenerateBillingAR]    
@FromSerivceDate as datetime,  
@ToServiceDate as datetime,  
@FromTransDate as datetime,  
@ToTransDate as datetime,  
@LastDepositDate as datetime,  
@CompanyID as varchar(10),  
@Officenum as varchar(max)  
AS  
BEGIN  
      -- SET NOCOUNT ON added to prevent extra result sets from  
      -- interfering with SELECT statements.  
      SET NOCOUNT ON;  
declare @CloseID as int  
declare @PreviousCloseID as int  
declare @monthClosedDate as date "
AdvancedMetric,GetWorldPayIntegration,SQL_STORED_PROCEDURE,2024-12-24 07:55:55.823,2025-07-16 07:59:08.827,204,Has Source,2010,"/****** Object:  StoredProcedure [AdvancedMetric].[GetWorldPayIntegration]    Script Date: 12/04/2024 3:20:33 PM ******/
-- =============================================
-- Author:		Anton
-- Create date: 12/04/2024
-- Description: Gets executed by Advanced Metric system to collect data from the enterprise client
-- This sp is to protect against potential violations via changing query string parameters
-- =============================================
CREATE PROCEDURE [AdvancedMetric].[GetW"
dbo,GetPackageLite,SQL_STORED_PROCEDURE,2020-04-17 23:42:28.577,2025-07-03 15:04:07.680,1903,Has Source,3938,"CREATE PROCEDURE [dbo].[GetPackageLite] 
	@officeNum VARCHAR(8), 
	@description VARCHAR(50) = NULL,
	@packageID int = NULL,
	@isVSPIOF bit = 0
AS
BEGIN

	SET NOCOUNT ON;

	SET @description = CASE WHEN @description IS NULL OR @description = '' THEN '%'
					   ELSE '%' + @description + '%'
	END

	IF @packageID = 0 
		SET @packageID = NULL 

	IF OBJECT_ID('tempdb..#TempPackSchedule') IS NOT NULL
		DROP TABLE #TempPackSchedule

	CREATE TABLE #TempPackSchedule 
	( 
	    Itemvalue VARCHAR(15), 
	    "
dbo,CopyOfficeInvoiceConfigGoLiveSetup,SQL_STORED_PROCEDURE,2025-07-01 08:14:16.687,2025-07-01 08:14:16.687,0,Has Source,2193,"CREATE PROCEDURE [dbo].[CopyOfficeInvoiceConfigGoLiveSetup]
	@FromOfficeNum	varchar(8),
	@ToOfficeNum	varchar(8),
	@WithOverlay		int = 0	
AS
BEGIN
	SET NOCOUNT ON;

    MERGE OfficeInvoiceConfig AS T 
	USING(
		SELECT @ToOfficeNum AS OfficeNum
		    ,CompanyId
			,DisplayTaxID
			,DisplayPatientMRN
			,DisplayDiagnosisCodes
			,DisplayNextAppointmentDate
			,DisplayNPIOption
			,DisplayPatientAddress
			,DisplayCCSignatureCapture
			,DisplayPromiseDate
			,DisplayFrameItemNum
			,DisplayCPTCodes"
dbo,CopyOfficeData,SQL_STORED_PROCEDURE,2017-08-09 00:47:02.093,2025-07-01 08:14:16.683,2883,Has Source,39099,"-- IF EXISTS ( SELECT * FROM sysobjects WHERE  id = object_id(N'[dbo].[CopyOfficeData]') and OBJECTPROPERTY(id, N'IsProcedure') = 1 ) BEGIN DROP PROCEDURE [dbo].[CopyOfficeData] END
CREATE PROCEDURE [dbo].[CopyOfficeData]
@FromOfficeNum VARCHAR (100),
@ToOfficeNum VARCHAR (100),
@WithOverlay BIT
AS
BEGIN
	-- Internal variables BEGIN ---------------------------------------------------------------------------------
	DECLARE @totalChange int = 0;
	DECLARE @officenumber VARCHAR (100) = @FromOfficeNu"
dbo,spLoadPearleCustomer,SQL_STORED_PROCEDURE,2016-07-27 00:03:46.157,2025-06-25 07:55:37.537,3255,Has Source,5424,"CREATE PROCEDURE [dbo].[spLoadPearleCustomer]
(
	-- Patient
	 @homeOffice			VARCHAR(8) = NULL
	,@lastName				VARCHAR(30)
	,@firstName				VARCHAR(30)
	,@middleName			VARCHAR(1) = NULL
	,@title					INT = NULL
	,@sex					VARCHAR(1) = NULL
	,@birthDate				DATETIME = NULL
	,@email					VARCHAR(MAX) = NULL
	,@emailFlag				BIT = NULL
	,@isBadEmail			BIT = 0
	,@oldCustomerRecord		INT = NULL
	,@originOfficeNumber 	INT = NULL
	,@originPatientId		INT = NULL
	,@conversionOrigin		NVARCHAR(255) = NULL
	,@lastE"
dbo,WorkFlowPurge,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.440,2025-06-25 07:55:37.533,4125,Has Source,2638,"
-- =============================================
-- Author:		Sam Callejo and Kris Jornlin
-- Create date: 01/30/2013
-- Description:	Gets only providers for listbox.
-- =============================================

CREATE PROCEDURE [dbo].[WorkFlowPurge]  
	@ProcessDate datetime,
	@ProcessToPurge varchar(50)
AS  
BEGIN  
	 
	 declare @ErrorCode int
	 
	 BEGIN TRY 
		BEGIN TRANSACTION
		 
		 if (@ProcessToPurge = 'appointments')
		 begin
			exec WorkFlowPurge_Appointments @Pr"
dbo,GetPatientLite,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.817,2025-06-25 07:55:37.527,4125,Has Source,3127,"
CREATE PROCEDURE [dbo].[GetPatientLite]
@CompanyID as varchar(20) ,
@PatientID as int ,
@FirstName as varchar(30) ,
@LastName as varchar(30) ,
@BirthDate as varchar(100) ,
@PhoneNumber as varchar(50) ,
@InActive as varchar(10) ,
@MaxResults as int = 100,
@FirstResult as int = 0,
@TodaysPatient as varchar(10) ,
@OfficeNum as varchar(8)

AS
BEGIN
    SET NOCOUNT ON;
    declare @InActiveValue as bit
    declare @TodaysPatientValue as bit
    declare @MaxResultValue as int
    declare @IsPatientSh"
dbo,SP_PatientSearch_Extension,SQL_STORED_PROCEDURE,2014-03-10 00:09:08.043,2025-06-25 07:55:37.523,4125,Has Source,987,"
CREATE PROCEDURE [SP_PatientSearch_Extension]
	@CompanyID   VARCHAR(20)  = NULL,
    @FirstName   VARCHAR(30)  = NULL,
    @LastName    VARCHAR(30)  = NULL,
    @PhoneNumber VARCHAR(50)  = NULL,
    @DateOfBirth VARCHAR(100) = NULL

AS

BEGIN
	SET NOCOUNT ON
	
	SELECT  CompanyId,
            HomeOffice,
            PatientId,
            FirstName,
            LastName,
            DateOfBirth,
            PhoneNumber,
            Address1,
            Address2,
            City,
            St"
dbo,MarkVisionStarOrderReadyToBeSent,SQL_STORED_PROCEDURE,2008-08-30 11:41:49.960,2025-06-25 07:55:37.520,6143,Has Source,868,"
CREATE PROCEDURE [dbo].[MarkVisionStarOrderReadyToBeSent] 
	@XifDataBatchId int,
	@HasRecordsToProcess int out 
AS
BEGIN


if exists(select * from VisionStarOrderSent where XifDataBatchId = @XifDataBatchId)
Begin
	--we may clear the data before proceeding with the insert
	--do not want to create the duplicate records for the same order
	--in same batch
	delete from VisionStarOrderSent where XifDataBatchId = @XifDataBatchId 
End

insert into VisionStarOrderSent (XifDataBatchId, O"
dbo,CLSalesbyDoctor,SQL_STORED_PROCEDURE,2011-02-24 23:15:14.990,2025-06-25 07:55:37.517,5235,Has Source,981,"CREATE PROCEDURE [dbo].[CLSalesbyDoctor]

@fromdate datetime,
@todate  datetime,
@CompanyID varchar(20)
AS
BEGIN
	SET NOCOUNT ON;

declare @iCnt as int
select @iCnt=count(*)  from sysobjects where xtype='U' and name = '#V_InvoiceDetailBYItemType'
if(@iCnt <>0) 
Begin
drop table #V_InvoiceDetailBYItemType
end


Select * into  #V_InvoiceDetailBYItemType from  V_InvoiceDetailBYItemType where Transactiondate >=@fromDate and
 TransactionDate <dateadd(d,1,@todate) and Itemtype=17
 a"
dbo,CLSalesByDoctorDetail,SQL_STORED_PROCEDURE,2014-03-10 00:08:06.813,2025-06-25 07:55:37.513,4125,Has Source,1233,"CREATE PROCEDURE [dbo].[CLSalesByDoctorDetail]

@fromdate datetime,
@todate  datetime,
@CompanyID varchar(20)
AS
BEGIN
	SET NOCOUNT ON;



select 
	NEWID() as ID, 
	v.DoctorId, 
	e.FirstName, 
	e.LastName, 
	v.OfficeNum, 
	v.PatientId as PatientId,  
	v.PatientName as PatientName, 
	cs.CLStyleID, 
	cs.Style,
	v.Quantity as Quantity, 
	v.TransactionDate as DateOfSale, 
	v.OrderNum as OrderNum,  
	v.NetSales as NetSale 
 from 
	(SELECT 
		ID
		,InvoiceDetailId
		,Invoi"
dbo,GetPatientStatementReport,SQL_STORED_PROCEDURE,2016-05-11 00:04:37.490,2025-06-25 07:55:37.503,3332,Has Source,7551,"CREATE PROCEDURE [dbo].[GetPatientStatementReport]
@cutOffDate datetime,
@OfficeNumber varchar(30),
@orderid varchar(10)
AS
BEGIN

 SET NOCOUNT ON;
 DECLARE @listOrderId VARCHAR(Max)

 if (@orderid is null or @orderid  = '')
 begin
     SELECT @listOrderId = COALESCE(@listOrderId+',' ,'') + cast(a.ordernum as varchar(10))
     FROM (select * from GetPatientOrdersWithBalance(@cutOffDate, @officeNumber)) as a  
 end
 else
 begin
    set @listOrderId  =  @orderid
 end


;WITH 
    PatientPosTransac"
dbo,SP_InsuranceSalesSummaryByOfficeByCarrier,SQL_STORED_PROCEDURE,2012-02-29 08:07:46.060,2025-06-25 07:55:37.487,4865,Has Source,4336,"


--SP_InsuranceSalesSummaryByOfficeByCarrier '10/1/2011','1/31/2012','111,999','%',null


CREATE PROCEDURE [dbo].[SP_InsuranceSalesSummaryByOfficeByCarrier]
@FromDate1 varchar(20),
@ToDate1 varchar(20),
@OfficeNum varchar(max),
@carrierId as varchar(50),
@planId as varchar(50),
@monthCloseID as int
AS
BEGIN
	SET NOCOUNT ON;
	declare @iCnt as int
	declare @claimCnt as int
	select @iCnt=count(*)  from sysobjects where xtype='U' and name = '#V_SalesAnalysisByVisionPlan'
	if(@iC"
dbo,SP_GenerateDoctorExamSales,SQL_STORED_PROCEDURE,2011-12-28 22:43:15.157,2025-06-25 07:55:37.480,4928,Has Source,6573,"CREATE PROCEDURE [dbo].[SP_GenerateDoctorExamSales]
@CompanyID varchar(10),
@ListOfOfficenum as varchar(max),
@CarrierID as varchar(max),
@FromSerivceDate as datetime,
@ToServiceDate as datetime,
@FromTransDate as datetime,
@ToTransDate as datetime,
@monthCloseID as int
AS
BEGIN

       if @monthCloseID <> 0 and @monthCloseID is not null
       begin
              
              set @ToTransDate = (select closeddate from MonthCloseControl where ID = @monthCloseID and CompanyID = @"
dbo,SP_InsuranceSalesSummaryByOffice,SQL_STORED_PROCEDURE,2013-02-20 00:01:03.550,2025-06-25 07:55:37.477,4508,Has Source,5533,"
CREATE PROCEDURE [dbo].[SP_InsuranceSalesSummaryByOffice]      
@FromDate1 varchar(20),      
@ToDate1 varchar(20),      
@OfficeNum varchar(max),      
@carrierId as varchar(50),      
@monthCloseID as int ,
@companyId as varchar(20)
      
      
AS      
BEGIN      
 SET NOCOUNT ON;      
 declare @iCnt as int      
 declare @claimCnt as int      
 select @iCnt=count(*)  from sysobjects where xtype='U' and name = '#V_SalesAnalysisByVisionPlan'      
 if(@iCnt <>0)       
 Begin      
  drop "
dbo,SalesPaymentByVisionPlan,SQL_STORED_PROCEDURE,2011-02-24 23:15:18.423,2025-06-25 07:55:37.473,5235,Has Source,2739,"
CREATE PROCEDURE [dbo].[SalesPaymentByVisionPlan]
@FromDate1 varchar(20),
@ToDate1 varchar(20),
@OfficeNum varchar(20)
AS
BEGIN
	SET NOCOUNT ON;
	declare @iCnt as int
	select @iCnt=count(*)  from sysobjects where xtype='U' and name = '#V_SalesPaymentByVisionPlan'
	if(@iCnt <>0) 
	Begin
		drop table #V_SalesPaymentByVisionPlan
	end


select Officenum,PlanName,
Sum(Price) as Retail, Sum(Discount) + sum(LineDisc) + sum(PackageDisc) + sum(InsuranceDiscount) + sum(PromotionDiscount) as Discount
,sum"
dbo,GetSalesbyItemTypeandInsurance,SQL_STORED_PROCEDURE,2011-02-24 23:15:18.533,2025-06-25 07:55:37.467,5235,Has Source,1714,"CREATE PROCEDURE [dbo].[GetSalesbyItemTypeandInsurance]
@FromDate1 varchar(20),
@ToDate1 varchar(20),
@OfficeNum varchar(20),
@CarrierCode varchar(100),
@CompanyId varchar(20)
AS
BEGIN
	SET NOCOUNT ON;
declare @iCnt as int
select @iCnt=count(*)  from sysobjects where xtype='U' and name = '#V_InvoiceDetailwithInsurance1'
if(@iCnt <>0) 
Begin
drop table #V_InvoiceDetailwithInsurance1
end


select dbo.GetItemNamefromItemtype(ItemType,ItemID) as ItemDescription,* into #V_InvoiceDetailwithInsurance1 "
dbo,GetScheduleRecallDetailsReportByCriteria,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.953,2025-06-25 07:55:37.463,4125,Has Source,2174,"CREATE PROC [dbo].[GetScheduleRecallDetailsReportByCriteria]
    @RecallId         INT,
	@DocNum           INT,
	@RecallFromDate     varchar(20),
	@RecallToDate     varchar(20),
	@RecallTypeId      INT
	AS
BEGIN
    SET NOCOUNT ON;

	SELECT  (appt.appt_date) AS NextAppointmentDate, rd.PatientID INTO #tempList FROM RecallDetails rd 
	LEFT JOIN AppSch_Appointment appt ON appt.PatientID = rd.PatientID 
	INNER JOIN Recall r ON r.ID = rd.RecallID
	WHERE appt.appt_date >=  r.RecallFromDate AND r.ID = "
dbo,GetWarrantyUsage,SQL_STORED_PROCEDURE,2010-09-20 11:14:19.953,2025-06-25 07:55:37.457,5392,Has Source,3838,"
CREATE PROCEDURE [dbo].[GetWarrantyUsage]
@fromdate datetime,
@todate datetime,
@CompanyID varchar(20),
@OfficeNum varchar(10)

AS
BEGIN
	SET NOCOUNT ON;
	
	
declare @iCnt as int
select @iCnt=count(*)  from sysobjects where xtype='U' and name = 'X_POSWarrantySale'
if(@iCnt <>0) 
Begin
drop table X_POSWarrantySale
end


select 
pt1.TransactionID, pt1.PatientID,pt1.OrderID,
pt1.TransactionDate as UsedDate, 
sum(case when invd1.IsLensItem= 1 then invd1.Amount + isnull(iid1.R"
dbo,GetBillingPOSReceivablesUnmatched,SQL_STORED_PROCEDURE,2010-04-09 11:55:32.140,2025-06-25 07:55:37.450,5556,Has Source,5548,"
CREATE PROCEDURE [dbo].[GetBillingPOSReceivablesUnmatched]
@fromdate datetime,
@todate datetime,
@CompanyID varchar(20),
@CarrierCode varchar(20),
@OfficeNum as varchar(20),
@IsPrepaidCarrier as BIT

AS
BEGIN
	SET NOCOUNT ON;
	
	declare @iCnt as int
	select @iCnt=count(*)  from sysobjects where xtype='U' and name = 'V_BillingOrderFirstReceivable1'
	if(@iCnt =0) 
	Begin
	
select 
newid() as ID,
bcd.Officenum,bcd.CarrierName,bcd.CarrierID,bt.orderid as OrderNum,bc.servicedate-"
dbo,Scheduler_ExistingAppointmentsHistory_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.323,2025-06-25 07:55:37.443,4125,Has Source,2135,"


CREATE PROCEDURE [Scheduler_ExistingAppointmentsHistory_Get]
	
	 @patient_no int = null
	,@locationId int = null
	,@resourceId int = null
	,@appointmentId int = null
	
	
AS

-- =============================================
-- File Name:	[Scheduler_ExistingAppointmentsHistory_Get].sql
-- 3/19/2012     AA      Modified for WebScheduler
-- =============================================

BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	
	DECLARE @Dat"
dbo,SalesOrderExport,SQL_STORED_PROCEDURE,2019-10-09 00:13:49.840,2025-06-25 07:55:37.440,2086,Has Source,6093,"

Create Procedure [dbo].[SalesOrderExport]  
@transmissionDate DateTime,
@updateStatus bit
As
BEGIN

If(@updateStatus =0)
Begin
Declare @fromDate DateTime = CAST (GETDATE() AS DATE)
 

SELECT distinct pt.transactionid  as TransactionNum 
into #temp_table 
FROM dbo.PosTransaction AS pt
inner join orders ord on ord.ordernum = pt.orderid and ord.statuscode <> 'POH'
inner join invoicesum summ on summ.invoiceid  = pt.InvoiceSummaryID
inner join dbo.InvoiceDet AS cid on cid.InvoiceID = summ.invoiceid"
dbo,GetAppointmentBookLite,SQL_STORED_PROCEDURE,2011-10-26 11:43:56.403,2025-06-25 07:55:37.433,4991,Has Source,3450,"CREATE PROCEDURE [dbo].[GetAppointmentBookLite]
@FromDate DateTime,
@OfficeNum Varchar(20)
AS
BEGIN
	SET NOCOUNT ON;
              
              
SELECT distinct ApptNum ,WorkflowInstanceId, DoctorId, this_.PatientID, ApptDate, this_.ApptTypeID,this_.OfficeNum ,ApptStatusID, this_.PatientInsuranceID, employee4_.FirstName as DrFirstName, 
employee4_.LastName as DrLastName, P.FirstName as PatFirstName, P.LastName as PatLastName,Ph.PhoneNumber as PhoneNumber,IP.PlanName as PatientInsuranc"
dbo,GetPatientOrderLedgerInsuranceData,SQL_STORED_PROCEDURE,2016-07-27 00:03:46.073,2025-06-25 07:55:37.427,3255,Has Source,3914,"CREATE PROCEDURE [dbo].[GetPatientOrderLedgerInsuranceData] 
	@CutOffDate DATETIME
	,@CompanyId VARCHAR(20)
	,@OrderIdList VARCHAR(MAX)
AS

BEGIN
    SET NOCOUNT ON;
	DECLARE @compatibility int;
	SELECT @compatibility = compatibility_level  FROM sys.databases WHERE name = DB_NAME()

	CREATE TABLE #OrderIDs
	(
		ID INT
	);
	
	IF (@compatibility >= 130)
		BEGIN
			INSERT INTO #OrderIDs SELECT CAST(VALUE AS INT) AS [VALUE] FROM STRING_SPLIT(@OrderIdList, ',')	
		END
	ELSE
		BEGIN
			INSERT INTO #Or"
dbo,GetKPITransactionDetails,SQL_STORED_PROCEDURE,2022-03-10 10:31:41.643,2025-06-25 07:55:37.423,1203,Has Source,1824,"CREATE PROCEDURE [dbo].[GetKPITransactionDetails] 
@regionId int ,
@officeNum varchar(max) ,
@employeeNum varchar(max), 
@fromDate Datetime, 
@toDate DateTime, 
@isKPI bit, 
@companyID varchar(max),
@useBookDate bit
AS
SELECT  Row_Number() over (order by ko.TransactionID) as ID, ko.TransactionID, p.TransactionDate, p.OfficeNum, p.OrderID,
 pat.LastName + ' ' + pat.FirstName AS PatientName, 
                      e.LastName + ' ' + e.FirstName AS EmployeeName , e.employee as EmployeeID,k.Descript"
dbo,VerifyParametersValidForCompany,SQL_STORED_PROCEDURE,2021-07-29 17:55:56.190,2025-06-25 07:55:37.417,1427,Has Source,9615,"-- =============================================
-- Author:		jim little
-- Create date: 2021-7-6
-- Description: Perform a check on all supplied parameters to confirm that they belong to a patient
--				in the same company of the supplied companyId.
-- Preconditions: CompanyId and OfficeNum are required and must be valid.
-- Details: Each supplied parameter is valid if related to a patient in the same company of the supplied
--			companyId.  At the first failed check, the procedure returns @FAIL"
dbo,GetPatientQuickList,SQL_STORED_PROCEDURE,2017-02-15 00:04:22.033,2025-06-25 07:55:37.407,3052,Has Source,5418,"CREATE PROCEDURE [dbo].[GetPatientQuickList] (
    @MaxResultValue AS INT = 1000
    ,@FirstResult AS INT = 0
    ,@OfficeNum AS NVARCHAR(8)
    ,@ApptDate	DATETIME  
    ,@Search AS VARCHAR(25) = null
)
AS
BEGIN
SET NOCOUNT ON;

DECLARE @locationId INT = 0;
SET @locationId = (SELECT officeId from office WHERE officeNum = @OfficeNum)

INSERT INTO OfficePatientHistory (officeNum, PatientID, Appt_no)
    SELECT 
        @OfficeNum as OfficeNum, 
        patientId, appt_no 
    FROM 
        AppSch"
dbo,Scheduler_AppointmentDetail_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:58.207,2025-06-25 07:55:37.403,4125,Has Source,3144,"CREATE PROCEDURE [dbo].[Scheduler_AppointmentDetail_Get]
	@appt_no INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		APPT.[appt_no]
		,APPT.[LocationID]
		,LOC.OfficeName AS LocDisplayName
		,APPT.resourceId
		,PRO.FirstName AS provider_first_name
		,PRO.LastName AS provider_last_name
		,PRO.Employee AS provider_cd
		,APPT.[appointmentTypeId]
		,IE.ItemName AS [prd_desc] 
		,APPT.[ins_no]
		,ic.CarrierName AS insurance_name
		,dbo.GetInsuranceNm(appt.MedicalPatientInsuranceID) AS med_insurance_name  
		,"
dbo,FixTransactions,SQL_STORED_PROCEDURE,2014-03-10 00:08:06.863,2025-06-25 07:55:37.393,4125,Has Source,18109,"


Create PROCEDURE [dbo].[FixTransactions]
	-- Add the parameters for the stored procedure here
	@OfficeNum varchar(20) = NULL, 
	@PatientID int = 0,
	@OrderIDs as varchar(8000) = '' OUTPUT,
	@FixedDuplicateOrders varchar(max) ='' OUTPUT,
	@FixedMissingOrders varchar(max)='' OUTPUT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON
	
	/*----- Uncoment the lines below if you want to return out of the stored "
dbo,LoadOldSystemBalanceByPatient,SQL_STORED_PROCEDURE,2011-02-24 23:15:14.883,2025-06-25 07:55:37.383,5235,Has Source,6923,"-- =============================================
-- Author:        Digesh Sahu
-- Create date: 01/13/2011
-- Description:   Loading Patient old system balance
-- Procedure Name : LoadOldSystemBalanceByPatient
-- Modifications:
--    1) Steve Badgley: Added @Closed parameter and use during Insert into POSTransaction.
-- Parameters 
--          1) Patient Home Location      (Unique office/location number from AL database)
--          2) Patient ID                       (Unique ID for specific pati"
dbo,GetUndeliveredOrders,SQL_STORED_PROCEDURE,2013-02-20 00:01:02.440,2025-06-25 07:55:37.377,4508,Has Source,4813,"---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[GetUndeliveredOrders]
 @CutoffDate as datetime,
 @CompanyID as nvarchar(10),
 @OfficeNum as nvarchar(100)
AS
BEGIN
declare @merchandiseDropStatus varchar(2) = 'MD';
set @CutoffDate = DATEADD(dd, 1, dbo.DateOnly(@"
dbo,Scheduler_AppointmentConfirmationDateRange_Get,SQL_STORED_PROCEDURE,2015-03-10 22:44:18.967,2025-06-25 07:55:37.370,3760,Has Source,5521,"CREATE PROCEDURE [dbo].[Scheduler_AppointmentConfirmationDateRange_Get] 
	( 
	@startDate	DATETIME,
	@endDate	DATETIME,
	@locationID	INT,
	@resourceIDs VARCHAR(MAX)
	)
AS
  
BEGIN  
	SET NOCOUNT ON;  
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

   SELECT  DISTINCT
		 a.[appt_no]  
		,a.[LocationID]  
		,a.[resourceId] 
		,a.[appointmentTypeId] AS serv_no
		,a.[ins_no]
		,a.[appt_date]  
		,a.[appt_start_time]  
		,a.[appt_end_time]  
		,a.[appt_phone]  
		,a.appt_phone AS [appt_Workphone]"
dbo,GetPatientOrderInvoiceDataByOrder,SQL_STORED_PROCEDURE,2024-11-26 07:55:57.820,2025-06-25 07:55:37.360,211,Has Source,3850,"CREATE PROCEDURE [dbo].[GetPatientOrderInvoiceDataByOrder]
	@CutOffDate DATETIME,
	@CompanyId VARCHAR(20),
	@OrderId INT
AS
BEGIN
		SET NOCOUNT ON;

		WITH ProcedureDiagnosis AS (
			SELECT 
				bcl.OrderNum,
				bcl.itemId,
				Min(bld.ProcedureCode) ProcedureCode
			FROM BillingClaimLineItem bcl
			LEFT JOIN BillingLineDetails bld ON bcl.lineitemid = bld.LineItemId 
			GROUP BY bcl.OrderNum,
			bcl.itemId 
		),
		PatientLedger AS (
			SELECT 
				ROW_NUMBER() OVER (ORDER BY o.ordernum, id.line"
dbo,GetPatientLiteWithPhone,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.943,2025-06-25 07:55:37.353,4125,Has Source,19026,"
CREATE PROCEDURE [dbo].[GetPatientLiteWithPhone]
@MaxResultValue as int,
@FirstResult as int,
@PhoneNumber varchar(25),
@CompanyID varchar(20),
@FirstName varchar(30),
@LastName varchar(30),
@BirthDate varchar(100),
@InActiveValue bit,
@OfficeId varchar(8)

AS
BEGIN
    SET NOCOUNT ON;

	if (@FirstResult = 0) begin
		if (@OfficeId = '%') begin
		if (@InActiveValue is null) begin
			SELECT TOP (@MaxResultValue) * from
			(SELECT ROW_NUMBER() OVER(ORDER BY sort_1,sort_2) as row, query.ID, 
				is"
dbo,DailyFlashSalesByResource,SQL_STORED_PROCEDURE,2022-06-21 05:01:23.333,2025-06-25 07:55:37.343,1100,Has Source,5191,"CREATE PROCEDURE [dbo].[DailyFlashSalesByResource]

@fromdate datetime,
@todate  datetime,
@officeList varchar(max),
@employeeID int,
@companyID varchar(20)
AS
BEGIN

SELECT Row_number() over(order by ItemTypeID) as ID,
pt.OfficeNum,
              o.OfficeName,
              Month(pt.TransactionDate) as Month,
              Year(pt.TransactionDate) as Year,
              pt.TransactionDate as DateOfSale,
              pt.OrderID as OrderNum,
              pt.PatientID,
              p.LastName +"
dbo,SP_OrderAgingFilterByOfficeIds,SQL_STORED_PROCEDURE,2015-09-23 00:09:00.607,2025-06-25 07:55:37.337,3563,Has Source,4534,"-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SP_OrderAgingFilterByOfficeIds]
	-- Add the parameters for the stored procedure here
	@TransactionDate as datetime,
	@OfficeNum as varchar(max),
	@CompanyID as varchar(20),
	@IncludeOnlyOldSystemBalance as bit = NULL,
	@PatientId as int
		
AS
BEGIN
	Declare @TransDate Date
	set @TransDa"
dbo,Scheduler_ExistingAppointments_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.307,2025-06-25 07:55:37.333,4125,Has Source,2619,"
CREATE PROCEDURE [Scheduler_ExistingAppointments_Get] 
	
	 @patient_no int = null
	,@locationId int = null
	,@resourceId int = null
	,@include_past_appointment bit = 0
	
	
AS

-- =============================================
-- File Name:	Scheduler_ExistingAppointments_Get.sql
-- Description:	This Stored Procedure Gets Existing Appointments.
-- Author:	Armando Moran
-- Example: [Scheduler_ExistingAppointments_Get] 64320,5,18,1
-- Example: [Scheduler_ExistingAppointments_Get] 64320,5,18,0
-- His"
dbo,spDoesPearleCustomerExist,SQL_STORED_PROCEDURE,2016-07-27 00:03:46.150,2025-06-25 07:55:37.330,3255,Has Source,1556,"CREATE PROCEDURE [dbo].[spDoesPearleCustomerExist]
(
	 @firstName				VARCHAR(30)
	,@lastName				VARCHAR(30)
	,@birthDate				DATETIME = NULL
	,@primaryPhoneNumber	VARCHAR(50) = NULL
	,@companyId				VARCHAR(20) = NULL
	,@homeOffice			VARCHAR(8) = NULL
	,@oldCustomerRecord		INT = NULL
	,@conversionOrigin		NVARCHAR(255) = NULL
)
AS
BEGIN
----------------------------------------------------------------------------------------------------------------------------------------------
	DECLARE @matchedPati"
dbo,Scheduler_AppointmentBook_GetByPatientId,SQL_STORED_PROCEDURE,2019-03-25 10:53:00.440,2025-06-25 07:55:37.323,2284,Has Source,6654,"
CREATE PROCEDURE [dbo].[Scheduler_AppointmentBook_GetByPatientId]                
@PatientId int,      
@CompanyId varchar(20)      
              
AS                
BEGIN                
--Scheduler_AppointmentBookByPatId 489538, 'AL999'      
 SET NOCOUNT ON;                
             
SELECT DISTINCT appt.appt_no              
              , appt.ResourceId              
              , appt.PatientID              
              , CONVERT(DATETIME, appt.appt_date) as appt_date        
 "
dbo,Scheduler_PatientDuplicates_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.873,2025-06-25 07:55:37.320,4125,Has Source,1804,"CREATE PROCEDURE [Scheduler_PatientDuplicates_Get] 
	@firstName	nvarchar(40)	= NULL,
	@lastName	nvarchar(30)	= NULL,
	@dob		datetime		= NULL,
	@ssn		nvarchar(11)	= NULL
AS

-- =============================================
-- File Name:	Scheduler_PatientDuplicates_Get.sql
-- Description:	This Stored Procedure Gets duplicate patients
--              and duplicate ssn's.
-- Author:	Joel Deister
-- Example: Scheduler_PatientDuplicates_Get 
-- History:	Date		Initials	Description
--			04"
dbo,UndeliveredOrdersDetail,SQL_STORED_PROCEDURE,2011-02-24 23:15:13.533,2025-06-25 07:55:37.313,5235,Has Source,3730,"CREATE PROCEDURE UndeliveredOrdersDetail
AS
BEGIN

select 
--pt.Officenum,
--count(distinct pt.orderid) as OrderCount
pt.Officenum,pt.Orderid
,tt.Description as TransactionType
,p.Lastname + ' ,' + p.Firstname as PatientName,isnull(it.Description,'') as ItemType,
isnull(i.ItemNum,'') as ItemNum,
isnull(i.ItemName,'') as ItemName,sum(isnull(ind.Quantity,0)) as Quantity ,
sum(isnull(ind.price,0)) as Retail,
sum(isnull(ind.Discount,0)) as Discount,
sum(isnull(ind.Tax,0)) as Tax,
sum("
dbo,Scheduler_RecurringAppointment_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.123,2025-06-25 07:55:37.310,4125,Has Source,1724,"
-- =============================================
-- Author:		Milenko Djuricin
-- Create date: 04/02/2010
-- Description:	Gets the recurring appointment details
-- =============================================

CREATE PROCEDURE [Scheduler_RecurringAppointment_Get]
	@recurringAppointmentID INT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		RA.[RecurringAppointmentID],
		PAT.[firstname] as first_name,
		PAT.[lastname] as last_name,
		CAST(PAT.[birthdate] as datetime) as birth_date,"
dbo,Scheduler_ExistingAppointmentsByResourceAndDate_Get,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.147,2025-06-25 07:55:37.307,2444,Has Source,1898,"
CREATE PROCEDURE [Scheduler_ExistingAppointmentsByResourceAndDate_Get] 
		 
	@locationId int
	,@resourceId int
	,@date DATETIME
	
	
AS

-- =============================================
-- File Name:	Scheduler_ExistingAppointmentsByResourceAndDate_Get.sql
-- Description:	This Stored Procedure Gets Existing Appointments.
-- History:	Date		Initials	Description
--			06/15/2018	PTA			Created
-- =============================================

BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL REA"
dbo,LoadOldSystemCustomerCreditByPatient,SQL_STORED_PROCEDURE,2011-02-24 23:15:13.020,2025-06-25 07:55:37.300,5235,Has Source,5714,"-- =============================================
-- Author:		Digesh Sahu
-- Create date: 01/13/2011
-- Description:	Loading Patient old system balance
-- Procedure Name : LoadOldSystemBalanceByPatient
-- Parameters 
--		1) Patient Home Location	(Unique office/location number from AL database)
--		2) Patient ID				(Unique ID for specific patient from Patient table)	
--		3) Patient Balance			(Patient Old System Balance (higher than zero))
-- =============================================
CREATE PRO"
dbo,LoadDbaseCustomer,SQL_STORED_PROCEDURE,2008-12-17 18:51:47.750,2025-06-25 07:55:37.293,6034,Has Source,5954,"





-- =============================================
-- Author:		Digesh
-- Create date: 12/16/2008
-- Description:	Load Customer from Dbase Files
-- =============================================
CREATE PROCEDURE [dbo].[LoadDbaseCustomer]

AS
BEGIN
 
-- Variables to hold column values from source database
DECLARE @PatientID AS int
DECLARE @OfficeNum AS varchar(8)
DECLARE @LastName AS varchar(50)
DECLARE @FirstName AS varchar(50)
DECLARE @SSN AS varchar(9)
DECLARE @Title AS"
dbo,GetBillingPOSReceivables,SQL_STORED_PROCEDURE,2009-08-25 11:00:03.840,2025-06-25 07:55:37.287,5783,Has Source,8644,"
CREATE PROCEDURE [dbo].[GetBillingPOSReceivables]
@fromdate datetime,
@todate datetime,
@CompanyID varchar(20),
@CarrierCode varchar(20),
@OfficeNum as varchar(20),
@IsPrepaidCarrier as BIT

AS
BEGIN
	SET NOCOUNT ON;

declare @iCnt as int
select @iCnt=count(*)  from sysobjects where xtype='U' and name = 'V_BillingOrderFirstReceivable1'
if(@iCnt <>0) 
Begin
drop table V_BillingOrderFirstReceivable1
end
select @iCnt=count(*)  from sysobjects where xtype='U' and name = 'V_OrderI"
dbo,RetransmitPatientsViaServiceFailure,SQL_STORED_PROCEDURE,2017-08-09 00:47:02.120,2025-06-25 07:55:37.280,2877,Has Source,3579,"-- =============================================
-- Description: retransmitts patients via servicefailure table
-- =============================================
/*
You should transmit patients before appointments so that the patient record arrives before the appointment.
EXAMPLE USAGE:
exec RetransmitPatientsViaServiceFailure 	@CompanyID ='MED',
	@isPreview=1, --use preview mode to get counts before doing the deed
	@lastmodifiedfrom='2017-06-29 3:00:06.000',
	@lastmodifiedto='2017-06-29 13:20:07"
dbo,Scheduler_EventText2_Get,SQL_STORED_PROCEDURE,2015-04-07 22:41:38.767,2025-06-25 07:55:37.273,3732,Has Source,2741,"
-- =============================================
-- Author:		Ali
-- Create date: 06/15/2012
-- Description:	Gets the display text of an audit value
-- History:		Initials	Date			Description
--              PTA         1/30/15         Modified script to do old and new value with 1 call (for performance improvement)
-- =============================================

CREATE PROCEDURE [Scheduler_EventText2_Get]
	
	@Event nvarchar (50)
	,@OldValue varchar(255)
	,@NewValue varchar(255)

AS
BEGIN
	SET N"
dbo,Scheduler_AppointmentsByResourceIDs_Get,SQL_STORED_PROCEDURE,2021-08-23 17:40:17.403,2025-06-25 07:55:37.270,1402,Has Source,6503,"CREATE PROCEDURE [dbo].[Scheduler_AppointmentsByResourceIDs_Get] 
	@resourceIDs VARCHAR(MAX)
	,@locationID INT
	,@start_Date DATETIME = NULL
	,@end_date DATETIME = NULL
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	

	--Create Temporary Table for ResourceIDs

	CREATE TABLE #ResourceIDTable
	(
		ID INT
	);

	DECLARE @compatibility int;
	select @compatibility= compatibility_level  FROM sys.databases WHERE name = DB_NAME()

	-- STRING_SPLIT requires the compatibility"
dbo,AccessVerification,SQL_STORED_PROCEDURE,2016-10-26 00:03:32.877,2025-06-25 07:55:37.263,3164,Has Source,1806,"
/****** Object:  StoredProcedure [dbo].[AccessVerification]    Script Date: 10/5/2016 3:20:33 PM ******/
-- =============================================
-- Author:		Ali
-- Create date: 10/07/2016
-- Description: verifies that PatientId, CompanyId, OrderId and ExamId	are all legitimate when API calls are made to POS
-- This sp is to protect against potential violations via changing query string parameters
-- =============================================

CREATE PROCEDURE [dbo].[AccessV"
dbo,SP_OrderAgingForPatientStmt,SQL_STORED_PROCEDURE,2016-07-27 00:03:46.140,2025-06-25 07:55:37.257,3255,Has Source,4799,"CREATE PROCEDURE [dbo].[SP_OrderAgingForPatientStmt]
    @TransactionDate as datetime,
    @OfficeNums as varchar(max),
    @CompanyID as varchar(20),
    @DateFrom as datetime = NULL,
    @PatientId as int
AS
BEGIN
    -- Local variables to avoid parameter sniffing
    DECLARE @LocalTransactionDate datetime = @TransactionDate;
    DECLARE @LocalCompanyID varchar(20) = @CompanyID;
    DECLARE @LocalDateFrom DATETIME = ISNULL(@DateFrom, '2000-01-01');
    DECLARE @LocalPatientId INT = @PatientId;"
dbo,PatientFollowupNotes,SQL_STORED_PROCEDURE,2018-08-23 15:34:11.063,2025-06-25 07:55:37.253,2498,Has Source,841,"--- =============================================
-- Author:		ali
-- Create date: 2/6/2018
-- Description:	Generates report rows for Patient Followup Notes Report 
-- =============================================
CREATE PROCEDURE [dbo].[PatientFollowupNotes]
		@OfficeNum		varchar(8),
		@FromDate		datetime,
		@ToDate			datetime
AS
BEGIN
		SET NOCOUNT ON;

		SELECT
			n.ID,
			n.NoteDate, 
			e.FirstName + ' ' + e.LastName AS EmployeeName,
			n.Detail, 
			p.LastName + ', ' + p.FirstName AS Patien"
dbo,FrameOrdersforMarchonforAlloffices,SQL_STORED_PROCEDURE,2018-08-23 15:34:10.897,2025-06-25 07:55:37.247,2498,Has Source,3319,"CREATE PROCEDURE [dbo].[FrameOrdersforMarchonforAlloffices]
@Fromdate  date,             
@todate  date,
@Status int ,
@CompanyId varchar(20),
@VendorId int,
@VendorOrderStatus int=null          
as             
Begin   
 
declare                           
@Format as int             
,@PON as int   
,@DC as char(10) 
,@OffBoard as char(1)  
 
set @format=1             
set @PON=1111               
set @DC = 'DEFAULT' 
set @OffBoard = 'N'          
 
select newid() as ID
, vr.ExternalVendorNumbe"
dbo,SalesReportByPlan,SQL_STORED_PROCEDURE,2014-03-10 00:08:06.903,2025-06-25 07:55:37.240,4125,Has Source,12424,"CREATE PROCEDURE [dbo].[SalesReportByPlan]
	@FromDate varchar(20),
	@ToDate varchar(20),
	@Office varchar(20),
	@CarrierID varchar(50)
AS

DECLARE @FromDate1 datetime, @ToDate1 datetime, @Officenum varchar(8) 

SELECT @FromDate1 = CONVERT(datetime, @FromDate)
SELECT @ToDate1 = CONVERT(datetime, @ToDate)
SELECT @OfficeNum = Left(LTRIM(RTRIM(@Office)),8)

BEGIN
	SET NOCOUNT ON;

	DECLARE @iCnt AS int
	DECLARE @SQLStatement varchar(300)
	SELECT @iCnt=COUNT(*) FROM sysobjects WHERE xtype='U' AND nam"
dbo,LoadSAASCustomer,SQL_STORED_PROCEDURE,2009-09-17 23:48:59.593,2025-06-25 07:55:37.233,5760,Has Source,6299,"

-- =============================================
-- Author:		Digesh
-- Create date: 12/16/2008
-- Description:	Load Customer from Dbase Files
-- =============================================
CREATE PROCEDURE [dbo].[LoadSAASCustomer]

AS
BEGIN
 
-- Variables to hold column values from source database
DECLARE @PatientID AS int
DECLARE @OfficeNum AS varchar(8)
DECLARE @LastName AS varchar(50)
DECLARE @FirstName AS varchar(50)
DECLARE @SSN AS varchar(9)
DECLARE @Title AS varchar("
dbo,GetPatientLiteTodaysPatient,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.900,2025-06-25 07:55:37.230,4125,Has Source,2677,"
CREATE PROCEDURE [dbo].[GetPatientLiteTodaysPatient]
@MaxResultValue as int,
@FirstResult as int,
@OfficeNum varchar(8)

AS
BEGIN
    SET NOCOUNT ON;

    SELECT TOP (@MaxResultValue) * from
        (SELECT ROW_NUMBER() OVER(ORDER BY sort_1,sort_2) as row, query.ID, 
            isnull(query.FirstName,'') as FirstName,isnull( query.LastName, '') as LastName, 
            isnull(query.Birthdate,'') as BirthDate, isnull( query.PhoneNumber,'') as PhoneNumber,
            isnull(query.Address1,'') "
dbo,SP_OrderAging,SQL_STORED_PROCEDURE,2014-03-10 00:08:57.907,2025-06-25 07:55:37.223,4125,Has Source,3221,"-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SP_OrderAging]
	-- Add the parameters for the stored procedure here
	@TransactionDate as datetime,
	--@OfficeNum as varchar(20),
	@CompanyID as varchar(20)
	
		
AS
BEGIN

Declare @TransDate Date


set @TransDate = convert(date, @TransactionDate)   --works better than the user function, "
dbo,SeedPatientsAndAppointments,SQL_STORED_PROCEDURE,2016-01-20 00:42:01.403,2025-06-25 07:55:37.213,3444,Has Source,65617,"/*************************************************************************************
************************SEED PATIENTS and APPOINTMENTS**********************************
-- ALSCL-1015
-- This stored procedure adds a configurable number of test insurance carriers, patients and appointments 
-- (plus associated data such as phones, addresses, etc) to a 
-- specified base office. It uses Randomly generated demographic info where possible.

-- Caveats:
-- You need an office to seed, preferably"
dbo,LoadDbaseCustomerInsurance,SQL_STORED_PROCEDURE,2008-12-17 18:50:35.597,2025-06-25 07:55:37.183,6034,Has Source,4140,"




CREATE PROCEDURE [dbo].[LoadDbaseCustomerInsurance]
-- @CustNo as int
AS
BEGIN

DECLARE @REFNOC AS int
DECLARE @REL_REFNOC AS int
DECLARE @RELATION AS int
DECLARE @RELATION_VALUE AS int
DECLARE @InputDate AS datetime
DECLARE @InsurancePlanID AS int
DECLARE @PatientID AS int
DECLARE @RelationshipID AS int
DECLARE @ResponsibleID AS int

DECLARE @PatientInsuranceID AS int
DECLARE @SubscriberID AS varchar(50)
DECLARE @SubLastName AS varchar(30)
DECLARE @SubFirstName AS varchar(30)
DECLARE @SubA"
dbo,Scheduler_FindPatients_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.347,2025-06-25 07:55:37.180,4125,Has Source,12230,"-- =============================================
-- Author:		Joel Deister
-- Create date: 12/22/2009
-- Description:	Gets the patients based on the selection criteria for the Find Patients.
-- =============================================

CREATE PROCEDURE [Scheduler_FindPatients_Get]
	@LastName	NVARCHAR(30) = NULL,
	@FirstName	NVARCHAR(40) = NULL,
	@NickName	NVARCHAR(40) = NULL,
	@SSN		NVARCHAR(11) = NULL,
	@Address	NVARCHAR(40) = NULL,
	@DOB		DATETIME = NULL,
	@LocationID	INT = NU"
dbo,GetAppointmentReschedulingDetails,SQL_STORED_PROCEDURE,2020-05-18 18:08:33.253,2025-06-25 07:55:37.173,1864,Has Source,3480,"
/* AP-103 Appointment Rescheduling Report */
CREATE PROCEDURE [dbo].[GetAppointmentReschedulingDetails]
@FromDate	datetime,
@CompanyId	varchar(20),
@ToDate dateTime = NULL,
@ResourceIDs VARCHAR(MAX) = NULL,
@OfficeIDs VARCHAR(MAX) = NULL,
@IncludeInactiveDoctors bit=NULL

AS
BEGIN
	IF(@IncludeInactiveDoctors IS NOT NULL)
	BEGIN
		SELECT @IncludeInactiveDoctors = CASE
		WHEN @IncludeInactiveDoctors = 1 THEN null	 
		ELSE 1 END
	END
	CREATE TABLE #ResourceIDTable
	(
		ID INT
	);
	CREATE TABLE #Of"
dbo,Scheduler_ReferralInfo_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.203,2025-06-25 07:55:37.170,4125,Has Source,846,"-- =============================================
-- File Name:	Scheduler_ReferralInfo_Get.sql
-- Description:	This Stored Procedure Gets data.
-- Author:	Joel Deister
-- History:	Date		Initials	Description
--			02/16/2010	JD			Created
-- =============================================

CREATE PROCEDURE [Scheduler_ReferralInfo_Get] 
	@referralType int = NULL
	,@referralId int = NULL
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT 
		CASE @refer"
dbo,GetSalesByFinancialGroup,SQL_STORED_PROCEDURE,2018-08-23 15:34:11.033,2025-06-25 07:55:37.160,2498,Has Source,20682,"CREATE PROCEDURE [dbo].[GetSalesByFinancialGroup]
@Fromdate as date, 
@Todate as date, 
@companyid as varchar(10), 
@ReportType as int,
@isSummary as bit,
@OfficeNums as varchar(max)
AS
BEGIN
	SET NOCOUNT ON;



select id as OfficeNum into #OfficeList from dbo.GetOfficeNumber(@OfficeNums) 

CREATE table #WFAct(OrderNum int,StateID int,StateName varchar(50), StateDate  date, TransID  int)

if(@ReportType=1) 
begin
	insert into #WFAct
	select o.OrderNum,wl.StateId ,cl.value Sta"
dbo,PurgeDuplicatePatient,SQL_STORED_PROCEDURE,2009-04-25 11:55:50.783,2025-06-25 07:55:37.153,5905,Has Source,6132,"-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[PurgeDuplicatePatient]
AS
BEGIN

declare @store as int
declare @patID as int
declare @patLast as varchar(25)
declare @patFirst as varchar(15)
declare @patAddress as varchar(50)
declare @patCity as varchar(20)
declare @patDOB as datetime
declare @patPhone as varchar(50)
"
dbo,ElasticsearchPatientFeeder,SQL_STORED_PROCEDURE,2024-11-13 18:41:48.543,2025-06-25 07:55:37.147,224,Has Source,17009,"CREATE PROCEDURE [dbo].[ElasticsearchPatientFeeder]
    @sql_last_value DATETIME,
	@partition_letter VARCHAR(1) = 'M',
	@partition int = -1
AS
BEGIN
    SET NOCOUNT ON;
	
	
	DECLARE @dbDate DATETIME = GETDATE()
	DECLARE @sqlEST DATETIME = DATEADD(mi, -5, DATEADD(hh, (-1) * DATEDIFF(hh, GETDATE(), GETUTCDATE()), @sql_last_value))
	DECLARE @sqlUTC DATETIME = DATEADD(mi, -5, @sql_last_value)

	IF OBJECT_ID('tempdb.dbo.#myESFdrParams', 'U') IS NOT NULL
    DROP TABLE #myESFdrParams;

	Select @sqlEST"
dbo,PatientRecallByItemType,SQL_STORED_PROCEDURE,2010-04-17 11:55:10.160,2025-06-25 07:55:37.140,5548,Has Source,1868,"

CREATE PROCEDURE [dbo].[PatientRecallByItemType]
@OfficeNum as varchar(12),
@IsRecallItem as bit,
@IsUpdateLastExamDate as bit
AS
BEGIN

SELECT office.CompanyID as CompanyID,pt.OfficeNum, isnull(p.FirstName,'') + ' ' + isnull(p.LastName,'') as PatientName, p.ID as PatientID
		,  isnull(max(oi.InsCarrierCode),'') as InsCarrierCode,isnull(p.Email,'') as Email, p.DOB as DOB,sum(iid.Receivable) + sum(id.amount) - sum(id.tax) as NetSales
		, sum(id.Quantity) as Quantity,p.LastExamDate,
"
dbo,WorkFlowPurge_Orders,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.480,2025-06-25 07:55:37.133,4125,Has Source,1627,"
-- =============================================
-- Author:		Sam Callejo and Kris Jornlin
-- Create date: 01/30/2013
-- Description:	Gets only providers for listbox.
-- =============================================

CREATE PROCEDURE [dbo].[WorkFlowPurge_Orders]  
	@Apptdate datetime
AS  
BEGIN  
	 	
	---------- Sanity Check : Drop temp table if it already exist from a prior run --------------------------		 
	delete from temp_PurgeWorkFlowInfo
	-------------------------------------"
dbo,GetPatientLiteWithPhoneOnly,SQL_STORED_PROCEDURE,2023-08-01 07:54:26.423,2025-06-25 07:55:37.123,694,Has Source,17785,"
CREATE PROCEDURE [dbo].[GetPatientLiteWithPhoneOnly]
@MaxResultValue as int,
@FirstResult as int,
@PhoneNumber varchar(25),
@CompanyID varchar(20),
@InActiveValue bit,
@OfficeId varchar(8)

AS
BEGIN
    SET NOCOUNT ON;

	if (@FirstResult = 0) begin
		if (@OfficeId = '%') begin
		if (@InActiveValue is null) begin
			SELECT TOP (@MaxResultValue) * from
			(SELECT ROW_NUMBER() OVER(ORDER BY sort_1,sort_2) as row, query.ID, 
				isnull(query.FirstName,'') as FirstName,isnull( query.LastName, '') as"
dbo,GetPatientReferrals,SQL_STORED_PROCEDURE,2020-11-04 13:16:47.047,2025-06-25 07:55:37.117,1694,Has Source,1817,"CREATE PROCEDURE [dbo].[GetPatientReferrals]
		@CompanyID		varchar(50),
		@FromDate		datetime,
		@ToDate			datetime,
		@OfficeNums as varchar(max),
		@IsAllOfficesSelected as bit = 0
		
AS
BEGIN
		SET NOCOUNT ON;

		DECLARE @officeIds TABLE (Id VARCHAR(50) PRIMARY KEY)
		INSERT INTO @officeIds SELECT Id FROM dbo.GetStringintable(@OfficeNums);

		SELECT 
			ROW_NUMBER() OVER (ORDER BY rp.LastName, rp.FirstName) AS ID, p.ReferralEntityID, rp.FirstName AS ReferrerFirstName, rp.LastName AS Referrer"
dbo,GetUndeliveredCashOrders,SQL_STORED_PROCEDURE,2013-02-20 00:01:01.860,2025-06-25 07:55:37.107,4508,Has Source,4836,"CREATE PROCEDURE [dbo].[GetUndeliveredCashOrders]
 @CutoffDate as datetime,
 @CompanyID as nvarchar(10),
 @OfficeNum as nvarchar(100)
AS
BEGIN
declare @merchandiseDropStatus varchar(2) = 'MD';
set @CutoffDate = DATEADD(dd, 1, dbo.DateOnly(@CutoffDate))
select newid() as ID,
pt.Officenum,pt.OrderID
,tt.Description as TransactionType
,p.Lastname + ' ,' + p.Firstname as PatientName,isnull(it.Description,'') as ItemType,
isnull(i.ItemNum,'') as ItemNum,
isnull(i.ItemName,'') as ItemName"
dbo,LoadPatientOldSystemBalance,SQL_STORED_PROCEDURE,2011-02-24 23:15:14.347,2025-06-25 07:55:37.103,5235,Has Source,3445,"-- =============================================
-- Author:		Digesh Sahu
-- Create date: 01/05/2011
-- Description:	Loading Patient old system balance
-- =============================================
CREATE PROCEDURE [dbo].[LoadPatientOldSystemBalance]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON;
declare @TransDate as datetime
Declare @PatientID as int
Declare @officenum as varchar(5)
Declare @EmployeeID"
dbo,GetPatientLiteById,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.887,2025-06-25 07:55:37.097,4125,Has Source,2460,"
CREATE PROCEDURE [dbo].[GetPatientLiteById]
@MaxResultValue as int,
@FirstResult as int,
@PatientID as int

AS
BEGIN
    SET NOCOUNT ON; 

    SELECT TOP (@MaxResultValue) * from
        (SELECT ROW_NUMBER() OVER(ORDER BY sort_1,sort_2) as row, query.ID, 
            isnull(query.FirstName,'') as FirstName,isnull( query.LastName, '') as LastName, 
            isnull(query.Birthdate,'') as BirthDate, isnull( query.PhoneNumber,'') as PhoneNumber,
            isnull(query.Address1,''"
dbo,CopyPatientData,SQL_STORED_PROCEDURE,2018-12-20 11:58:24.610,2025-06-25 07:55:37.087,2379,Has Source,16162,"-- =============================================
-- Author:		WZewde
-- Create date: 11/12/2018
-- Description: Copy patient data from source company to target company
-- =============================================

CREATE PROCEDURE [dbo].[CopyPatientData]
	 @SourceCompany VARCHAR(100),
     @TargetCompany VARCHAR(100)
AS
BEGIN
	SET QUOTED_IDENTIFIER ON
	SET ANSI_NULLS ON
	SET NOCOUNT ON

	DECLARE @SourceId INT
	DECLARE @TargetId INT
	DECLARE @SourcePatientId INT
	DECLARE @TargetPatientId INT
	"
dbo,RestorePurgePhoneAndAddress,SQL_STORED_PROCEDURE,2009-04-27 12:28:14.957,2025-06-25 07:55:37.080,5903,Has Source,1889,"-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE RestorePurgePhoneAndAddress
AS

BEGIN

declare @patID as int
declare @patAddress as varchar(50)
declare @patCity as varchar(20)
declare @patPhone as varchar(50)
declare @patZip as varchar(50)
declare @patState as varchar(20)
declare @NewID  as int

begin

  DECLARE Customer"
dbo,GetPatientLiteWithNamesOnly,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.917,2025-06-25 07:55:37.073,4125,Has Source,2912,"
CREATE PROCEDURE [dbo].[GetPatientLiteWithNamesOnly]
@MaxResultValue as int,
@FirstResult as int,
@CompanyID varchar(20),
@FirstName varchar(30),
@LastName varchar(30),
@BirthDate varchar(100),
@InActiveValue bit,
@OfficeId varchar(8)

AS
BEGIN
    SET NOCOUNT ON;

    SELECT TOP (@MaxResultValue) * from
        (SELECT ROW_NUMBER() OVER(ORDER BY sort_1,sort_2) as row, query.ID, 
            isnull(query.FirstName,'') as FirstName,isnull( query.LastName, '') as LastName, 
            isnull(que"
dbo,Scheduler_AppointmentNotificationsByProviderByDateRangePaginated,SQL_STORED_PROCEDURE,2019-03-25 10:53:00.490,2025-06-25 07:55:37.067,2284,Has Source,5991,"CREATE PROCEDURE dbo.Scheduler_AppointmentNotificationsByProviderByDateRangePaginated
		@companyId varchar(25),
		@providerId int,
		@fromDate datetime,
		@toDate datetime,
		@lastModified datetime,
		@pageSize int, 
		@page int
WITH RECOMPILE
AS
BEGIN
	/*
		PURPOSE: Return a total count and a (zero-based) page of appointments that have changed as of @lastModified date.

		NOTE: This proc was built for the Patient Engagement API to resolve a database memory issue
		that occurs when this query is"
dbo,GetPatientDemographicDetailsforGender,SQL_STORED_PROCEDURE,2014-03-10 00:07:53.803,2025-06-25 07:55:37.063,4125,Has Source,1014,"---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[GetPatientDemographicDetailsforGender]
 @OfficeNum Varchar(max),
 @Gender Varchar(10)
 
 AS
BEGIN
SET NOCOUNT ON;

if (@Gender <> '')
BEGIN
	select  ID, Birthdate,@Gender as Gender,(o.OfficeName + '-' +  o.Off"
dbo,Scheduler_Appointments_Get,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.660,2025-06-25 07:55:37.057,4125,Has Source,2845,"
-- =============================================
-- Author:		B. VanHorne
-- Create date: 12/15/2009
-- Description:	Gets the appointments for a Provider.
--              Optionally accepts @locationID to narrow the results to a given location.
-- Modified:	JL 3/4/2010 Added patient birthdate to return set
--              		MD 6/6/2010 Added recurringAppointmentID
--		AA 1/28/2011 Added isRecurrenceVariance
-- =============================================

CREATE PROCEDURE [Scheduler_Appointment"
dbo,Scheduler_AppointmentsByResourceIDForBookView,SQL_STORED_PROCEDURE,2022-05-10 10:36:10.223,2025-06-25 07:55:37.050,1142,Has Source,4773,"/*
History:
2022.02.18 VNXT-8816 optimizing the appointment retrieval. Copied the 
		[Scheduler_AppointmentsByResourceIDTable_Get] Stored Procedure and modified
		to account for all of the properties needed
*/
CREATE PROCEDURE [dbo].[Scheduler_AppointmentsByResourceIDForBookView] 
	@resourceIdTable AS dbo.udtTableIds READONLY
	,@locationID INT
	,@start_Date DATETIME = NULL
	,@end_date DATETIME = NULL 
	,@include_canceled BIT = 0
	,@include_deleted BIT = 0
AS

BEGIN
	SET NOCOUNT ON;

SELECT
		APP"
dbo,GetProfessionalReferrals,SQL_STORED_PROCEDURE,2020-11-04 13:16:47.053,2025-06-25 07:55:37.043,1694,Has Source,1606,"CREATE PROCEDURE [dbo].[GetProfessionalReferrals]		
		@FromDate		datetime,
		@ToDate			datetime,
		@CompanyID		varchar(50),
		@OfficeNums as varchar(max),
		@IsAllOfficesSelected as bit = 0
		
AS
BEGIN
		SET NOCOUNT ON;

		DECLARE @officeIds TABLE (Id VARCHAR(50) PRIMARY KEY)
		INSERT INTO @officeIds SELECT Id FROM dbo.GetStringintable(@OfficeNums);

		SELECT 
			ROW_NUMBER() OVER (ORDER BY od.LastName, od.FirstName) AS ID, p.ReferralEntityID, od.FirstName AS ReferrerFirstName, od.LastName AS R"
dbo,GetMailCheckDetail,SQL_STORED_PROCEDURE,2010-09-20 11:14:20.327,2025-06-25 07:55:37.037,5392,Has Source,1991,"CREATE PROCEDURE [dbo].[GetMailCheckDetail]
@fromdate datetime,
@todate datetime,
@CompanyID varchar(20),
@OfficeNum varchar(10)

AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT    top 100 percent newID() as ID, o.OfficeNum, o.OfficeName, pa.LastName + ', ' + pa.FirstName AS PatientName, ISNULL(pt.OrderID, '') AS OrderID, pt.TransactionID, 
                      p.Amount AS Amount, e.LastName + ', ' + e.FirstName AS EmployeeName, o.CompanyID,
					  addr.address1, addr.address2,addr.city,addr.st"
dbo,DeleteCompany,SQL_STORED_PROCEDURE,2017-09-20 08:27:19.000,2025-06-25 07:55:37.027,2835,Has Source,29527,"-- =============================================
-- Author:		Spencer Ruport
-- Create date: 2017-09-12
-- Description:	Deletes a training company and all child records. (Including offices.)
-- =============================================
CREATE PROCEDURE [dbo].[DeleteCompany]
	@companyId VARCHAR(20)
AS
BEGIN
	-- Training companies only
	IF NOT EXISTS(SELECT * FROM CompanyInfo WHERE ID = @companyId AND IsShadowCompany = 1 AND OperationalStatus = 10353)
	BEGIN
		RAISERROR('Cannot delete non-train"
dbo,blink_findPatient,SQL_STORED_PROCEDURE,2009-05-21 22:22:58.570,2025-06-25 07:55:37.003,5879,Has Source,622,"
CREATE PROCEDURE [dbo].[blink_findPatient]
	-- Add the parameters for the stored procedure here
	@firstName 	varchar(50),
	@lastName	varchar(50)


AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


	SELECT     TOP 100 dbo.Patient.ID membershipID, dbo.Patient.FirstName memberFirstName, dbo.Patient.LastName memberLastName
		FROM         dbo.Patient
		WHERE     (dbo.Patient.FirstName like @firstName  + '%' "
dbo,Scheduler_AppointmentNotificationsByCompanyByDateRangePaginated,SQL_STORED_PROCEDURE,2019-03-25 10:53:00.463,2025-06-25 07:55:36.997,2284,Has Source,5794,"CREATE PROCEDURE dbo.Scheduler_AppointmentNotificationsByCompanyByDateRangePaginated
		@companyId varchar(25),
		@fromDate datetime,
		@toDate datetime,
		@lastModified datetime,
		@pageSize int, 
		@page int
WITH RECOMPILE
AS
BEGIN
	/*
		PURPOSE: Return a total count and a (zero-based) page of appointments that have changed as of @lastModified date.

		NOTE: This proc was built for the Patient Engagement API to resolve a database memory issue
		that occurs when this query is executed directly b"
dbo,Scheduler_AppointmentsByResourceIDTable_Get,SQL_STORED_PROCEDURE,2022-05-10 10:36:44.300,2025-06-25 07:55:36.987,1142,Has Source,5697,"/*
History:
10/11/19 - Amish - [REM-87] Fix the Stored procedure: ""Exec SP: SCHEDULER_Appointmentsbyresourceidtable_Get""
						Removed function call dbo.GetInsuranceNm(appt.MedicalPatientInsuranceID) from column.
						Removed column level SELECT statements.
11/12/19 - Amish - [REM-87] Removed Table Variables and used Temp Tables.
						Replaced IN subquery with INNER JOIN.
12/20/20201 - VNXT-8818 adding filters for canceled and deleted to show on BookView
*/

CREATE PROCEDURE [dbo].[Scheduler_A"
dbo,GetDataMiningDetail,SQL_STORED_PROCEDURE,2014-03-10 00:07:53.780,2025-06-25 07:55:36.980,4125,Has Source,10480,"CREATE PROCEDURE [dbo].[GetDataMiningDetail]

 @FromDate  datetime,
 @ToDate  datetime,
 @FromSpere  decimal(6,2),
 @ToSpere  decimal(6,2),
 @FromCylinder  decimal(6,2),
 @ToCylinder  decimal(6,2),
 @FromAxis  int,
 @ToAxis  int,
 @FromAge  int,
 @ToAge  int,
 @CLStyle  varchar(max),
 @CPTCode  varchar(max),
 @CompanyID varchar(20),
 @OfficeNum Varchar(max),
 @Diagcode varchar(max),
 @diagcode2 varchar(max),
 @Insurance varchar(50)

AS
BEGIN
SET NOCOUNT ON;

declare @iCnt"
dbo,GetInsuranceInvoiceReport,SQL_STORED_PROCEDURE,2013-02-20 00:00:59.210,2025-06-25 07:55:36.973,4508,Has Source,5266,"
CREATE PROCEDURE [dbo].[GetInsuranceInvoiceReport]
@FromDate1 datetime,
@ToDate1 datetime,
@OfficeNum varchar(20),
@CarrierCode varchar(100),
@FromOrderDate datetime,
@ToOrderDate datetime

AS
BEGIN
	SET NOCOUNT ON;
declare @iCnt as int
select @iCnt=count(*)  from sysobjects where xtype='U' and name = '#V_InvoiceDetailwithInsurance1'
if(@iCnt <>0) 
Begin
	drop table #V_InvoiceDetailwithInsurance1
end

if (@OfficeNum is null)
	return;

SELECT   id.ID AS InvoiceDetailId, id.InvoiceID, ins.OrderNu"
dbo,GetPOSPaymentDetailforMiscandCredit,SQL_STORED_PROCEDURE,2015-07-28 22:34:59.470,2025-06-25 07:55:36.970,3620,Has Source,1587,"Create PROCEDURE [dbo].[GetPOSPaymentDetailforMiscandCredit]
@fromdate datetime,
@todate datetime,
@TransTypeid int,
@CompanyID varchar(20),
@Paymenttypeid int

AS
BEGIN
	SET NOCOUNT ON;
	
select newid() as id, PaymentDetailID,pd.PaymentID,PaymentTypeID,pd.Amount,Convert(datetime,Convert(varchar(20),pt.TransactionDate,101)) as TransactionDate,pt.officenum as OfficeNum 
from PosPaymentDetail pd 
		inner join PosTransaction pt on   pt.PaymentID=pd.PaymentID
		 inner join Office o on pt.officenum=o"
dbo,GetCLADHOC,SQL_STORED_PROCEDURE,2010-09-20 11:14:20.527,2025-06-25 07:55:36.960,5392,Has Source,2527,"CREATE PROCEDURE [dbo].[GetCLADHOC]

@fromdate datetime,
@todate  datetime,
@clstyleid  int,
@CompanyID varchar(20)
AS
BEGIN
	SET NOCOUNT ON;

select  newid() as id,sum(netsales) as NetSale,OrderNum, PatientName,pt.Email,a.Address1, a.City, a.State, a.ZipCode,ph.PhoneNumber
,(Select sum(netsales) from V_InvoiceDetailBYItemType id2 where id2.OrderNum=id1.OrderNum and id2.ItemType=17) as CLMaterial
,(Select sum(netsales) from V_InvoiceDetailBYItemType id2 where id2.OrderNum=id1.OrderNu"
dbo,RetransmitAppointmentsViaServiceFailure,SQL_STORED_PROCEDURE,2017-07-07 00:01:43.803,2025-06-25 07:55:36.953,2910,Has Source,3620,"-- =============================================
-- Description:	retransmits apointments via servicefailure table
-- =============================================
/*
You should transmit patients before appointments so that the patient record arrives before the appointment.
EXAMPLE USAGE:
exec RetransmitPatientsViaServiceFailure 	@CompanyID ='MED',
	@isPreview=1, --use preview mode to get counts before doing the deed
	@lastmodifiedfrom='2017-06-29 3:00:06.000',
	@lastmodifiedto='2017-06-29 13:20:"
dbo,UnusedEehrExams,SQL_STORED_PROCEDURE,2018-08-23 15:34:11.110,2025-06-25 07:55:36.950,2498,Has Source,3125,"-- =============================================
-- Author:		ali
-- Create date: 11/14/2017
-- Description:	Generates report rows for unused eehr exams 
-- =============================================
CREATE PROCEDURE [dbo].[UnusedEehrExams]
		@CompanyID		varchar(50),
		@OfficeNum		varchar(8),
		@FromDate		datetime,
		@ToDate			datetime,
		@IgnoreOrderBeforeThisDate			datetime = null
AS
BEGIN
		SET NOCOUNT ON;

		SELECT officenum as OfficeNum INTO #OfficeList from office where CompanyID = @Comp"
dbo,Scheduler_AppointmentsInTimeSlot_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:58.243,2025-06-25 07:55:36.943,4125,Has Source,3518,"




-- =============================================
-- Author:		Joel Deister
-- Create date: 04/02/2010
-- Description:	Gets the appointments for a Provider of a specific date and time slot.
--              Optionally accepts @locationID to narrow the results to a given location.
-- Change:		MD 4/06/2010 Added recurringAppoitnmentID
-- Change:		AM 4/14/2010 fixed problem with null 
-- Change:		JL 4/21/2010 Changed @startTime and @endTime to NVARCHAR(22)
-- Change:		AA 2/1/2011 Add"
dbo,Scheduler_AppointmentBook_Get,SQL_STORED_PROCEDURE,2014-03-10 00:09:08.000,2025-06-25 07:55:36.937,4125,Has Source,6403,"
  
CREATE PROCEDURE [dbo].[Scheduler_AppointmentBook_Get]            
@FromDate DateTime,  
@OfficeId INT   
          
AS            
BEGIN            
  
 --Scheduler_AppointmentBook_GET '2012-09-13',21  
  
 SET NOCOUNT ON;            
   
SELECT DISTINCT appt.appt_no   
              , appt.ResourceId          
              , appt.PatientID          
              , CONVERT(DATETIME, appt.appt_date) as appt_date    
              , appt.appt_start_time     
              , appt.appt_end_ti"
dbo,GetPatientOrderLedgerInvoiceData,SQL_STORED_PROCEDURE,2016-07-27 00:03:46.083,2025-06-25 07:55:36.930,3255,Has Source,3907,"CREATE PROCEDURE [dbo].[GetPatientOrderLedgerInvoiceData]
	@cutOffDate datetime,
	@CompanyId varchar(20),
	@orderIdList varchar(max)
AS
BEGIN
 SET NOCOUNT ON
		SELECT 
			ROW_NUMBER() OVER( ORDER BY o.ordernum, id.linenum, pt.transactionid ) as Row 
			, p.id as PatientId 
			, coalesce(p.firstname, '') as PatientFirstName 
			, coalesce(p.lastname, '') as PatientLastName 
			, offc.officenum as OfficeNum 
			, offc.officename as OfficeName 
			, o.ordernum as OrderNum 
			, o.orderdate as Order"
dbo,GetUndeliveredOrdersbyOrders,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.337,2025-06-25 07:55:36.923,4125,Has Source,4803,"
CREATE PROCEDURE [dbo].[GetUndeliveredOrdersbyOrders]
 @CutoffDate as datetime,
 @CompanyID as nvarchar(10),
 @OfficeNum as nvarchar(300)
AS
BEGIN
declare @merchandiseDropStatus varchar(2) = 'MD';

set @CutoffDate = DATEADD(dd, 1, dbo.DateOnly(@CutoffDate))
select newid() as ID,
pt.Officenum,pt.OrderID
,'' as TransactionType
,p.Lastname + ' ,' + p.Firstname as PatientName,'' as ItemType,
'' as ItemNum,
'' as ItemName,sum(isnull(ind.Quantity,0)) as Quantity ,
sum(isnull(ind.price"
dbo,GetCutoffData,SQL_STORED_PROCEDURE,2009-03-03 17:55:06.707,2025-06-25 07:55:36.917,5958,Has Source,5582,"CREATE PROCEDURE [dbo].[GetCutoffData]

@cutOffDate datetime,
@startdate datetime,
@enddate datetime 

AS
BEGIN
	SET NOCOUNT ON;

select Row_number() over(order by officenum) as ID,
	 data.DateOfBilling as DateOfBilling
	, data.CarrierId as CarrierId
	, p.PlanName as PlanId
	, data.OfficeNum as OfficeNum
	, pat.Lastname +', '+ pat.Firstname as PatientId
	, sum(data.GrossRetail) as GrossRetail
	, sum(data.RetailDiscounts) as RetailDiscounts
	, sum(data.NetRetail) as NetRetail
	"
dbo,MergeOrChangeCompany,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.123,2025-06-25 07:55:36.907,2444,Has Source,24489,"
/****** Object:  StoredProcedure [dbo].[MergeOrChangeCompany]    Script Date: 09/5/2018 3:20:33 PM ******/
-- =============================================
-- Author:		AlSupport
-- Create date: 09/05/2018
-- Description: Change or Merge one company records to another company
-- =============================================

CREATE PROCEDURE MergeOrChangeCompany
		
		@FromCompanyId  varchar(30),
		@ToCompanyId  varchar(30)
AS
BEGIN

    Print 'Company Merging started'

    if(No"
dbo,GetPOSPaymentDetailbyTransactionDateforMailCheckandCC,SQL_STORED_PROCEDURE,2015-11-18 00:15:10.687,2025-06-25 07:55:36.890,3507,Has Source,1063,"CREATE PROCEDURE [dbo].[GetPOSPaymentDetailbyTransactionDateforMailCheckandCC]
@fromdate datetime,
@todate datetime,
@CompanyID varchar(20),
@Paymenttypeid varchar(25)

AS
BEGIN
	SET NOCOUNT ON;

select newid() as id, PaymentDetailID,p.PaymentID,PaymentTypeID,
 cast((p.Amount* (ISNULL(PT.Amount,0)/nullif(ppt.Amount,0))) as decimal(9,2))   * -1 as Amount,
Convert(datetime,Convert(varchar(20),pt.TransactionDate,101)) as TransactionDate,pt.officenum as OfficeNum 
from PosPaymentDetail p
INNER JOIN "
dbo,Scheduler_PatientDetail_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.850,2025-06-25 07:55:36.883,4125,Has Source,4485,"
CREATE PROCEDURE [Scheduler_PatientDetail_Get] 
	(
	@patientId int
	)	
AS

-- =============================================
-- File Name:	Scheduler_PatientDetail_Get.sql
-- Description:	This Stored Procedure Gets Details of the patients.
-- Author:	B. VanHorne/JD
-- Example: Scheduler_PatientDetail_Get 47869
-- History:	Date		Initials	Description
--			01/04/2010	JD			Created
--			02/12/2010	AM			Added balance
--			01/17/2010  JD          Added PatientAddressID
--			03/02/2010  A"
dbo,GetMemberPayments,SQL_STORED_PROCEDURE,2015-11-12 00:15:13.910,2025-06-25 07:55:36.877,3513,Has Source,1691,"
CREATE PROCEDURE [dbo].[GetMemberPayments]
@FromDate datetime,
@ToDate datetime,
@CompanyID varchar(20),
@OfficeNumber varchar(max)

AS
BEGIN
	SET NOCOUNT ON;
	
DECLARE @CutoffDate date;
SET @CutoffDate = DATEADD(day,1, @ToDate);


declare @OfficeTable as table(
OfficeNum varchar(20)
)

IF(@OfficeNumber is null or @OfficeNumber  = '')
BEGIN
	INSERT INTO @OfficeTable SELECT OfficeNum FROM dbo.Office WHERE CompanyID = @CompanyID and IsLiveOffice = 1 and IsRetail = 1;
END
ELSE
BEGIN
	INSERT INTO @"
dbo,GetCustomerCreditDetail,SQL_STORED_PROCEDURE,2014-08-26 23:42:40.837,2025-06-25 07:55:36.873,3956,Has Source,1626,"

CREATE PROCEDURE [dbo].[GetCustomerCreditDetail]
@fromdate datetime,
@todate datetime,
@CompanyID varchar(20),
@OfficeNum varchar(10),
@IncludeOldSystemCredit as bit

AS
BEGIN
	SET NOCOUNT ON;

	SELECT    top 100 percent newID() as ID, o.OfficeNum, o.OfficeName, pa.LastName + ', ' + pa.FirstName AS PatientName, ISNULL(pt.OrderID, '') AS OrderID, pt.TransactionID, 
                     cast((p.Amount* (ISNULL(PT.Amount,0)/nullif(ppt.Amount,0))) as decimal(9,2)) as Amount, e.LastName + ', ' + e."
dbo,SP_PatientRecallReport,SQL_STORED_PROCEDURE,2018-08-23 15:34:11.090,2025-06-25 07:55:36.867,2498,Has Source,3115,"


CREATE procedure [dbo].[SP_PatientRecallReport]
  @companyid as varchar(20),
  @OfficeNum varchar(max),
  @employee varchar(max),
  @fromdate datetime,
  @todate as datetime
AS
begin

SELECT  DISTINCT  convert(varchar,Row_number() over(order by p.Id))+ '-' + o.officeNum as ID, max(p.id) as PatientID,
 office.companyID as CompanyID
,upper(substring(p.FirstName, 1, 1)) + lower(substring(p.FirstName, 2, len(p.firstname))) as FirstName
,upper(substring(p.LastName, 1, 1)) + lower(substring(p.LastN"
dbo,Scheduler_PatientReferral_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.027,2025-06-25 07:55:36.863,4125,Has Source,888,"-- =============================================
-- File Name:	Scheduler_PatientReferral_Get.sql
-- Description:	This Stored Procedure Gets data.
-- Author:	Joel Deister
-- History:	Date		Initials	Description
--			02/16/2010	JD			Created
-- =============================================

CREATE PROCEDURE [Scheduler_PatientReferral_Get] 
	@patient_no int
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT 
		pr.[ref_type],
		CASE pr.[ref_type]
		"
dbo,Scheduler_AppointmentConfirmation_Get,SQL_STORED_PROCEDURE,2014-03-10 00:09:08.020,2025-06-25 07:55:36.857,4125,Has Source,7121,"-- =============================================
-- File Name:	Scheduler_AppointmentConfirmation_Get.sql
-- Description:	This Stored Procedure Gets Details for the appointment confirmations.
-- Author:		Joel Deister
-- History:	Date		Initials	Description
--			05/20/2010	JD			Created
--			06/02/2010	JD			Defect Id: 32130 - Added TOP 1 to subquery.
--			06/15/2010	JD			Added insurance_no.
--          01/11/2011  JD			Correct logic for the eligibility data
--			03/16/2012  AA			Modified for WebSche"
dbo,GetPatientLiteWithoutPhone,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.930,2025-06-25 07:55:36.850,4125,Has Source,18725,"CREATE PROCEDURE [dbo].[GetPatientLiteWithoutPhone]
@MaxResultValue as int,
@FirstResult as int,
@CompanyID varchar(20),
@FirstName varchar(30),
@LastName varchar(30),
@BirthDate varchar(100),
@InActiveValue bit,
@OfficeId varchar(8)

AS
BEGIN
    SET NOCOUNT ON;

	if (@FirstResult = 0) begin
		if (@OfficeId = '%') begin
		if (@InActiveValue is null) begin
			SELECT TOP (@MaxResultValue) * from
			(SELECT ROW_NUMBER() OVER(ORDER BY sort_1,sort_2) as row, query.ID, 
				isnull(query.FirstName,'')"
dbo,GetUndeliveredCashOrdersByOrder,SQL_STORED_PROCEDURE,2013-02-20 00:01:02.140,2025-06-25 07:55:36.840,4508,Has Source,5149,"CREATE PROCEDURE [dbo].[GetUndeliveredCashOrdersByOrder]
 @CutoffDate as datetime,
 @CompanyID as nvarchar(10),
 @OfficeNum as nvarchar(300)
AS
BEGIN
declare @merchandiseDropStatus varchar(2) = 'MD';
set @CutoffDate = DATEADD(dd, 1, dbo.DateOnly(@CutoffDate))
select newid() as ID,
pt.Officenum,pt.OrderID
,'' as TransactionType
,p.Lastname + ' ,' + p.Firstname as PatientName,'' as ItemType,
'' as ItemNum,
'' as ItemName,sum(isnull(ind.Quantity,0)) as Quantity ,
sum(isnull(ind.price,"
dbo,Scheduler_EventText_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.163,2025-06-25 07:55:36.837,4125,Has Source,1561,"
-- =============================================
-- Author:		Ali
-- Create date: 06/15/2012
-- Description:	Gets the display text of an audit value
-- History:		Initials	Date			Description

-- =============================================

CREATE PROCEDURE [Scheduler_EventText_Get]
	
	@Event nvarchar (50)
	,@Value varchar(255)

AS
BEGIN
	SET NOCOUNT ON;

	IF @Event = 'Location'
	BEGIN
		SELECT Office.OfficeName AS DisplayName, OfficeId AS ID FROM Office WHERE OfficeId = CAST"
dbo,Scheduler_PatientAppointmentsHistory_Get,SQL_STORED_PROCEDURE,2014-03-10 00:09:08.027,2025-06-25 07:55:36.830,4125,Has Source,3597,"-- =============================================
-- File Name:	Scheduler_PatientAppointmentsHistory_Get.sql
-- Description:	This stored procedure gets all appointments for a patient that aren't deleted.
-- Author:		Joel Deister
-- History:	Date		Initials	Description
--			02/10/2014	JD			Created
-- =============================================

CREATE PROCEDURE [dbo].[Scheduler_PatientAppointmentsHistory_Get] 
	( 
	@patientId		INT
	,@officeId		INT = null
	)
AS
BEGIN  
	SET NOCOUNT ON;  
	SET TRAN"
dbo,SetupNewCompany,SQL_STORED_PROCEDURE,2014-02-21 03:39:28.927,2025-06-16 07:55:56.450,4133,Has Source,141372,"/*** This script is run for the creation of a new company.                                                           ***/
/*   When run manually from the AL Support utility, the script will create all necessary tables using default values.  */
/*   When run for Pearle using the Site file integration, a company type of 'PVLO' should be used.  In this case, most */
/*      values are copied from the specified ExistingCompany                                                           */
/****** Obje"
dbo,AddFeatureToTenant,SQL_STORED_PROCEDURE,2025-06-16 07:55:56.343,2025-06-16 07:55:56.343,0,Has Source,1059,"-- =============================================
-- Author:      Ken Henderson
-- Create date: 2025-06-13
-- Description: Adds a feature flag to FeatureAvailability for a tenant (company or office) if it does not already exist.
--              If the record exists, does nothing (no update).
-- =============================================
CREATE PROCEDURE dbo.AddFeatureToTenant
    @FeatureUUID uniqueidentifier,
    @ContextType varchar(50),
    @ContextKey varchar(50),
    @IsAvailable bit,
   "
dbo,GetPackageLite_Optimized,SQL_STORED_PROCEDURE,2025-06-06 18:49:14.043,2025-06-06 18:49:14.043,0,Has Source,5005,"
-- Create the optimized stored procedure
CREATE PROCEDURE [dbo].[GetPackageLite_Optimized] 
	@officeNum VARCHAR(8), 
	@description VARCHAR(50) = NULL,
	@packageID int = NULL,
	@isVSPIOF bit = 0
AS
BEGIN

	SET NOCOUNT ON;

	-- Parameter handling optimization
	IF @description IS NULL OR @description = ''
		SET @description = '%'
	ELSE 
		SET @description = '%' + @description + '%';

	IF @packageID = 0 
		SET @packageID = NULL 

	-- Drop temp table if it exists
	IF OBJECT_ID('tempdb..#TempPackSche"
AdvancedMetric,GetLiveOfficesByClient,SQL_STORED_PROCEDURE,2023-03-19 07:58:52.950,2025-06-05 07:55:34.507,809,Has Source,3440,"/****** Object:  StoredProcedure [AdvancedMetric].[GetLiveOfficesByClient]    Script Date: 3/14/2023 3:20:33 PM ******/
-- =============================================
-- Author:		Anton
-- Create date: 03/14/2023
-- Description: Gets executed by Advanced Metric system to collect data from the enterprise client
-- This sp is to protect against potential violations via changing query string parameters
-- =============================================
CREATE PROCEDURE [AdvancedMetric].[GetLi"
dbo,CleanUpPatientAfterMerge,SQL_STORED_PROCEDURE,2014-06-06 17:54:29.663,2025-05-30 07:56:09.170,4011,Has Source,1404,"CREATE PROCEDURE [dbo].[CleanUpPatientAfterMerge]
	@Patient_ID INT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @phones TABLE (ID INT)

	DECLARE @addresses TABLE (ID INT)

	INSERT INTO @phones SELECT PhoneID FROM PatientPhone
	WHERE  PatientID = @Patient_ID

	INSERT INTO @addresses SELECT AddressID FROM PatientAddress
	WHERE  PatientID = @Patient_ID

	BEGIN TRY
		BEGIN TRANSACTION
		-- CLEAN UP JUNCTION TABLES
		DELETE pp FROM PatientPhone pp JOIN @phones p ON pp.PhoneID = p.ID  AND pp.PatientID = @Patie"
dbo,SetInsTerminationDefaultDateGoLiveSetup,SQL_STORED_PROCEDURE,2025-05-26 07:55:36.577,2025-05-26 07:55:36.577,0,Has Source,852,"CREATE PROCEDURE [dbo].[SetInsTerminationDefaultDateGoLiveSetup]
	@PlanID     INT,
    @OfficeNum  VARCHAR(20),
	@Version1   INT = 262,
	@CompanyID	VARCHAR(8) = NULL
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @DefaultTerminationDate DATETIME = DATEADD(YEAR, 20, CAST(GETDATE() AS DATE)); --Ref: SP - [dbo].[MapInsurancePlan]

	--To Update missing TerminationDate - EDT-21330
    UPDATE CompanyInsSchedule
		SET TerminationDate = @DefaultTerminationDate
	WHERE   CompanyID = @CompanyID
    AND     PlanID   "
dbo,CopyStatementConfigPaymentTypeGoLiveSetup,SQL_STORED_PROCEDURE,2025-05-26 07:55:36.573,2025-05-26 07:55:36.573,0,Has Source,1062,"CREATE PROCEDURE [dbo].[CopyStatementConfigPaymentTypeGoLiveSetup]
	@CopyFromCompanyId	varchar(32),
	@CopyToCompanyId	varchar(32),
	@WithOverlay		int = 0	
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @FromStatementConfigID int,
			@ToStatementConfigID int
	
	SELECT TOP 1 @FromStatementConfigID = ID FROM StatementConfig (NOLOCK) WHERE CompanyID = @CopyFromCompanyId
	SELECT TOP 1 @ToStatementConfigID = ID FROM StatementConfig (NOLOCK) WHERE CompanyID = @CopyToCompanyId

    MERGE StatementConfigPaymentType"
dbo,CopyInvoiceConfigGoLiveSetup,SQL_STORED_PROCEDURE,2025-05-26 07:55:36.570,2025-05-26 07:55:36.570,0,Has Source,2087,"CREATE PROCEDURE [dbo].[CopyInvoiceConfigGoLiveSetup]
	@CopyFromCompanyId	varchar(32),
	@CopyToCompanyId	varchar(32),
	@WithOverlay		int = 0	
AS
BEGIN
	SET NOCOUNT ON;

    MERGE InvoiceConfig AS T 
	USING(
		SELECT @CopyToCompanyId AS CompanyID
			,DisplayTaxID
			,DisplayPatientMRN
			,DisplayDiagnosisCodes
			,DisplayNextAppointmentDate
			,DisplayNPIOption
			,DisplayPatientAddress
			,DisplayCCSignatureCapture
			,DisplayPromiseDate
			,DisplayFrameItemNum
			,DisplayCPTCodes
			,DisplayPro"
dbo,CopyInsProviderNumberGoLiveSetup,SQL_STORED_PROCEDURE,2025-05-26 07:55:36.567,2025-05-26 07:55:36.567,0,Has Source,2394,"CREATE PROCEDURE [dbo].[CopyInsProviderNumberGoLiveSetup]
	@CopyFromCompanyId	varchar(32),
	@CopyToCompanyId	varchar(32),
	@WithOverlay		int = 0	
AS
BEGIN
	SET NOCOUNT ON;

	--To Get main office number from training Company
	DECLARE @ToOfficeNum varchar(8)
	SELECT TOP 1 @ToOfficeNum = ExternalOfficeNum FROM Office (NOLOCK) WHERE CompanyID = @CopyFromCompanyId

	--To Get matching training and main provider doctor ids
	DECLARE @ProviderDRTempTab AS TABLE(TrainDoctorID int, MainDoctorID int)
	INSER"
dbo,CopyCompanyPatientNoticeMappingGoLiveSetup,SQL_STORED_PROCEDURE,2025-05-26 07:55:36.560,2025-05-26 07:55:36.560,0,Has Source,858,"CREATE PROCEDURE [dbo].[CopyCompanyPatientNoticeMappingGoLiveSetup]
	@CopyFromCompanyId	varchar(32),
	@CopyToCompanyId	varchar(32),
	@WithOverlay		int = 0	
AS
BEGIN
	SET NOCOUNT ON;

    MERGE CompanyPatientNoticeMapping AS T 
	USING(
		SELECT @CopyToCompanyId AS CompanyID
			,PatientNoticeSettingLetterID
			,NoOfDaysAfterLastNotice			
		FROM CompanyPatientNoticeMapping
		WHERE CompanyID=@CopyFromCompanyId --Training Data source
	) AS S
	ON (T.CompanyID = S.CompanyID AND T.PatientNoticeSettingLe"
dbo,LoadOrUpdateCompanyDashboard,SQL_STORED_PROCEDURE,2016-10-26 00:03:32.920,2025-05-21 07:55:43.780,3129,Has Source,9237,"CREATE PROCEDURE [dbo].[LoadOrUpdateCompanyDashboard]
   @CompanyID VARCHAR(20)
AS

BEGIN
    SET NOCOUNT ON;

	DECLARE 
	@totalFrame int = 0, 
	@totalEyeglassLenses int = 0, 
	@totalContactLenses int = 0,  
	@totalServices int = 0, 
	@totalPlans int = 0,
	@totalProviders int = 0, 
	@totalStaffs int = 0,
	@totalAccessories int=0, 
	@companyInfoCount int = 0,
	@companyAdditionalIntegrationCount int = 0,
	@oldCompanyInfoStatus int,
	@oldCompanyAdditionalIntegrationsStatus int,
	@oldCarrierAndPlanS"
dbo,SetupExistingCompanyDashBoard,SQL_STORED_PROCEDURE,2015-12-16 01:13:46.780,2025-05-21 07:55:43.770,3444,Has Source,10765,"CREATE PROCEDURE [dbo].[SetupExistingCompanyDashBoard]
   @CompanyID VARCHAR(20), 
   @ResourceIDs VARCHAR(MAX) = ''
AS

BEGIN
    SET NOCOUNT ON;

	DECLARE 
	@totalFrame int = 0, 
	@totalEyeglassLenses int = 0, 
	@totalContactLenses int = 0,  
	@totalServices int = 0, 
	@totalLabs int = 0,
	@totalPlans int = 0,
	@totalResourceSchedule int = 0,
	@totalProviders int = 0, 
	@totalStaffs int = 0,
	@totalAccessories int = 0, 
	@practiceInfoCount int = 0,
	@claimsInfoCount int = 0,
	@additionalIntegr"
dbo,SetupVspMedicaid,SQL_STORED_PROCEDURE,2015-12-16 02:05:04.340,2025-05-21 07:55:43.743,3444,Has Source,1301,"-- ===============================================================================================================================
-- Author:		Ayush Chadha
-- Create date: 12/2/2015
-- Description:	Stored Procedure to set up the VSP and VSP Medicaid plans to the web Billing mode at the company Carrier level
-- ===============================================================================================================================
CREATE PROCEDURE SetupVspMedicaid
			@companyId varchar(20),"
dbo,SearchEpmMappableInsurancePlansActiveOnly,SQL_STORED_PROCEDURE,2015-12-16 01:13:46.663,2025-05-21 07:55:43.737,3444,Has Source,2378,"CREATE PROC [dbo].[SearchEpmMappableInsurancePlansActiveOnly]
    @Carrier    VARCHAR(50),
    @CompanyID  VARCHAR(8)    
AS
BEGIN
    SET NOCOUNT ON;
    
    -- There are plenty of plans that don't have a default schedule.
    -- Exclude these or they will blow up when we try to map them
    WITH PlansWithDefaultSchedule AS
    (
        SELECT DISTINCT
                PlanID
        FROM    InsSchedule
        WHERE   VersionId = 261 -- Default Schedule
    )
    SELECT      p"
dbo,SearchEpmMappableInsurancePlans,SQL_STORED_PROCEDURE,2015-05-05 22:49:42.877,2025-05-21 07:55:43.730,3669,Has Source,3797,"CREATE PROC [dbo].[SearchEpmMappableInsurancePlans]
    @Carrier    VARCHAR(50),
	@OfficeNum  VARCHAR(8)
AS
BEGIN
    SET NOCOUNT ON;
    
    -- There are plenty of plans that don't have a default schedule.
    -- Exclude these or they will blow up when we try to map them
    WITH PlansWithDefaultSchedule AS
    (
        SELECT DISTINCT
                PlanID
        FROM    InsSchedule
        WHERE   VersionId = 261 -- Default Schedule
    )
    SELECT      p.CarrierCode,
                c.C"
dbo,UpdateCompanyEdiSiteKey,SQL_STORED_PROCEDURE,2015-11-18 00:15:10.707,2025-05-21 07:55:43.727,3472,Has Source,1017,"CREATE PROCEDURE UpdateCompanyEdiSiteKey
    @CompanyID  VARCHAR(20),
    @EdiSiteKey VARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;
    
    UPDATE    InsEDI837
    SET       InterchangeSenderID = @EdiSiteKey
    WHERE     CompanyID           = @CompanyID;
    
    IF ISNULL(@EdiSiteKey, '') = ''
    BEGIN
        -- If a company blanks out the EDI Site key their intent is to
        -- no longer use EDI. Change all their company carrier attributes 
        -- from EDI to Manual.
    "
dbo,SearchEpmMappableInsPlansByPayerId,SQL_STORED_PROCEDURE,2015-11-18 00:15:10.693,2025-05-21 07:55:43.720,3472,Has Source,3521,"CREATE PROC [dbo].[SearchEpmMappableInsPlansByPayerId]
    @PayerID    VARCHAR(50),
    @OfficeNum  VARCHAR(8)
AS
BEGIN
    SET NOCOUNT ON;
    
    -- There are plenty of plans that don't have a default schedule.
    -- Exclude these or they will blow up when we try to map them
    WITH PlansWithDefaultSchedule AS
    (
        SELECT DISTINCT
                PlanID
        FROM    InsSchedule
        WHERE   VersionId = 261 -- Default Schedule
    ),
    SearchablePlans AS
    (    
		SELECT  "
dbo,SetupNewOffice,SQL_STORED_PROCEDURE,2016-08-31 00:04:07.390,2025-05-13 07:54:50.350,3177,Has Source,16113,"-- =============================================
-- Author:		SpenRu
-- Create date: 05/05/2016
-- Description:	Add New Office
-- =============================================
CREATE PROCEDURE [dbo].[SetupNewOffice]
	@ExistingOfficeNum varchar(10),
	@NewOfficeNum varchar(8),
	@UserId int,
	@IsShadowOffice bit = 0,
	@ExternalOfficeNum varchar(8) = null,
	@CompanyId varchar(10) = null
	WITH RECOMPILE	

AS
	DECLARE @OfficeOperationalStatus INT = 10361
	DECLARE @ExistingCompanyID varchar(20)
	DECLARE"
dbo,FixPatientInsuranceAddressAndPhone,SQL_STORED_PROCEDURE,2019-06-20 13:20:27.277,2025-05-07 07:56:52.540,2148,Has Source,5272,"CREATE PROCEDURE [dbo].[FixPatientInsuranceAddressAndPhone]
    @PatientID INT
AS
BEGIN
    SET QUOTED_IDENTIFIER ON;
    SET ANSI_NULLS ON;
    SET NOCOUNT ON;

    DECLARE @LocalPatientID INT = @PatientID;

    -- Temporary table to hold IDs and related info for InsuranceSubscriber
    DECLARE @table table (ID int, InsSubscriberID int);

    DECLARE @tmpInvalidInfo TABLE
    (
        InsSubscriberID INT,
        AddressID INT,
        PhoneID INT,
        PatientID INT
    );

    INSERT INTO"
dbo,Scheduler_TemplatesByStartAndEndDateAndResourceIDs_Get,SQL_STORED_PROCEDURE,2023-07-09 07:54:26.850,2025-03-31 07:55:11.810,631,Has Source,2706,"CREATE PROCEDURE [Scheduler_TemplatesByStartAndEndDateAndResourceIDs_Get] 
	@resourceIDs VARCHAR(MAX)
	,@locationID INT
	,@startDate DATETIME = NULL
	,@endDate DATETIME = NULL
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	--Create Temporary Table for ResourceIDs

	IF OBJECT_ID('tempdb..#ResourcesIDTable') IS NOT NULL drop table #ResourcesIDTable
	CREATE TABLE #ResourcesIDTable (ID INT);

	DECLARE @compatibility int;
	select @compatibility= compatibility_level  FR"
dbo,Scheduler_PatientInsurancesGridList_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:06.830,2025-03-26 07:56:29.917,4034,Has Source,2024,"
-- =============================================
-- Author:		Joel Deister
-- Create date: 03/17/2010
-- Description:	Gets all insurance detail collections for patient.
-- added coverage type -ali
-- added expiredate and DESC -kdinh
-- added planId to join of InsuranceEligibility and added the insEligibilityId to the return list
-- =============================================

CREATE PROCEDURE [Scheduler_PatientInsurancesGridList_Get]
	@patientId INT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSA"
dbo,Scheduler_AvailableDateRange_Delete,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.973,2025-02-10 07:55:53.507,3990,Has Source,955,"-- =============================================
-- FileName:	Scheduler_AvailableDateRange_Delete
-- Description:	deletes available date range entry
-- Author:		Milenko Djuricin
-- Example:		Scheduler_AvailableDateRange_Delete 4
-- History:		Date		Initials	Description
--				03/18/2010	MD			Created
--				10/28/2010	MD			Added deletes to 
-- =============================================
CREATE PROCEDURE [Scheduler_AvailableDateRange_Delete]
	@range_no int
AS
BEGIN

	SET NOCOUNT ON;
	SET TRANSACTIO"
dbo,Scheduler_Service_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.637,2025-01-30 17:57:36.550,3979,Has Source,2048,"-- =============================================
-- Author:		Joel Deister
-- Create date: 3/2/2010
-- Description:	Gets the service information.
-- History:		Initials		Date			Description
--				AA				3/22/2012		Modified for WebScheduler
-- =============================================

CREATE PROCEDURE [dbo].[Scheduler_Service_Get] 
	@ServiceID	INT = NULL,
	@CompanyID VARCHAR(50) = NULL,
	@DurationMethodSetting INT = NULL,
	@OfficeId INT = NULL

AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATIO"
dbo,GetDuplicateUsernamesByCompany,SQL_STORED_PROCEDURE,2025-01-08 07:56:11.600,2025-01-13 15:36:16.710,5,Has Source,3107,"-- ===================================================================================
-- Author:		Tony Tu
-- Create date: 2024-12-30
-- Description:	for the specified company, run the stored procedure 
--				to find out the duplicate usernames that exist in other companies.
-- Usage:		EXEC	[dbo].[GetDuplicateUsernamesByCompany] @CompanyID = N'ULOGIN1'
-- ===================================================================================
CREATE PROCEDURE [dbo].[GetDuplicateUsernamesByCompany]
	@"
dbo,Scheduler_ServiceGroupServices_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.777,2025-01-01 07:56:01.573,3950,Has Source,866,"CREATE PROCEDURE [Scheduler_ServiceGroupServices_Get] 

-- =============================================
-- File Name:	Scheduler_ServiceGroupServices_Get.sql
-- Description:	This Stored Procedure Gets the services to compile a service group.
-- Author:	Ali atabek
-- Example: exec [Scheduler_ServiceGroupServices_Get] 
-- History:	Date		Initials	Description
--			03/31/2010	AA			Created
--			03/22/2012	AA			WebScheduler adaptation
-- =============================================
	
AS
	"
dbo,Scheduler_Services_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.910,2025-01-01 07:56:01.560,3950,Has Source,1846,"
-- =============================================
-- Author:		B. VanHorne
-- Create date: 1/4/2010
-- Description:	Gets the services for scheduling.
-- AA        3/21/2012     Modified for WebScheduler
-- JD		05/22/2012	   Modified for WebScheduler
-- =============================================

CREATE PROCEDURE [Scheduler_Services_Get] 
	@OfficeId			INT = NULL,
	@IncludeActiveOnly	BIT = NULL 
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @services TABLE
	(
		prd_no			INT,
		ViewOrder		INT,
		ExamType		"
dbo,GetMonthlyProductionSummary,SQL_STORED_PROCEDURE,2016-03-09 00:02:23.913,2025-01-01 07:56:01.553,3220,Has Source,1531,"CREATE PROCEDURE [dbo].[GetMonthlyProductionSummary]
@fromdate datetime,
@todate datetime,
@officeNumList varchar(max),
@drlist varchar(max),
@IncludeOldSystemCredit as bit

AS
BEGIN
	SET NOCOUNT ON;


SELECT ID as OfficeID INTO #OfficeList from GetOfficeNumber(@officeNumList)

    select newId() as id,
    sum(Discount) as Discount, 
    sum(Tax) as Tax,
    sum(Retail) as Retail,
	sum(CustomerAmount) as CustomerAmount,
	sum(Allowance) as Allowance,
	sum(InsReceivable) as InsReceivable,
	sum(Co"
dbo,CopyPracticeData,SQL_STORED_PROCEDURE,2016-01-20 00:42:01.247,2025-01-01 07:56:01.550,3269,Has Source,9514,"/*************************************************************************************
************************COPY PRACTICE DATA**********************************
-- This stored procedure copies over data from one practice to another.
-- Copied data includes: insurance, providers, lab mappings, patients, appointments,
-- frame, eyeglasses lens, contact lens, accessory mappings  etc.

-- Caveats:
-- You need an office to copy data from. This should be your @CopyFromOfficeNum
-- You need an offic"
dbo,CreateCLExamRx,SQL_STORED_PROCEDURE,2011-10-26 11:43:57.193,2025-01-01 07:56:01.543,4816,Has Source,2264,"-- =============================================
create PROCEDURE [dbo].CreateCLExamRx
	@IsCatalogItem bit,  --This will be true if AcuityLogic and original system is using catalog and has same OPC code identifier
	@CLStyle AS int,  --This will be AcuityLogic CLStyleID (table CLSTyle), which will come from mapping table/column
	@CLColor AS varchar(50), --This will be AcuityLogic CLColorCode (table CLColor), which will come from mapping table/column
	@Base AS decimal(8,2),
	@Sph AS decimal("
dbo,LookupCLItem,SQL_STORED_PROCEDURE,2011-08-16 17:39:07.067,2025-01-01 07:56:01.540,4887,Has Source,6191,"-- =============================================
CREATE PROCEDURE [dbo].[LookupCLItem]
    @IsCatalogItem bit,  --This will be true if AcuityLogic and original system is using catalog and has same OPC code identifier
    @CLManufacturer AS varchar(20), -----new changes
    @CLStyle AS int,  --This will be AcuityLogic CLStyleID (table CLSTyle), which will come from mapping table/column
    @CLColor AS varchar(50), --This will be AcuityLogic CLColorCode (table CLColor), which will come from m"
dbo,Scheduler_CompanyServices_Get,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.137,2025-01-01 07:56:01.533,2269,Has Source,541,"
CREATE PROCEDURE [Scheduler_CompanyServices_Get] 
	@CompanyId			VARCHAR(8) = NULL	
AS
BEGIN
	SET NOCOUNT ON;

	SELECT  IE.ID AS [prd_no],
		IE.ItemNum AS [prd_style_name],
		ISNULL(IC.CompanyItemName, IE.ItemName) AS [prd_desc]         
     FROM          
          Item IE WITH (NOLOCK)           
          INNER JOIN ItemCompanyMapping IC WITH (NOLOCK) ON  IE.ID = IC.ItemID
     WHERE
		  IE.ItemType = 6 AND
		  IE.Active = 1 AND
          IC.CompanyID = @CompanyId         
     ORDER BY     "
dbo,UpdateItemCostInItemCompanyMapping,SQL_STORED_PROCEDURE,2009-12-17 21:56:14.237,2025-01-01 07:56:01.530,5494,Has Source,763,"

CREATE PROCEDURE [dbo].[UpdateItemCostInItemCompanyMapping]
	
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @itemid AS int 
	DECLARE @Cost AS decimal(18,2)
	
	DECLARE TempCursor CURSOR FOR
	
	select icm.itemid, i.LastCost from Item i Inner join 
	itemcompanyMapping icm on icm.itemid = i.id
	
	OPEN TempCursor

	FETCH NEXT FROM TempCursor INTO
	@itemid, @Cost

	WHILE @@FETCH_STATUS = 0
		BEGIN
			IF EXISTS (SELECT [dbo].[Item].[ID] FROM	[dbo].[Item]
						WHERE [dbo].[Item].[ID] ="
dbo,LoadSpexFrame,SQL_STORED_PROCEDURE,2014-03-10 00:08:58.117,2025-01-01 07:56:01.520,3950,Has Source,12654,"
CREATE PROCEDURE [dbo].[LoadSpexFrame]
(@RESULT AS INT = 0 OUTPUT)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @TID AS int
	DECLARE @TStyle AS varchar(50) 
	DECLARE @TSize AS varchar(50)
	DECLARE @TTemple AS varchar(50)
	DECLARE @TColor AS varchar(50)
	DECLARE @TBridge AS varchar(50)
	DECLARE @TColorCode AS varchar(50)
	DECLARE @TCategory AS varchar(50)
	DECLARE @TCost AS decimal(10,2"
dbo,Lookups_EGLens_ById,SQL_STORED_PROCEDURE,2021-09-13 14:33:01.287,2025-01-01 07:56:01.513,1206,Has Source,1574,"/****** Object:  StoredProcedure [dbo].[Lookups_EGLens_ById]    Script Date: 4/27/2021 10:12:40 AM ******/
-- =============================================
-- Author:		<Author,,Victor Samson>
-- Create date: <Create Date,,04/12/2021>
-- Description:	<Description,,Eyeglass Lens Details By ID>
-- =============================================
CREATE PROCEDURE [dbo].[Lookups_EGLens_ById]	
 @ItemId int,
 @CompanyId varchar(50),
 @OfficeNum varchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extr"
dbo,GetInventoryStatus,SQL_STORED_PROCEDURE,2014-03-10 00:08:57.960,2025-01-01 07:56:01.507,3950,Has Source,5734,"
CREATE PROCEDURE [dbo].[GetInventoryStatus]
@CompanyID as varchar(8),
@OfficeNum as varchar(8),
@ItemType as varchar(2),
@CollectionID as varchar(max) ,
@ItemStatusID as Varchar(max),
@GenderType as varchar(max),
@AgeGroup as varchar(max),
@FrameClass as varchar(max),
@SortType as varchar(2),
@FinancialGroupIDs as varchar(1000)
AS
BEGIN
	SET NOCOUNT ON; 		
	declare @ItemTypeValue int
	declare @SortTypeValue int		
	DECLARE @CollectionIdsTable TABLE (id int)

	if(@ItemType <> '' or @ItemType <> n"
dbo,Lookups_Accesory_ById,SQL_STORED_PROCEDURE,2021-09-13 14:33:01.263,2025-01-01 07:56:01.497,1206,Has Source,1341,"/****** Object:  StoredProcedure [dbo].[Lookups_Accesory_ById]    Script Date: 4/27/2021 9:47:41 AM ******/
-- =============================================
-- Author:		<Author,,Victor Samson>
-- Create date: <Create Date,,04/12/2021>
-- Description:	<Description,,Accesory Details By Id>
-- =============================================
CREATE PROCEDURE [dbo].[Lookups_Accesory_ById]	
	@ItemId int,
	@CompanyId varchar(50),
	@OfficeNum varchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to pr"
dbo,UpdateReceiptDescInItemCompanyMapping,SQL_STORED_PROCEDURE,2010-01-01 14:21:09.140,2025-01-01 07:56:01.493,5479,Has Source,888,"

CREATE PROCEDURE [dbo].[UpdateReceiptDescInItemCompanyMapping]
	
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @itemid AS int 
	DECLARE @ReceiptDesc AS varchar(400)
	
	DECLARE TempCursor CURSOR FOR
	
	select icm.itemid, eg.ReceiptDescription from itemcompanyMapping icm inner join item i on i.id = icm.itemid
	inner join itemEgLens eg on eg.itemid = i.id
	
	OPEN TempCursor

	FETCH NEXT FROM TempCursor INTO
	@itemid, @ReceiptDesc

	WHILE @@FETCH_STATUS = 0
		BEGIN
			IF EXISTS (SELE"
dbo,GetAppointmentItemTypes_Extension,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.763,2025-01-01 07:56:01.490,3950,Has Source,780,"CREATE PROC [dbo].GetAppointmentItemTypes_Extension
	@OfficeId        INT
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

SELECT DISTINCT P.ID AS [ID]
		, ie.itemNum as [ServiceCptCode]
        , P.AvailableToSchedule AS [IsActive] 
        , P.AppointmentColor AS [Color]
        , COALESCE(icm.CompanyItemName, ie.ItemName) AS [ServiceExamName]
		, ie.ID as ItemID 
        
FROM    dbo.AppSch_AppointmentType P 

JOIN Item ie ON P.ApptTypeID = ie.ID 
LEFT JOIN ItemCompa"
dbo,Lookups_Frames_Collections,SQL_STORED_PROCEDURE,2021-09-21 14:35:19.977,2025-01-01 07:56:01.487,1198,Has Source,524,"CREATE PROC [dbo].[Lookups_Frames_Collections]
(
	@companyId varchar(20)
)
AS
BEGIN
    SET NOCOUNT ON;
    
	with cte (datasourceid)
	as (select datasourceid from companyinfo where id = @CompanyId union select 1)
	SELECT
		distinct      
		fs.CollectionDescription AS Collection
		, fs.CollectionID
	FROM            
		dbo.FrameSearch AS fs WITH (nolock) 
		INNER JOIN dbo.ItemCompanyMapping AS icm WITH (nolock) ON icm.ItemID = fs.ID and icm.CompanyID=@companyId
		INNER JOIN cte on fs.DataSourceId"
dbo,Scheduler_PatientAppointmentsLite_Get,SQL_STORED_PROCEDURE,2019-03-25 10:53:00.510,2025-01-01 07:56:01.483,2109,Has Source,1776,"CREATE PROCEDURE [dbo].[Scheduler_PatientAppointmentsLite_Get]
	( 
	@patientId		INT
	)
AS
BEGIN
	SET NOCOUNT ON;  
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT DISTINCT appt.[appt_no] as appointmentId             
	  , appt.[PatientID] as patientId          
	  , CONVERT(DATETIME, appt.[appt_date]) as appointmentDate       
	  , appt.[appt_start_time] as appointmentStartTime       
	  , COALESCE(im.companyitemname, Item.itemName) as serviceDescription   
	  , appt.[appt_cancel_ind"
dbo,DoItemCompanyMapping,SQL_STORED_PROCEDURE,2009-09-02 10:23:34.067,2025-01-01 07:56:01.470,5600,Has Source,1507,"
CREATE PROCEDURE [dbo].[DoItemCompanyMapping]
	
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @itemname AS varchar(100) 
    DECLARE @companyID AS varchar(100)
	DECLARE @temple AS int 
	DECLARE @itemID AS int
	
	--Select all items except frames
	DECLARE ItemCursor CURSOR FOR
	select id,itemname from Item where active = 1 and itemtype in(8,9,10,11,12,13,14,15,16)
	
	OPEN ItemCursor

	FETCH NEXT FROM ItemCursor INTO
	@itemID,@itemname

	WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE Compa"
dbo,uspUpdateFrames,SQL_STORED_PROCEDURE,2009-06-04 17:36:53.500,2025-01-01 07:56:01.463,5690,Has Source,19974,"-- =============================================
-- Author:		Ahmed Alhosaini
-- Create date: 09/08/2008
-- Description:	Updating Frames
-- =============================================
CREATE PROCEDURE [dbo].[uspUpdateFrames]
(@RESULT AS INT = 0 OUTPUT)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @TID AS int
	DECLARE @TStyle AS varchar(50) 
	DECLARE @TSize AS varchar(50)
	DECLARE @TTemp"
dbo,uspFrameCatalogLoad,SQL_STORED_PROCEDURE,2011-12-28 22:43:14.380,2025-01-01 07:56:01.450,4753,Has Source,17755,"-- =============================================
-- Author:		Ahmed Alhosaini
-- Create date: 09/08/2008
-- Description:	Updating Frames
-- =============================================
CREATE PROCEDURE [dbo].[uspFrameCatalogLoad]
(@RESULT AS INT = 0 OUTPUT)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @TID AS int
	DECLARE @TStyle AS varchar(50) 
	DECLARE @TSize AS varchar(50)
	DECLARE @T"
dbo,GetContactLenses_Extension,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.787,2025-01-01 07:56:01.430,3950,Has Source,2596,"CREATE PROC [dbo].[GetContactLenses_Extension]
	@CompanyId			VARCHAR(20),
    @MfgNum			    VARCHAR(3),
    @LensStyleId        INT,
    @LensTypeId         INT,
    @HardLens			BIT,
    @Active				BIT =1,
	@ItemId				INT
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @ContactLensItemType INT;
	SET @ContactLensItemType = 17;

	WITH ItemGroupCte AS
	(
	 SELECT ID AS ItemGroupId,
	   ItemName AS ItemGroup
	 FROM Item
	 WHERE ItemType = @ContactLensItemType
	 AND  GroupFlag = 1
	)
	
	SELECT	* 
	FROM	
	(
			S"
dbo,InventoryValuationMethodChange,SQL_STORED_PROCEDURE,2015-01-13 23:42:18.710,2025-01-01 07:56:01.350,3641,Has Source,2073,"
CREATE PROCEDURE [dbo].[InventoryValuationMethodChange]
	@CompanyID as varchar(Max),
	@OldValuation as varchar(Max),
	@NewValuation as varchar(Max)	
AS
BEGIN
	SET NOCOUNT ON;
	
	
	IF (@OldValuation = 'StandardCost' and @NewValuation = 'AverageCostByCompany')
	BEGIN
	update icm
	set icm.CompanyAverageCost = CASE
	WHEN ISNULL(icm.Cost, 0) <> 0 THEN icm.Cost
	ELSE
	i.LastCost END
	FROM ItemCompanyMapping icm INNER JOIN Item i on i.ID = icm.ItemID WHERE icm.CompanyID = @CompanyID
	END
	
	
	ELSE IF "
dbo,Scheduler_ServiceTypeByOffice,SQL_STORED_PROCEDURE,2024-07-16 07:56:55.307,2025-01-01 07:56:01.343,169,Has Source,915,"CREATE PROCEDURE [dbo].[Scheduler_ServiceTypeByOffice] 
	@OfficeId as int,
	@IncludeActiveOnly as bit
AS
BEGIN
    SELECT COALESCE(IC.companyitemname, ie.itemName) as [prd_itemdesc]
 		  ,P.ApptTypeID AS [prd_no]
          , IE.ItemNum AS [prd_desc]
          , P.AvailableToSchedule AS [prd_appsch_ind]
          , P.AppointmentColor AS [prd_appsch_color]
     FROM
          dbo.AppSch_AppointmentType P WITH (NOLOCK)
          JOIN Item IE WITH (NOLOCK) ON P.ApptTypeID = IE.ID AND IE.ItemType = 6"
dbo,UpdateCompanyItemName,SQL_STORED_PROCEDURE,2010-03-14 19:42:27.840,2025-01-01 07:56:01.340,5407,Has Source,818,"
Create PROCEDURE [dbo].[UpdateCompanyItemName]
	
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @itemname AS varchar(150) 
	DECLARE @itemID AS int

	DECLARE TempCursor CURSOR FOR
	select i.id, i.itemname from itemcompanymapping icm inner join item i on icm.itemid=i.id where icm.companyitemname <> i.itemname and i.itemtype=1

	OPEN TempCursor

	FETCH NEXT FROM TempCursor INTO
	@itemID,@itemname

	WHILE @@FETCH_STATUS = 0
		BEGIN
			IF EXISTS (SELECT [dbo].[Item].[ID] FROM	[dbo].[Item]
		"
dbo,CopyItemCompanyMapping,SQL_STORED_PROCEDURE,2017-04-13 00:40:54.690,2025-01-01 07:56:01.337,2820,Has Source,3223,"/*************************************************************************************
************************COPY Item component mapping DATA**********************************
-- This stored procedure copies over item mapping data for an item from one practice to another.
-- This stored procedure is used in the Copy Setup Data and Go Live functions of ALSupport.
*************************************************************************************/
CREATE PROCEDURE [dbo].[CopyItemCompanyMapping"
dbo,LoadOrUpdateOOFrames,SQL_STORED_PROCEDURE,2012-02-29 08:07:43.647,2025-01-01 07:56:01.330,4690,Has Source,19498,"-- =============================================
-- Author:		AcuitLogic
-- Updated date: 01/27/2012
-- Description:	Updating Frames
-- =============================================
CREATE PROCEDURE [dbo].[LoadOrUpdateOOFrames]
(@RESULT AS INT = 0 OUTPUT)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @TID AS int
	DECLARE @TStyle AS varchar(50) 
	DECLARE @TSize AS varchar(50)
	DECLARE @TTem"
dbo,CatalogCleanup_Frames,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.067,2025-01-01 07:56:01.307,2269,Has Source,23089,"--exec CatalogCleanup_Frames '#N/A',null,'72F2F34F-3FDA-4AF0-8E9D-BC7C323564A1','2018-09-11',1,0,1,0,0
--exec CatalogCleanup_Frames '#N/A',null,'72F2F34F-3FDA-4AF0-8E9D-BC7C323564A1','2018-08-08',1,1,1,0,1
----exec CatalogCleanup_Frames '#N/A','select id from framecollection where manufacturerid = 127',null,'2018-08-08',0,0,0,0,0
CREATE PROCEDURE [dbo].[CatalogCleanup_Frames] 
	@ExcludeUPCCode varchar(8000), -- UpcCode to be excluded from clean up if any (comma separated values) or null
	@Collec"
dbo,LoadSpexFrameWithPriceRounding,SQL_STORED_PROCEDURE,2009-09-11 17:44:35.890,2025-01-01 07:56:01.293,5591,Has Source,14761,"
--select * from vst_frame v where v.itemno not in (select itemnum from item)


-- =============================================
-- Author:		Ahmed Alhosaini
-- Create date: 09/08/2008
-- Description:	Updating Frames
-- =============================================
CREATE PROCEDURE [dbo].[LoadSpexFrameWithPriceRounding]
(@RESULT AS INT = 0 OUTPUT)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DEC"
dbo,Lookups_Frames_Filters,SQL_STORED_PROCEDURE,2021-09-21 14:35:19.983,2025-01-01 07:56:01.287,1198,Has Source,1833,"CREATE PROC [dbo].[Lookups_Frames_Filters]
(
	@CompanyId varchar(20)
)
AS
BEGIN
    SET NOCOUNT ON;

	with cte (datasourceid) as (select datasourceid  from companyinfo where id = @CompanyId union select 1)
	SELECT
		distinct     
		isnull(fst.FrameCategoryID,-1) AS CategoryID
		, isnull(catelcat.Value,'None') AS Category
		, isnull(fst.AgeGroupID,-1) as AgeGroupID
		, isnull(catelage.Value,'None') AS AgeGroup
		, isnull(fst.GenderTypeID,-1) as GenderTypeID
		, isnull(catelgen.Value,'None') AS Ge"
dbo,LoadAndUpdateFrameTables,SQL_STORED_PROCEDURE,2015-08-25 23:04:45.220,2025-01-01 07:56:01.273,3417,Has Source,11078,"CREATE PROCEDURE [dbo].[LoadAndUpdateFrameTables]
AS
BEGIN
update vst_Frame set itemNo=(case when itemNo is null then OPC else itemNo end )

if exists (
    select  * from tempdb.dbo.sysobjects o
    where o.xtype in ('U') 
   and o.id = object_id(N'tempdb..#FrameType')
)
DROP TABLE #FrameType;

CREATE TABLE #FrameType
(
  id int,
  value varchar(100)  
)
INSERT INTO #FrameType (id, value)
select distinct c1.id, c1.Value from VST_Frame VF
LEFT JOIN CatElementLU c1 ON c1.Value=VF.Type AND c1.Type"
dbo,GetInventoryValuationItem,SQL_STORED_PROCEDURE,2019-12-19 00:04:57.977,2025-01-01 07:56:01.263,1840,Has Source,1974,"CREATE PROCEDURE [dbo].[GetInventoryValuationItem]
	@CutOffDate AS DateTime,
	@OfficeNum AS VarChar(Max),
	@ItemType AS VarChar(Max)    
AS
BEGIN
SET NOCOUNT ON;

;WITH itemTypes AS (select id from dbo.GetOfficeNumber(@ItemType))
	,invActivityIds as 
		(SELECT MAX(IA1.ID) as IA_ID, itemid, OFFICENUM
		 FROM InventoryActivity IA1
			inner join Item I1 on IA1.ItemID = I1.ID AND (i1.ItemType in (select id from ItemTypes) OR @ItemType = '')
		 WHERE CAST(TransactionDate AS DATE) <= @CutOffDate AND o"
dbo,Lookups_ContactLens_ById,SQL_STORED_PROCEDURE,2021-09-13 14:33:01.270,2025-01-01 07:56:01.157,1206,Has Source,1747,"/****** Object:  StoredProcedure [dbo].[Lookups_ContactLens_ById]    Script Date: 4/27/2021 10:00:58 AM ******/
-- =============================================
-- Author:		<Author,,Victor Samson>
-- Create date: <Create Date,,04/12/2021>
-- Description:	<Description,,Contact Lens Details By Id>
-- =============================================
CREATE PROCEDURE [dbo].[Lookups_ContactLens_ById]	
	@ItemId int,
	@CompanyId varchar(50),
	@OfficeNum varchar(50)

AS
BEGIN
	-- SET NOCOUNT O"
dbo,GetServiceExamItems_Extension,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.963,2025-01-01 07:56:01.153,3950,Has Source,2612,"
CREATE PROC [dbo].[GetServiceExamItems_Extension]
    @OfficeNum          VARCHAR(8),
    @CptCode            VARCHAR(50)  = NULL,
    @ServiceDescription VARCHAR(100) = NULL,
    @ActiveOnly         BIT          = 1,
    @DurationMethodSetting INT
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE @ExamItemType INT;
	SET @ExamItemType = 6;

    SELECT    icm.ID     AS ItemCompanyMappingId,
              i.ID       AS ItemId,                
              i.ItemNum  AS CptCode,
              i.ItemN"
dbo,Scheduler_ServicesLookupForGroupId_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.943,2025-01-01 07:56:01.150,3950,Has Source,1351,"
-- =============================================
-- Author:		Joel Deister
-- Create date: 3/6/2010
-- Description:	Gets the services listboxes
-- modified for WebScheduler -ali
-- JD	08/29/2012	Correct logic for use with the web scheduler.
-- =============================================

CREATE PROCEDURE [Scheduler_ServicesLookupForGroupId_Get] 
	@GroupId			INT = NULL,
	@IncludeActiveOnly	BIT = NULL 
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT
		P.Appt"
dbo,Scheduler_ServicesLookup_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.927,2025-01-01 07:56:01.143,3950,Has Source,1333,"
-- =============================================
-- Author:		Joel Deister
-- Create date: 3/6/2010
-- Description:	Gets the services listboxes
-- History:		Initials		Date			Description
--				JL				4/21/2010		Added Service Color
--				AA				3/21/2012		Modified for WebScheduler
-- =============================================

CREATE PROCEDURE [Scheduler_ServicesLookup_Get]
    @OfficeId			INT 
    ,@IncludeActiveOnly	BIT = NULL 
AS
BEGIN
    SET NOCOUNT ON;
    SET TRANSACTION IS"
dbo,AbortDacpacDeployment,SQL_STORED_PROCEDURE,2024-12-13 07:57:00.380,2024-12-13 07:57:00.380,0,Has Source,139,"CREATE PROCEDURE [AbortDacpacDeployment]	
@Message varchar(4000) = '** Deployment aborted. **'
AS
BEGIN
    RAISERROR(@Message, 16, 1) 
END"
dbo,Scheduler_Appointment_InvoiceId_Update,SQL_STORED_PROCEDURE,2022-02-08 19:01:35.450,2024-12-09 07:55:15.440,1035,Has Source,2432,"/*
    Stored Procedure: Scheduler_Appointment_InvoiceId_Update
    Purpose: Updates the InvoiceID of appointments in the AppSch_Appointment table for a specified location,
             but only if the current InvoiceID is zero and the appointment date is within 6 days of the provided invoice date.

    Parameters:
    - @locationID INT: The ID of the location for which the appointments should be updated.
    - @patientInvoiceIdTable dbo.udtPatientInvoiceIdsTable READONLY: A table-valued paramet"
dbo,BalanceAgingReportNew,SQL_STORED_PROCEDURE,2020-05-18 18:08:32.600,2024-12-05 07:56:16.743,1662,Has Source,2226,"CREATE PROCEDURE [dbo].[BalanceAgingReportNew]
@cutOffDate datetime,
@CarrierId varchar(50),
@PlanId int,
@OfficeNumber varchar(8),
@PatientId int,
@DepositDate datetime,
@CompanyID varchar(20),
@ServiceDateFrom datetime,
@ServiceDateTo datetime
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

select 
	  MAX(TransId) as AccountId
	, '1' as AccountTypeId
	, '1' as GLReceivableId
	, '1' as GLPaybleId
    , '01/01/2001' as BalanceDate
    , '01/01/2001'  as ClaimDate
  "
dbo,BalanceAgingReportCarrierPatient,SQL_STORED_PROCEDURE,2014-03-10 00:08:06.783,2024-12-05 07:56:16.740,3923,Has Source,9601,"CREATE PROCEDURE [dbo].[BalanceAgingReportCarrierPatient]
      @cutOffDate datetime,
       @CarrierId varchar(50),
       @PlanId int,
       @OfficeNumber varchar(max),
       @PatientId int,
       @DepositDate datetime,
       @CompanyID varchar(20),
       @CarrierPatient varchar(30),
       @closeid varchar(10),
       @ServiceDateFrom datetime,
       @ServiceDateTo datetime
AS
BEGIN
       SET NOCOUNT ON;
       SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

if (@OfficeNumber is nul"
dbo,BalanceAgingReportbyCloseID,SQL_STORED_PROCEDURE,2010-06-17 12:19:24.390,2024-12-05 07:56:16.730,5285,Has Source,5825,"CREATE PROCEDURE [dbo].[BalanceAgingReportbyCloseID]
@cutOffDate datetime,
@CarrierId varchar(50),
@PlanId int,
@OfficeNumber varchar(max),
@PatientId int,
@DepositDate datetime,
@CompanyID varchar(20),
@CloseID int,
@ServiceDateFrom datetime,
@ServiceDateTo datetime
AS
BEGIN
	SET NOCOUNT ON;

if (@OfficeNumber is null or @OfficeNumber  = '')
Begin
	set @OfficeNumber = null
end

declare @LastDepositDate as datetime
set @LastDepositDate = cast ( cast(month(DATEADD(mm, 1, @DepositDate)) as varchar"
dbo,BalanceAgingReport,SQL_STORED_PROCEDURE,2009-03-10 11:04:29.247,2024-12-05 07:56:16.720,5749,Has Source,5898,"CREATE PROCEDURE [dbo].[BalanceAgingReport]
@cutOffDate datetime,
@CarrierId varchar(50),
@PlanId int,
@OfficeNumber varchar(max),
@PatientId int,
@DepositDate datetime,
@CompanyID varchar(20),
@ServiceDateFrom datetime,
@ServiceDateTo datetime
AS
BEGIN
	SET NOCOUNT ON;

declare @OfficeTable as table(
OfficeNum varchar(20)
)

if (@OfficeNumber is null or @OfficeNumber  = '')
Begin
	insert into @OfficeTable select OfficeNum from dbo.Office where CompanyID = @CompanyID and IsLiveOffice = 1 and IsR"
dbo,ValidateAndAuditPatch,SQL_STORED_PROCEDURE,2024-12-04 07:56:00.767,2024-12-04 07:56:00.767,0,Has Source,1711,"-- =======================================================================================================
-- Description:	Validates if a patch has an auditlog in database
-- Author:		Kishan
-- Usage: 		exec ValidateAndAuditPatch 'patch year', 'patch description', 'Action'='batch'
-- Example:		exec ValidateAndAuditPatch '2022', 'Historical patch for 2022', 'Bulk update'
-- History:		Date		Initials	Description
--				11/15/2024	KB			Created
-- ======================================================"
dbo,AuditDacpacChange,SQL_STORED_PROCEDURE,2024-08-06 07:56:12.187,2024-12-04 07:56:00.763,120,Has Source,1842,"
-- =======================================================================================================
-- Description:	Adds a new log entry into AuditLog for Dacpac changes
-- Author:		Ken
-- Usage: 		exec AuditDacpacChange 'JiraId', 'schema.TableAffected', 'Action'='update', RowsAffected=@@ROWCOUNT, Success=RowsAffected > 0
-- Example:		exec AuditDacpacChange 'EDT-1234', 'dbo.Patient'
-- History:		Date		Initials	Description
--				07/22/2024	KH			Created
-- ================================="
dbo,LoadOrUpdateOfficeDashboard,SQL_STORED_PROCEDURE,2016-10-26 00:03:32.957,2024-11-19 07:55:47.967,2946,Has Source,8555,"CREATE PROCEDURE [dbo].[LoadOrUpdateOfficeDashboard]
   @CompanyID VARCHAR(20), 
   @OfficeNum VARCHAR(8), 
   @ResourceIDs VARCHAR(MAX) = ''
AS

BEGIN
    SET NOCOUNT ON;

	DECLARE 
	@totalLabs int = 0,
	@totalResourceSchedule int = 0,
	@officeInfoCount int = 0,
	@claimsInfoCount int = 0,
	@officeAdditionalIntegrationCount int = 0,
	@officePatientLocationCount int = 0,
	@officeHoursCount int = 0,
	@locationID int,
	@startDate DATETIME = NULL,
    @start_dayOfWeek INT = 0,
	@end_dayOfWeek INT = "
dbo,SearchLabNames,SQL_STORED_PROCEDURE,2015-11-18 00:15:10.700,2024-11-19 07:55:47.957,3289,Has Source,1448,"-- =============================================
-- Author:		Ayush Chadha
-- Create date: 2nd November 2015
-- Description:	Search all the LabNames 
-- =============================================
CREATE PROCEDURE SearchLabNames
	-- Add the parameters for the stored procedure here
	@OfficeNumber varchar(50) , 
	@LabName varchar(50) ,
	@MappedOnly Bit ,
	@State varchar(5)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
"
dbo,Scheduler_Resources_Get1,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.537,2024-11-15 07:55:40.203,3903,Has Source,1842,"
  
  
-- =============================================  
-- Author:  B. VanHorne  
-- Create date: 12/14/2009  
-- Description: Gets the available Providers.  
--    Optionally accepts @locationID to narrow results to a given Location.  
-- Modified By  Date  reason  
-- Joel Deister 2/24/10  Added @userId logic  
--  Ali    3/13/2012 Altered for WebScheduler  
-- George           5/4/2012    Added column IsVspDr  
-- JD    8/29/2012 Change logic to get only resources assigned to the location f"
dbo,Scheduler_CompanyResources_Get1,SQL_STORED_PROCEDURE,2015-03-10 22:44:18.993,2024-11-15 07:55:40.193,3538,Has Source,606,"CREATE PROCEDURE [dbo].[Scheduler_CompanyResources_Get1]
 @companyId nvarchar(50)  
  
AS  
BEGIN  
 SET NOCOUNT ON;  
  
 SELECT DISTINCT  
  P.[Employee] AS provider_no  
  ,P.[LastName] AS provider_last_name  
  ,P.[FirstName] AS provider_first_name  
  ,P.[MinutesExam] prooff_time_increment
  ,P.[TelehealthUserType]
 FROM dbo.Employee P WITH (NOLOCK)  

 WHERE  
  P.CompanyID = @companyId  
  AND P.[active] = 1    -- Provider is Active  
  AND P.AllowToBeScheduled = 1  
  "
dbo,Scheduler_ResourcesLookup_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.620,2024-11-15 07:55:40.183,3903,Has Source,929,"-- =============================================
-- Author:		Joel Deister
-- Create date: 03/05/2010
-- Description:	Gets only providers for listbox.
-- Modified By		Date		reason
--	Joel Deister	3/05/10		Created
--  PA              3/05/12     Modify to work with AL
-- =============================================

CREATE PROCEDURE [Scheduler_ResourcesLookup_Get] 
	(
	@companyID varchar(20)
	)
	AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELEC"
dbo,Scheduler_ResourceCanSchedule_Update,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.350,2024-11-15 07:55:40.183,3903,Has Source,556,"-- =============================================
-- File Name:	 Scheduler_ResourceCanSchedule_Update .sql
-- Description:	This Stored Procedure Saves Resource Can Be Scheduled flag.
-- Author:	Ali
-- History:	Date		Initials	Description
--			05/09/2012  AA			Created
-- =============================================

CREATE PROCEDURE [Scheduler_ResourceCanSchedule_Update] 

		@AllowToBeScheduled bit
		, @Employee int
AS
BEGIN

		UPDATE Employee
		SET
			AllowToBeScheduled = @AllowT"
dbo,Scheduler_ResourcesActivePerLocation_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.570,2024-11-15 07:55:40.123,3903,Has Source,1092,"
-- =============================================
-- File Name:	Scheduler_ResourcesActivePerLocation_Get.sql
-- Description:	This Stored Procedure Gets all the active resources.
-- Author:	Slava Khristich
-- Example: exec [Scheduler_ResourcesActivePerLocation_Get]
-- History:	Date		Initials	Description
--			3/13/2012	AA			Modified for WebScheduler
-- =============================================

CREATE PROCEDURE [Scheduler_ResourcesActivePerLocation_Get] 
@locationId INT, @userId int = 0
AS
BEG"
dbo,Scheduler_RotationInfo_Save,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.397,2024-11-15 07:55:40.083,3903,Has Source,663,"-- =============================================
-- File Name:	 Scheduler_RotationInfo_Save .sql
-- Description:	This Stored Procedure Saves Rotation weeks count and rotation start date
-- Author:	Ali
-- History:	Date		Initials	Description
--			11/05/2012	AA			Created
-- =============================================

CREATE PROCEDURE [dbo].[Scheduler_RotationInfo_Save] 
		@resourceId int	-- employee id
		,@NumberOfRotatingWeeks int 
		,@RotationStartDate datetime
	
AS
BEGIN
		UPDA"
dbo,Scheduler_UserByUserCredentials_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.177,2024-11-15 07:55:40.080,3903,Has Source,1072,"
-- =============================================
-- File Name:	Scheduler_UserByUserCredentials_Get.sql
-- Description:	This Stored Procedure gets the security details for a specified user credentials (userName + password)
-- Author:	Joseph Lee
-- History:	Date		Initials	Description
--			04/02/2010	JL			Created
--			04/04/2010	JL			Changed @Password paramter to @UserPassword
--			11/29/2010	AA			Changed to require just the UserName parameter.
-- ========================================="
dbo,Scheduler_EmployeeId_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.147,2024-11-15 07:55:40.053,3903,Has Source,425,"
-- =============================================
-- Author:		Joel Deister
-- Create date: 04/24/2012
-- Description:	Gets the employeeId for a user.
-- =============================================

CREATE PROCEDURE [Scheduler_EmployeeId_Get]
	@userID INT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[employee] as employeeId
	FROM
		Employee WITH (NOLOCK)
	WHERE
		[userId] = @userID

	RETURN;

END

"
dbo,Scheduler_ResourcesDefaults_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.603,2024-11-15 07:55:40.043,3903,Has Source,1154,"

-- =============================================
-- Author:		Joel Deister
-- Create date: 05/26/10
-- Description:	Gets the available default providers
--				for a given location.
-- Modified By		Date		reason
--	Joel Deister	05/26/10	created
--  Ali				03/30/2012	Reworked for WebScheduler
--  George          08/28/2012  Add function to get exam minutes
-- =============================================

CREATE PROCEDURE [Scheduler_ResourcesDefaults_Get] 
 (    
 @locationID INT    
 )    
AS    "
dbo,Scheduler_ResourceDuration_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.377,2024-11-15 07:55:40.040,3903,Has Source,648,"

CREATE PROCEDURE [dbo].[Scheduler_ResourceDuration_Get] 
	@resourceId int
	, @locationId int
	, @dayOfWeek int = NULL
AS

BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT E.Employee, E.MinutesExam, M.[Day], M.[Minutes]
	FROM dbo.Employee E WITH (NOLOCK) 
	INNER JOIN OfficeEmployee oe WITH (NOLOCK) ON oe.Employee = E.Employee  
	INNER JOIN Office o WITH (NOLOCK) ON o.OfficeNum = oe.OfficeNum  
	LEFT JOIN dbo.EmployeeExamMinutes M ON M.employeeid"
dbo,Scheduler_CompanyResources_GetAllIncludingInActiveDoctors,SQL_STORED_PROCEDURE,2019-03-25 10:53:00.500,2024-11-15 07:55:40.023,2062,Has Source,2829,"
-- =============================================  
-- Author:  Smruti  
-- Create date: 1/10/2019  
-- Description: Gets all resources of a company including InActive doctors 
-- Modified By  Date  reason  
--  Smruti    1/10/2019 Created for WebScheduler  
-- =============================================  
 CREATE PROCEDURE [dbo].[Scheduler_CompanyResources_GetAllIncludingInActiveDoctors]
 @companyId nvarchar(50)  
 ,@startDate datetime = NULL
 ,@endDate datetime = NULL
AS  
BEGIN  
 SET NOCOU"
dbo,AddEmployeeFromEmployeeTemp,SQL_STORED_PROCEDURE,2011-02-24 23:15:08.527,2024-11-15 07:55:40.020,5013,Has Source,1809,"-- =============================================
-- Author:		Praveen
-- Create date: 10/06/2010
-- Description:	Add Employee
-- =============================================
CREATE PROCEDURE [dbo].[AddEmployeeFromEmployeeTemp]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	DECLARE @TOfficeNum AS varchar(50)  
	DECLARE @TEmployeeNum AS varchar(50)
	DECLARE @TL"
dbo,Scheduler_AllResourcesByCompany_Get,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.407,2024-11-15 07:55:39.977,3903,Has Source,956,"

-- =============================================
-- Author:		Joel Deister
-- Create date: 03/05/2010
-- Description:	Gets only providers for listbox.
-- Modified By		Date		reason
--	Joel Deister	3/05/10		Created
--  PA              3/05/12     Modify to work with AL

-- =============================================

CREATE PROCEDURE [Scheduler_AllResourcesByCompany_Get] 
	(
	@companyID varchar(20)
	)
	AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTE"
dbo,Scheduler_UserByUserId_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.193,2024-11-15 07:55:39.970,3903,Has Source,847,"
-- =============================================
-- File Name:	Scheduler_UserByUserId_Get.sql
-- Description:	This Stored Procedure gets the security details for a specified user
-- Author:	Joseph Lee
-- History:	Date		Initials	Description
--			04/02/2010	JL			Created
-- =============================================

CREATE PROCEDURE [Scheduler_UserByUserId_Get] 
	@UserId INT
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	
	SELECT
		Employee AS pr"
dbo,Scheduler_ResourcesAll_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.587,2024-11-15 07:55:39.967,3903,Has Source,1593,"




-- =============================================
-- File Name:	Scheduler_ResourcesAll_Get.sql
-- Description:	This Stored Procedure Gets all the active resources.
-- Author:	Joseph Lee
-- Example: exec [Scheduler_ResourcesAll_Get]
-- History:	Date		Initials	Description
--			03/05/2010	JL			Created
--			03/30/2010	JL			Modified to include location id
--			05/27/2010	JD			Added logic to get default items if initial time.
-- =============================================

CREATE PROCEDURE [Sche"
dbo,GetCompanyOpenAppointmentSlots,SQL_STORED_PROCEDURE,2018-08-23 15:34:10.973,2024-11-15 07:55:39.960,2276,Has Source,55946,"CREATE PROCEDURE [dbo].[GetCompanyOpenAppointmentSlots]
-- parameters
	@begindate varchar(20),
	@enddate varchar(20),
	@companyId varchar(20),
	@duration int
AS
BEGIN
SET NOCOUNT ON;
-- declaration
DECLARE @beginDateDate DateTime = convert(date, @begindate);
DECLARE @endDateDate DateTime = convert(date,@enddate);
DECLARE @WeekStartDate DateTime;
DECLARE @WeekEndDate DateTime;
DECLARE @officeNum varchar(25);
DECLARE @tmpDateDateTime DateTime;
DECLARE @tmpDate varchar(20) = DATEADD(mi,0, @begindat"
dbo,Scheduler_ResourceExceptionsByResourceIDs_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.450,2024-11-15 07:55:39.953,3903,Has Source,1551,"
-- =============================================
-- Author:		J. Lee
-- Create date: 01/02/2010
-- Description:	Gets the exceptions by providers ids.
-- Modified		Initials	Descripton
-- 04/08/2010	MD			added exceptionRecurrenceID, recurrence_rule_data
-- 04/20/2010	JL			added pro_available_ind to return set and filter by NOT Deleted
-- 02/15/2011	JD			Added locationId to return set.
-- =============================================

CREATE PROCEDURE [Scheduler_ResourceExceptionsByResou"
dbo,Scheduler_AvailabilityByResourceIDs_Get,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.907,2024-11-15 07:55:39.940,3903,Has Source,2666,"-- =============================================
-- Author:		J. Lee
-- Create date: 12/30/2009
-- Description:	Gets the appointments by providers ids.
-- History:		Initials		Date		Description
--				JL				3/16/2010	Added filter for prb_block_method and prb_block_type.  Fixing availability not showing properly.
--				JL				04/08/2010	Added filter to get only date ranges = 0 (Normal Hours)
--				AA				11/29/2012	Added rotating weeks
-- =============================================

CREATE PROCEDURE"
dbo,Scheduler_CompanyResources_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.070,2024-11-15 07:55:39.937,3903,Has Source,805,"-- =============================================  
-- Author:  Ali  
-- Create date: 3/13/2012  
-- Description: Gets all resources of a company  
-- Modified By  Date  reason  
--  Ali    3/13/2012 Created for WebScheduler  
-- =============================================  
  
CREATE PROCEDURE [Scheduler_CompanyResources_Get]
 @companyId nvarchar(50)  
  
AS  
BEGIN  
 SET NOCOUNT ON;  
  
 SELECT DISTINCT  
  P.[Employee] AS provider_no  
  ,P.[LastName] AS provider_last_name  
  ,P.[FirstNam"
dbo,Scheduler_RotationInfo_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.387,2024-11-15 07:55:39.933,3903,Has Source,493,"

-- =============================================
-- Author:		Ali
-- Create date: 11/07/2012
-- Description:	Gets rotation info of an Employee
-- History:		Initials	Date			Description

-- =============================================
CREATE PROCEDURE [dbo].[Scheduler_RotationInfo_Get]
	(
	@employeeID int
	)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		Employee
		,RotationStartDate
		,NumberOfRotationWeeks
	FROM Employee
	
	WHERE Employee = @employeeID

	RETURN;

END
"
dbo,Scheduler_ResourceInformation_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.467,2024-11-15 07:55:39.933,3903,Has Source,1639,"    
CREATE PROCEDURE [Scheduler_ResourceInformation_Get]     
    
  @companyID varchar(20)    
AS    
    
-- =============================================    
-- File Name: Scheduler_ResourceInformation_Get.sql    
-- Description: This Stored Procedure Gets Resource Information.    
-- Author: Armando Moran    
-- Example: exec [Scheduler_ResourceInformation_Get] 1    
-- History: Date  Initials Description    
--   02/15/2010 AM   Created    
--   02/23/2010  AA   Added availabl"
dbo,Scheduler_AppointmentsOpen_Get,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.790,2024-11-15 07:55:39.893,3903,Has Source,13127,"

-- =============================================
-- Author:		B. VanHorne
-- Create date: 1/6/2009
-- Description:	Gets the open appointments for input criteria.
--------------------------------------------------------------------------------------------
-- NOTE: currently this s'proc is
-- only working for when @locationID and @resourceId are provided
--------------------------------------------------------------------------------------------
-- Example: exec dbo.Scheduler_Appointmen"
dbo,CreateUsers,SQL_STORED_PROCEDURE,2018-08-23 15:34:10.863,2024-11-15 07:55:39.870,2276,Has Source,18902,"
-- =============================================
-- Author:		Wehib Zewde
-- Create date: 11/13/2017
-- Description: Create all required users for a company Users 
-- =============================================
CREATE PROCEDURE[CreateUsers]
	@Description VARCHAR(255),
	@Password VARCHAR(128),
	@Email VARCHAR(128),	
	@Comments VARCHAR(3000),
	@CompanyID VARCHAR(20),
	@ProviderName VARCHAR(30),
	@CompanyType VARCHAR(10) = 'EPM',
	@ProviderNpi VARCHAR(100),
	@UserFirstName VARCHAR("
dbo,GetKPIEmployeeRanking,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.803,2024-11-15 07:55:39.857,3903,Has Source,1497,"---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[GetKPIEmployeeRanking]

@FromDate DateTime,
@ToDate DateTime,
@OfficeNum varchar(255),
@CategoryNum varchar(255)
AS
BEGIN
	SET NOCOUNT ON;

select  newid() as id,case when Sum(kd.quantity) is null then 0 else "
dbo,GetIDPAProviderInvoiceClaims,SQL_STORED_PROCEDURE,2014-03-10 00:08:09.173,2024-11-15 07:55:39.853,3903,Has Source,2258,"

CREATE PROCEDURE [dbo].[GetIDPAProviderInvoiceClaims]
@FromServicedate as Datetime,
@ToServiceDate as Datetime,
@CompanyID as varchar(15),
@Officenum as varchar(max),
@carrierID as varchar(25)

AS
BEGIN
	SET NOCOUNT ON;
	select id into #Officenum from dbo.GetOfficeNumber(@Officenum)
	
select NEWID() as ID,
 upper(bcd.BillingProviderName) as ProviderName
,bcd.BillingProviderNPI as ProviderNPI
,upper(bcd.BillingProviderAddress1) as ProviderAddress1,
upper(isnull(bcd.BillingProviderAddress2,'')) "
dbo,Scheduler_ResourceDetail_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.363,2024-11-15 07:55:39.853,3903,Has Source,948,"-- =============================================  
-- Author:  Joel Deister  
-- Create date: 12/14/2009  
-- Description: Gets the provider detail.  
--    Optionally accepts @locationID to narrow results to a given Location.  
-- Modified By  Date  reason  
-- Joel Deister 2/24/10  Added @userId logic  
--  Joel Deister    4/15/2010 Added allow_overbook  
--  PA    3/05/2012 Modify to work in AL  
-- AA    3/30/2012 Removed the join to AppSch_Pro_Office  
-- ==================================="
dbo,Scheduler_AllResources_Get,SQL_STORED_PROCEDURE,2019-03-25 10:53:00.420,2024-11-15 07:55:39.843,2062,Has Source,3526,"/****** Object:  StoredProcedure [dbo].[Scheduler_AllResources_Get]    Script Date: 10/5/2016 3:20:33 PM ******/
-- =============================================
-- Author:		Smruti
-- Create date: 11/28/2018
-- Description: Get all the Resources liake Active , Deactive and Unmapped.(deactivated and Unmapped those who has appointment)
-- =============================================

CREATE PROCEDURE [dbo].[Scheduler_AllResources_Get]    
 @locationID INT = NULL    
 ,@userID INT = NULL    
 ,@st"
dbo,Scheduler_ResourceDurationsByResourceIDs_Get,SQL_STORED_PROCEDURE,2014-03-10 00:09:08.040,2024-11-15 07:55:39.833,3903,Has Source,654,"
CREATE PROCEDURE [dbo].[Scheduler_ResourceDurationsByResourceIDs_Get] 	
	@resourceIDs VARCHAR(MAX)
	, @locationId int	
AS

BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT E.Employee, E.MinutesExam, M.[Day], M.[Minutes]
	FROM dbo.Employee E WITH (NOLOCK) 
	INNER JOIN OfficeEmployee oe WITH (NOLOCK) ON oe.Employee = E.Employee  
	INNER JOIN Office o WITH (NOLOCK) ON o.OfficeNum = oe.OfficeNum  
	LEFT JOIN dbo.EmployeeExamMinutes M ON M.employeeid ="
dbo,NetSaleByDoctor,SQL_STORED_PROCEDURE,2022-06-21 05:01:23.343,2024-11-15 07:55:39.827,878,Has Source,1165,"
CREATE PROCEDURE [dbo].[NetSaleByDoctor]

@fromdate datetime,
@todate  datetime,
@CompanyID varchar(20)
AS
BEGIN
SELECT     TOP (100) PERCENT newid() as ID,pt.OrderID, dbo.DateOnly(pt.TransactionDate) AS TransactionDate, ISNULL(SUM(ind.Amount), 0) - ISNULL(SUM(ind.Tax), 0) 
                      + ISNULL(SUM(iid.Receivable), 0) AS NetSale, e.LastName + ' ,' + e.FirstName AS EmployeeName,o.CompanyID
                      ,isnull(sum(ind.Price),0) as Retail,e.Employee as EmployeeID
FROM         d"
dbo,SP_ProductMovementDetails,SQL_STORED_PROCEDURE,2022-08-16 12:33:48.097,2024-11-15 07:55:39.810,822,Has Source,2819,"CREATE PROCEDURE [dbo].[SP_ProductMovementDetails]

@ShipmentID VARCHAR(MAX)
as
--GetOfficeNumber method is used to get the comma seperated shipmentId's into a temp table.
select id into #ShipmentID from dbo.GetOfficeNumber(@ShipmentID)   
select distinct convert(varchar,Row_number() over(order by sd.ID))+ '-' +  convert(varchar,s.ID) as ID 
, sd.ID as ReferenceNum, s.OfficeNum, isnull(sp.ID,0) as PickListID, sp.PickBy, Sp.Status as PickListStatus, 0 as StockOrderNum,convert(varchar,getdate(), 1"
dbo,Scheduler_ResourceRoles_Get,SQL_STORED_PROCEDURE,2014-04-09 22:35:18.423,2024-11-15 07:55:39.807,3873,Has Source,627,"-- =============================================  
-- Scheduler_ResourceRoles_Get
-- Description: Gets the provider roles
-- Modified By  Date  reason  
-- PTA			3/25/2014	SP created
-- =============================================  


CREATE PROCEDURE [dbo].[Scheduler_ResourceRoles_Get]   
 @resourceID INT = NULL  
AS  
BEGIN  
 SET NOCOUNT ON;  
  
 SELECT UR.[RoleId], E.[Employee], Roles.[Name]
	FROM UserRoles UR
		INNER JOIN Users ON Users.Id = UR.UserId
		INNER JOIN Employe"
dbo,GetPatientOrderLedgerPaymentData,SQL_STORED_PROCEDURE,2016-07-27 00:03:46.093,2024-11-15 07:55:39.763,3033,Has Source,1677,"CREATE PROCEDURE [dbo].[GetPatientOrderLedgerPaymentData]
@cutOffDate datetime,
@CompanyId varchar(20),
@orderIdList varchar(max)
AS
BEGIN

 SET NOCOUNT ON;
 
	SELECT 
		ROW_NUMBER() OVER( ORDER BY o.ordernum, pt.transactionid, ppd.amount desc ) as Row 
		, o.ordernum as OrderNum 
		, isum.invoiceid as InvoiceId 
		, offc.officenum as OfficeNum 
		, offc.officename as OfficeName 
		, e.employee as AssociateId 
		, coalesce(e.firstname, '') as AssociateFirstName 
		, coalesce(e.lastname, '') as A"
dbo,GetOpenAppointmentSlots,SQL_STORED_PROCEDURE,2021-10-06 13:45:37.920,2024-11-15 07:55:39.750,1136,Has Source,65804,"CREATE PROCEDURE [dbo].[GetOpenAppointmentSlots]
-- parameters
	@begindate varchar(20), -- = '2050-04-01',
	@enddate varchar(20), -- = '2050-04-01',
	@officeNum varchar(25), -- '999',
	@providerId int, -- = 340,
	@duration int, -- = 15
	@scheduledServiceId int, -- = 197417
	@scheduledServiceDuration int, -- = 15
	@excludenicetimes bit
as
BEGIN
SET NOCOUNT ON;

-- get just dates from the parameters
DECLARE @beginDateWithTime varchar(20) = @begindate
DECLARE @endDateWithTime varcha"
dbo,CopyResourceScheduleData,SQL_STORED_PROCEDURE,2017-09-06 00:10:10.487,2024-11-15 07:55:39.700,2627,Has Source,28880,"-- IF EXISTS ( SELECT * FROM sysobjects WHERE  id = object_id(N'[dbo].[CopyResourceScheduleData]') and OBJECTPROPERTY(id, N'IsProcedure') = 1 ) BEGIN DROP PROCEDURE [dbo].[CopyResourceScheduleData] END
CREATE PROCEDURE [dbo].[CopyResourceScheduleData]
@FromOfficeNum VARCHAR (100),
@ToOfficeNum VARCHAR (100),
@WithOverlay BIT
AS
BEGIN
	-- Internal variables BEGIN ---------------------------------------------------------------------------------
	DECLARE @totalChange int = 0;
	DECLARE @officenumber"
dbo,Scheduler_ResourceExceptions_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.410,2024-11-15 07:55:39.680,3903,Has Source,1526,"
-- =============================================
-- Author:		G. Tran
-- Create date: 2/14/2010
-- Description:	Gets the schedule exceptions for a Provider
-- 04/08/2010	MD			added exceptionRecurrenceID, recurrence_rule_data
-- =============================================

CREATE PROCEDURE [Scheduler_ResourceExceptions_Get]
	@exceptionID INT = NULL
	,@locationID INT = NULL
	,@resourceId INT = NULL
	,@start_date DATETIME = NULL
	,@end_date DATETIME = NULL
AS
BEGIN
	SET NOCOUNT ON"
dbo,Scheduler_TemplatesByDateAndResourceIDs_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.027,2024-11-15 07:55:39.667,3903,Has Source,2365,"-- =============================================
-- Author:		J. Lee
-- Create date: 04/15/2010
-- Description:	Gets the templates by date and resource Id's
-- History		Initials		Date			Description
--				JL				04/15/2010		Created
--				AA				12/03/2012		Added filter for rotation week
-- =============================================

CREATE PROCEDURE [Scheduler_TemplatesByDateAndResourceIDs_Get] 
	@resourceIDs VARCHAR(MAX)
	,@locationID INT
	,@date DATETIME = NULL
AS
BEGIN
	SET NOCOUNT ON;
	SET TR"
dbo,Scheduler_AvailableResourceExceptionsByTimeSlotCount_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.023,2024-10-29 07:55:59.470,3886,Has Source,2615,"-- =============================================
-- File Name:	Scheduler_AvailableResourceExceptionsByTimeSlotCount_Get.sql
-- Description:	This Stored Procedure gets available resource exceptions for a given time slot
-- Author:	Joseph Lee
-- History:	Date		Initials	Description
--			04/06/2010	JL			Created
--			04/07/2010	JL			Changed startTime and endTime to NVARCHAR(22) data type instead of TIME (no time in SQL 2005)
--			04/13/2010	JL			Changed start time adn end time filter
--			04/16/2010	"
dbo,SetCLStockItemID,SQL_STORED_PROCEDURE,2009-05-14 21:40:57.343,2024-10-08 07:56:51.957,5626,Has Source,2199,"
CREATE PROCEDURE [dbo].[SetCLStockItemID]
	
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @TID AS int 
    DECLARE @TSphere AS decimal (8,2)
	DECLARE @TCylinder AS decimal (8,2)
	DECLARE @TAxis AS int
	DECLARE @TAddPower1 AS decimal (8,2)
	DECLARE @TCLItemID AS int
	DECLARE @TCLPowerID AS int
	DECLARE @TCLStockItemID AS int	

	DECLARE TempCursor CURSOR FOR
	SELECT pd.[ID]
      ,pd.[Sphere]
      ,pd.[Cylinder]
      ,pd.[Axis]
      ,pd.[AddPower1]
      ,pd.[CLItemID]
      ,pd.[CL"
dbo,DeleteBillingClaimsAndRelatedDataByClaimId,SQL_STORED_PROCEDURE,2024-06-14 07:56:09.487,2024-09-18 17:18:43.110,96,Has Source,3455,"/****** Object:  StoredProcedure [dbo].[DeleteBillingClaimsAndRelatedDataByClaimId]    Script Date: 06/07/2024 ******/

-- ===================================================================================
-- Author:		Valli NR
-- Create date: 06/07/2024
-- Description:	Stored Procedure to delete claims related data based on claim id.
-- ===================================================================================

CREATE PROCEDURE [dbo].[DeleteBillingClaimsAndRelatedDataByClaimId]
	@Claim"
Era,DeleteEra,SQL_STORED_PROCEDURE,2019-06-20 13:20:27.127,2024-09-18 17:18:43.077,1917,Has Source,3535,"CREATE PROC [Era].[DeleteEra]
    @EDI835HeaderInfoID INT
AS
BEGIN
    SET NOCOUNT ON;
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
     
    BEGIN TRAN;

    BEGIN TRY

		UPDATE ERA.Files set EDI835HeaderInfoID = NULL WHERE EDI835HeaderInfoID = @EDI835HeaderInfoID
        UPDATE EDICONTROL SET EDI835HeaderInfoID = NULL WHERE EDI835HeaderInfoID = @EDI835HeaderInfoID
        DELETE EDI835ClaimPayment WHERE	EDI835ClaimInfoId IN (SELECT ID FROM EDI835ClaimInfo WHERE EDI835HeaderInfoID = @E"
dbo,DeleteBillingClaimsAndRelatedData,SQL_STORED_PROCEDURE,2023-05-18 17:57:33.473,2024-09-18 17:18:43.070,489,Has Source,19353,"/****** Object:  StoredProcedure [dbo].[DeleteBillingClaimsAndRelatedData]    Script Date: 5/9/2023 11:43:13 AM ******/

-- =============================================
-- Author:		Ravi Thakkar
-- Create date: 5/2/2023
-- Description:	Stoed Proceduer to delete claims older than specified parameter year.
-- =============================================

CREATE PROCEDURE [dbo].[DeleteBillingClaimsAndRelatedData]
	@Year int = 7,	
	@CompanyId varchar(20)
AS
	BEGIN
	-- SET NOCOUNT ON added to preven"
dbo,Scheduler_AuditLog_Appointment_Get,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.857,2024-07-02 17:21:02.393,3767,Has Source,529,"CREATE PROCEDURE [Scheduler_AuditLog_Appointment_Get]
	@AppointmentID bigint = NULL

AS
BEGIN
	SET NOCOUNT ON
	
	SELECT TOP 1000 
		AuditLogID
		,EventDate
		,UserID
		,AppointmentID
		,eventName
		,eventDescription
		,IPAddress
		,HashValue
		,OldValue
		,NewValue
		,[dbo].[GetUsername](u.Name,'_pm') AS UserName
		
	FROM 
		AppSch_AuditLog lg
	INNER JOIN 
		AppSch_Audit_EventType ev ON lg.EventTypeKey = ev.eventName
	LEFT JOIN 
		Users u ON lg.UserID = u.Id	

	WHERE 	AppointmentID = @Appointmen"
dbo,GiveUserAlSupportAccess,SQL_STORED_PROCEDURE,2018-08-23 15:34:11.050,2024-07-02 17:21:02.323,2140,Has Source,1829,"-- =============================================
-- Author:		Wehib Zewde
-- Create date: 10/11/2017
-- Description: Give User AlSupport Access
-- =============================================

CREATE PROCEDURE [dbo].[GiveUserAlSupportAccess]
	@UserId int 
AS
	BEGIN
		DECLARE @AccessOptionIdAlSupport INT = 63
		DECLARE @RoleServiceAssociate INT = 2
		DECLARE @CompanyId VARCHAR(10) = NULL
		DECLARE @CompanyRoleId INT = 0
		DECLARE @ErrorMessage VARCHAR(100)

		SELECT @CompanyId = CompanyId FROM Us"
dbo,UpdateGLDetailforPOSBillingARAdjustment,SQL_STORED_PROCEDURE,2014-03-10 00:09:08.070,2024-06-12 07:55:24.633,3747,Has Source,6462,"CREATE PROCEDURE [dbo].[UpdateGLDetailforPOSBillingARAdjustment]  
 @FirstDate as datetime,  
 @ToDate as datetime,  
 @TransFromDate as datetime,  
 @TransToDate as datetime,   
 @CloseDate as datetime,   
 @OfficeID as varchar(10),  
 @CloseIDBackoffice as int,  
 --@GLCenter as varchar(100),  
 @Month as int,  
 @Year as int,  
 @DebitGLCenter as varchar(30),  
 @CreditGLCenter as varchar(30),  
 @POSBillingARAdjustment as int  
   
  
AS  
BEGIN  
  
  
  
Declare @Credi"
dbo,GenerateBillingINSAR,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.760,2024-06-12 07:55:24.630,3747,Has Source,4583,"---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--GenerateBillingINSAR '10/1/2013','11/1/2013','10/7/2013','11/7/2013','9/30/2013','BRD','brd-01'
------------------------------------------------------------------------------------------------------------------------------------------------"
dbo,FlashSalesInsurance,SQL_STORED_PROCEDURE,2013-02-20 00:00:57.453,2024-06-12 07:55:24.623,4130,Has Source,5458,"
CREATE PROCEDURE [dbo].[FlashSalesInsurance]
@FromDate1 varchar(20),
@ToDate1 varchar(20),
@CompanyID Varchar(20)
AS
BEGIN
	SET NOCOUNT ON;
declare @iCnt as int
select @iCnt=count(*)  from sysobjects where xtype='U' and name = '#V_InvoiceDetailInsuranceorCash'
if(@iCnt <>0) 
Begin
drop table #V_InvoiceDetailInsuranceorCash
end

select @iCnt=count(*)  from sysobjects where xtype='U' and name = '#BillingTransaction'
if(@iCnt <>0) 
Begin
drop table #BillingTransaction
end


"
dbo,GenerateBillingARWithCloseID,SQL_STORED_PROCEDURE,2011-06-21 15:35:27.453,2024-06-12 07:55:24.620,4740,Has Source,2759,"
CREATE PROCEDURE [dbo].[GenerateBillingARWithCloseID]
 @FromSerivceDate as datetime,
 @ToServiceDate as datetime,
 @FromTransDate as datetime,
 @ToTransDate as datetime,
 @LastDepositDate as datetime,
 @CompanyID as varchar(10),
 @Officenum as varchar(max),
 @CurrentCloseID as int,
 @PreviousCloseID as int
 AS
BEGIN
	SET NOCOUNT ON;
	
 select Officenum,dbo.GetAgingBYDateandCloseID(@FromTransDate ,Officenum,@LastDepositDate,@CompanyID,@PreviousCloseID) as BeginingAR,sum(Billed) as"
dbo,GetPOSReceivablesSummary,SQL_STORED_PROCEDURE,2014-03-10 00:08:58.090,2024-06-12 07:55:24.613,3747,Has Source,1839,"



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[GetPOSReceivablesSummary]
@fromdate datetime,
@todate datetime,
@CompanyID varchar(20),
@CarrierCode varchar(20),
@OfficeNum as varchar(max),
@IsPrepaidCarrier as BIT

AS
BEGIN
	SET NOCOUNT ON;

if ("
dbo,GetPOSReceivables,SQL_STORED_PROCEDURE,2014-03-10 00:08:09.203,2024-06-12 07:55:24.610,3747,Has Source,1186,"


Create PROCEDURE [dbo].[GetPOSReceivables]
@fromdate datetime,
@todate datetime,
@CompanyID varchar(20),
@CarrierCode varchar(20),
@OfficeNum as varchar(max),
@IsPrepaidCarrier as BIT

AS
BEGIN
	SET NOCOUNT ON;



	select 
newid() as id ,VP.OfficeNum,
 sum(vp.Receivable) as Receivable , isnull(vp.InsCarrierCode,'') as InsCarrierCode ,vp.OrderID,vp.InsPlanID as InsPlanID,
vp.CarrierName,vp.PlanName,0 as NetReceivable,vp.PatientName,vp.OrderDate as ServiceDate ,vp.OfficeName"
dbo,GetBilledClaimsStatistic,SQL_STORED_PROCEDURE,2009-07-16 17:43:52.287,2024-06-12 07:55:24.590,5445,Has Source,1757,"CREATE PROCEDURE [dbo].[GetBilledClaimsStatistic]
@DateFrom varchar(20),
@DateTo varchar(20),
@CarrierID varchar(20),
@CompanyID varchar(20),
@OfficeNumberList varchar(max)
AS
BEGIN
	SET NOCOUNT ON;
DECLARE @OfficeTable AS TABLE(
OfficeNum varchar(20)
)
IF (@OfficeNumberList IS NULL OR @OfficeNumberList  = '')
BEGIN
	INSERT INTO @OfficeTable 
		SELECT OfficeNum FROM dbo.Office 
		WHERE CompanyID = @CompanyID AND IsLiveOffice = 1 AND IsRetail = 1;
END
ELSE
BEGIN
	INSERT INTO @"
dbo,GetBilledClaimsStatisticAll,SQL_STORED_PROCEDURE,2009-07-16 17:43:52.300,2024-06-12 07:55:24.587,5445,Has Source,760,"create PROCEDURE [dbo].[GetBilledClaimsStatisticAll]
@CarrierID varchar(20)
AS
BEGIN
	SET NOCOUNT ON;
SELECT     CarrierId, CarrierName,
 (SELECT     COUNT(*) AS Expr1 FROM dbo.V_BillingClaims AS v1 WHERE (CarrierId = v.CarrierId) and v1.CarrierID like @CarrierID) AS TotalCount,
 (SELECT     COUNT(*) AS Expr1 FROM dbo.V_BillingClaims AS v1 WHERE (CarrierId = v.CarrierId) AND (ReadytoBill = 0) and BillingDate is not null and v1.CarrierID like @CarrierID) AS BilledClaims,
 (SELECT     COUN"
dbo,GetCarrierList,SQL_STORED_PROCEDURE,2008-06-10 11:26:17.340,2024-06-12 07:55:24.530,5846,Has Source,448,"-- =============================================
-- Author:		Anthony Lazar
-- Create date: June 10, 2008
-- Description:	Retrieves a list of carriers
--				from a prefix string.
-- =============================================
CREATE PROCEDURE [dbo].[GetCarrierList]
	@NameStartsWith as varchar(50)
	
AS

SELECT CarrierName as 'CarrierName'
FROM InsCarrier
WHERE CarrierName LIKE (@NameStartsWith + '%')
ORDER BY CarrierName




"
dbo,Scheduler_InsuranceRemindersAppointmentCount_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.533,2024-06-12 07:55:24.503,3747,Has Source,1727,"-- =============================================
-- Description:	Retrieves count of appointments for the insurance, resource, location, between start and end dates.
-- Author:		Milenko Djuricin
-- History:		Date		Initials	Description
--				05/04/2010	MD			Created
--              03/25/2022  KD          VNXT-10063
--              03/30/2022  KD          VNXT-10064
-- =============================================
CREATE PROCEDURE [Scheduler_InsuranceRemindersAppointmentCount_Get]
	@ins_no [int],
	"
Era,MatchClaims,SQL_STORED_PROCEDURE,2020-04-17 23:42:28.593,2024-06-12 07:55:24.487,1517,Has Source,15111,"CREATE PROC [Era].[MatchClaims]
    @EDI835HeaderInfoID INT
AS
BEGIN
    SET NOCOUNT ON;

    -- Part of this sproc logic updates the procedure code
    -- descriptions of the ERA Service items based on procedure
    -- codes defined in the database. Using the same 4 places
    -- these code/descriptions can live then falling back to
    -- using the code as the description

    IF OBJECT_ID('tempdb..#ProcedureCodes') IS NOT NULL
        DROP TABLE #ProcedureCodes;

    CREATE TABLE #ProcedureCo"
dbo,SP_CopySchedulefromExitingSchedule,SQL_STORED_PROCEDURE,2011-12-28 22:43:13.733,2024-06-12 07:55:24.477,4550,Has Source,5534,"
-- =============================================
-- Author:		Digesh Sahu
-- =============================================

CREATE PROCEDURE [dbo].[SP_CopySchedulefromExitingSchedule]
  
@fromCompanyID varchar(20),
@toCompanyID varchar(20),
@fromPlanID int,
@toPlanID int,
@userid int, ---modified by  
@fromVersionID int,
@toVersionID int,
@itemTypes varchar(200),
@EntityType varchar(10),
@NoteType varchar(10),
@startDate datetime = null,
@endDate datetime = null 

AS
BEGIN

	-- SET NOCOUNT ON ad"
dbo,GetBillingTransactionwithGLAccount,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.770,2024-06-12 07:55:24.467,3747,Has Source,13540,"    
    
--select * from monthclosecontrol where sourceid = 3 and year = 2016    
    
-- exec sp_executesql N'exec dbo.GetBillingTransactionwithGLAccount @p0,@p1,@p2,@p3,@p4,@p5,@p6,@p7',N'@p0 datetime,@p1 datetime,@p2 datetime,@p3 datetime,@p4 nvarchar(4000),@p5 nvarchar(4000),@p6 nvarchar(4000),@p7 bit',@p0='2016-12-01 00:00:00',@p1='201
--7-01-01 00:00:00',@p2='2016-12-08 00:00:00',@p3='2017-01-11 00:00:00',@p4=N'03',@p5=N'SVS',@p6=N'390',  
-- @p7=0  
--go   
    
--exec dbo.GetBillingTran"
dbo,Scheduler_PatientInsurance_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.907,2024-06-12 07:55:24.317,3747,Has Source,785,"

-- =============================================
-- Author:		B. VanHorne
-- Create date: 1/4/2010
-- Description:	Gets the insurance for a patient.
-- =============================================

CREATE PROCEDURE [Scheduler_PatientInsurance_Get] 
	@patient_no INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		P.[id]
		,C.schedulercarrierid as insurance_no
		,C.carriername as insurance_name
		,H.grouphealthtype as insurance_type
	FROM
		dbo.patientinsurance P WITH (NOLOCK)
		INNER "
dbo,CompareARGB119,SQL_STORED_PROCEDURE,2017-04-13 00:40:54.683,2024-06-12 07:55:24.280,2617,Has Source,9682,"CREATE proc [dbo].[CompareARGB119]
(
@OfficeNumber varchar(20),
@CompanyID varchar(20),
@FromSerivceDate as datetime, 
@ToServiceDate as datetime
--='01'
)
--RETURNS Decimal(18,2)
AS
BEGIN

Declare @FromTransDate as datetime, --='2016-11-01 00:00:00',
@ToTransDate as datetime,
@CloseID as int

set @FromTransDate = (select ClosedDate from MonthCloseControl where [Month]=Month(DATEADD(d,-3,@FromSerivceDate)) and [Year]=Year(dateadd(d,-3,@FromSerivceDate)) and SourceID=3 and [status]=2 and CompanyI"
dbo,CopyInsSchedule,SQL_STORED_PROCEDURE,2020-04-17 23:42:28.560,2024-06-12 07:55:24.270,1517,Has Source,20547,"CREATE PROCEDURE [dbo].[CopyInsSchedule] @FromCompanyID VARCHAR(20), 
                                            @ToCompanyID   VARCHAR(20), 
                                            @FromOfficeNum VARCHAR(20), 
                                            @ToOfficeNum   VARCHAR(20),
											@CopyDefaultVersion bit = 0,
                                            @UserID INT = 29
AS 
  BEGIN 
      DECLARE @ItemType INT 
      DECLARE @TargetVersionID AS INT 

      SET @TargetVersionID = "
dbo,GetBillingReceivables,SQL_STORED_PROCEDURE,2010-04-09 11:54:46.797,2024-06-12 07:55:24.250,5178,Has Source,3148,"

CREATE PROCEDURE [dbo].[GetBillingReceivables]
@fromdate datetime,
@todate datetime,
@CompanyID varchar(20),
@CarrierCode varchar(20),
@OfficeNum as varchar(max),
@IsPrepaidCarrier as BIT

AS
BEGIN
	SET NOCOUNT ON;

declare @iCnt as int
select @iCnt=count(*)  from sysobjects where xtype='U' and name = 'V_BillingOrderFirstReceivable1'
if(@iCnt <>0) 
Begin
drop table V_BillingOrderFirstReceivable1
end


	
select 
bcd.OfficeNum+ '-'+ cast(bt.orderid as Varchar(10)) + '-' +"
dbo,GetBillingSnapshotData,SQL_STORED_PROCEDURE,2020-04-17 23:42:28.567,2024-06-12 07:55:24.210,1517,Has Source,3459,"CREATE PROCEDURE [dbo].[GetBillingSnapshotData]
	@Date DateTime,
	@OfficeNum Varchar(8)
AS
BEGIN
	
		DECLARE @Billingclaimdata table(ClaimId int  ,OfficeNum varchar(8) , PatientFirstName varchar(50) ,PatientLastName varchar(50) ,IsCurrent bit, PRIMARY KEY CLUSTERED (ClaimId))
	    INSERT INTO @Billingclaimdata SELECT bc.ClaimId, bc.OfficeNum, bc.PatientFirstName, bc.PatientLastName, bc.IsCurrent FROM Billingclaimdata BC WHERE bc.OfficeNum = @OfficeNum AND bc.iscurrent = 1

		SELECT
			bt.TransId"
dbo,Scheduler_Insurance_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.410,2024-06-12 07:55:24.193,3747,Has Source,582,"

-- =============================================
-- Author:		Joel Deister
-- Create date: 11/29/2010
-- Description:	Gets an insurance info.
-- =============================================

CREATE PROCEDURE [Scheduler_Insurance_Get]
	(
	@insuranceId int
	)	
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT 
		I.carriername as insuranceName
		,H.grouphealthtype as insuranceType 
	FROM inscarrier I WITH (NOLOCK)
	LEFT OUTER JOIN inshcfa H"
dbo,Scheduler_InsuranceLookup_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.423,2024-06-12 07:55:24.190,3747,Has Source,510,"

-- =============================================
-- Author:		Joel Deister
-- Create date: 02/27/2010
-- Description:	Gets all insurances for listbox.
-- =============================================

CREATE PROCEDURE [Scheduler_InsuranceLookup_Get]
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT 
		I.schedulercarrierid as insuranceId
		,I.carriername as insuranceName 
	FROM dbo.inscarrier I WITH (NOLOCK)
	ORDER BY I.carriername
	RETURN;"
dbo,Scheduler_InsurancePlans_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.453,2024-06-12 07:55:24.187,3747,Has Source,676,"

-- =============================================
-- Author:		Joel Deister
-- Create date: 11/24/2010
-- Description:	Gets the plans for an insurance.
-- =============================================

CREATE PROCEDURE [Scheduler_InsurancePlans_Get]
	(
	@insuranceId int
	)	
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT 
		p.id as planId
		,p.planname as planName
	FROM insplan as p WITH (NOLOCK)
	INNER JOIN inscarrier as c on p.carrierc"
dbo,GetCarrierData,SQL_STORED_PROCEDURE,2008-06-10 11:34:35.787,2024-06-12 07:55:24.180,5846,Has Source,519,"-- =============================================
-- Author:		Anthony Lazar
-- Create date: June 10, 2008
-- Description:	Returns information about a carrier
-- =============================================
CREATE PROCEDURE [dbo].[GetCarrierData]
	@CarrierName as varchar(100)
AS

	SELECT	isnull(InsCarrier.ID,'') as 'CarrierCode', 
			isnull(CarrierName,'') as 'CarrierName',
			isnull(City,'') as 'City'
	FROM	Address, InsCarrier
	WHERE	CarrierName = @CarrierName AND Address.ID = InsCa"
Era,CreateTestEraRemits,SQL_STORED_PROCEDURE,2019-06-20 13:20:27.200,2024-06-12 07:55:24.140,1819,Has Source,30803,"CREATE PROCEDURE [Era].[CreateTestEraRemits]
	@CompanyID VARCHAR(50),
	@CarrierID VARCHAR(50),
	@ClaimsInRemittance INT,
	@PerfectMatches INT	
AS
BEGIN
    DECLARE @Continue BIT = 1;
    DECLARE @Message VARCHAR(200) = NULL;

    SELECT @PerfectMatches = FLOOR(@ClaimsInRemittance * 0.8)
    
    -- A non-0 amount will make the remittance payment amount
    -- to not match the sum of the claim payments, forcing
    -- a remittance adjustment in order to post. *NOTE* If
    -- the sum of the claim"
dbo,GetBillingFirstReceivables,SQL_STORED_PROCEDURE,2010-01-29 21:48:05.947,2024-06-12 07:55:24.117,5248,Has Source,2345,"
create PROCEDURE [dbo].[GetBillingFirstReceivables]
@fromdate datetime,
@todate datetime,
@CompanyID varchar(20),
@CarrierCode varchar(20),
@OfficeNum as varchar(20),
@IsPrepaidCarrier as BIT

AS
BEGIN
	SET NOCOUNT ON;

select 
bcd.OfficeNum+ '-'+ cast(bt.orderid as Varchar(10)) + '-' +bcd.CarrierID as ID,
bcd.Officenum,bcd.CarrierName,bcd.CarrierID,bt.orderid as OrderNum,bc.servicedate--,bc.Claimid
,bcd.PatientLastname + ' ,' + bcd.PatientFirstName as PatientName,
 sum(case wh"
dbo,Sp_InsuranceBillingClaimTransaction,SQL_STORED_PROCEDURE,2009-08-25 11:00:00.560,2024-06-12 07:55:24.113,5405,Has Source,3744,"create PROCEDURE [dbo].[Sp_InsuranceBillingClaimTransaction]

@cutOffDate datetime,
@CarrierId varchar(30),
@PlanId varchar(30),
@OfficeNumber varchar(30),
@PatientId varchar(30),
@DepositDate datetime
AS
BEGIN
	SET NOCOUNT ON;
if (@CarrierID is null)
Begin
	set @CarrierID = ''
end
if (@PlanId is null)
Begin
	set @PlanId = ''
end
if (@OfficeNumber is null)
Begin
	set @OfficeNumber = ''
end
if (@PatientId is null)
Begin
	set @PatientId = ''
end



select 
	1 as Acco"
dbo,CopySchedulefromExitingSchedule,SQL_STORED_PROCEDURE,2009-12-23 12:45:15.450,2024-06-12 07:55:24.110,5285,Has Source,4560,"
CREATE PROCEDURE [dbo].[CopySchedulefromExitingSchedule]
 @SourceCompanyID as varchar(20),
 @TargetCompanyID as varchar(20),
 @SourcePlanId as int,
 @TargetPlanId as int,
 @SourceVersionID as int,
 @TargetVersionID as int
 
AS
BEGIN
	--
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @oldScheduleID AS int
    DECLARE @newScheduleID AS int
    --DECLARE @planID AS int

    DECLARE @itemNumold AS "
dbo,SP_InsuranceSalesSummaryByOfficeByCarrier_V2,SQL_STORED_PROCEDURE,2015-06-30 23:21:03.993,2024-06-12 07:55:24.093,3270,Has Source,8923,"CREATE PROCEDURE [dbo].[SP_InsuranceSalesSummaryByOfficeByCarrier_V2] @FromDate1 DATE
	,@ToDate1 DATE
	,@OfficeNum VARCHAR(max)
	,@carrierId AS VARCHAR(50)
	,@planId AS INT
	,@monthCloseID AS INT = 0
AS
BEGIN
	SET NOCOUNT ON;
	-------------------
	-- PRECONDITIONS --
	-------------------
	DECLARE @toDate DATE
		,@fromDate DATE
	SET @fromDate = @FromDate1
	SET @toDate = dateadd(day, 1, @ToDate1)
	DECLARE @officeIds TABLE (Id VARCHAR(50) PRIMARY KEY)
	INSERT INTO @officeIds
	SELECT Id
	FROM dbo.Ge"
dbo,SaveYourCostBulkFrameSetup,SQL_STORED_PROCEDURE,2014-12-17 23:08:36.777,2024-05-21 08:13:31.427,3443,Has Source,5919,"CREATE PROCEDURE [dbo].[SaveYourCostBulkFrameSetup]
    @companyId VARCHAR(20),
    @onlyPriceActive INT,
    @changeTypeValue DECIMAL(18, 2),
    @changeTypePercentage INT,
    @dollarAmountValue DECIMAL(18, 2),
    @dollarAdd INT,
    @endIn VARCHAR(100),
    @selectedCollections VARCHAR(MAX)
AS
BEGIN
    DECLARE @tranname VARCHAR(20);
    SELECT @tranname = 'SaveYourCostBFSTransaction';

    SET NOCOUNT ON;

    IF (@onlyPriceActive = 0)
    BEGIN
        --activate frame collection			
      "
dbo,Lookups_EGLenses,SQL_STORED_PROCEDURE,2021-09-13 14:33:01.297,2024-05-21 08:13:31.420,981,Has Source,6442,"/****** Object:  StoredProcedure [dbo].[Lookups_EGLenses]    Script Date: 4/27/2021 10:14:30 AM ******/
-- =============================================
-- Author:		<Author,,Victor Samson>
-- Create date: <Create Date,,04/12/2021>
-- Description:	<Description,,Eyeglass Lenses Lookup>
-- =============================================
CREATE PROCEDURE [dbo].[Lookups_EGLenses]	
	@SearchString varchar(1000),
	@LensTypes varchar(max),
	@Materials varchar(max),
	@Styles varchar(max),
	@Colors varchar(m"
dbo,GetYourCostBulkFrameSetup,SQL_STORED_PROCEDURE,2014-12-17 23:08:36.750,2024-05-21 08:13:31.417,3443,Has Source,4624,"CREATE PROCEDURE [dbo].[GetYourCostBulkFrameSetup]
    @companyId VARCHAR(20),
    @onlyPriceActive INT,
    @changeTypeValue DECIMAL(18, 2),
    @changeTypePercentage INT,
    @dollarAmountValue DECIMAL(18, 2),
    @dollarAdd INT,
    @endIn VARCHAR(100),
    @selectedCollections VARCHAR(MAX),
    @startIndex INT = 0,
    @pageSize INT = 10,
    @sortCol VARCHAR(50) = NULL,
    @sortDirect VARCHAR(4) = NULL
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @sqlstmt VARCHAR(1000) = NULL;
    SET ROWCOUN"
dbo,GetWholeSalePriceBulkFrameSetup,SQL_STORED_PROCEDURE,2014-12-17 23:08:36.743,2024-05-21 08:13:31.413,3443,Has Source,4708,"CREATE PROCEDURE [dbo].[GetWholeSalePriceBulkFrameSetup]
    @companyId VARCHAR(20),
    @onlyPriceActive INT,
    @changeTypeValue DECIMAL(18, 2),
    @changeTypePercentage INT,
    @dollarAmountValue DECIMAL(18, 2),
    @dollarAdd INT,
    @endIn VARCHAR(100),
    @selectedCollections VARCHAR(MAX),
    @startIndex INT = 0,
    @pageSize INT = 10,
    @sortCol VARCHAR(50) = NULL,
    @sortDirect VARCHAR(4) = NULL
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @sqlstmt VARCHAR(1000) = NULL;
    SET R"
dbo,GetLastExamRecallReport,SQL_STORED_PROCEDURE,2016-10-26 00:03:32.900,2024-05-21 08:13:31.410,2764,Has Source,6765,"CREATE PROCEDURE [dbo].[GetLastExamRecallReport]
    @RecallId         int,
	@ItemType         int,
	@OrderType        varchar(max),
	@CarrierList      varchar(max)
AS
BEGIN
	SET NOCOUNT ON

    Declare @SqlQuery AS varchar(max)
	Declare @SqlCondition varchar(max) = '';
	Declare @SQLConditionSchedule varchar(max) = '';
	Declare @SqlBatchSchedule AS varchar(max)
	Declare @SqlRecallType AS Int
	
	SET @SqlRecallType = (select r.type from recall r where id = @RecallId)	

  if(@SqlRecallType = 1)
  S"
dbo,GetExistingPriceBulkFrameSetup,SQL_STORED_PROCEDURE,2014-12-17 23:08:36.733,2024-05-21 08:13:31.407,3443,Has Source,4607,"CREATE PROCEDURE [dbo].[GetExistingPriceBulkFrameSetup]
    @companyId VARCHAR(20),
    @onlyPriceActive INT,
    @changeTypeValue DECIMAL(18, 2),
    @changeTypePercentage INT,
    @dollarAmountValue DECIMAL(18, 2),
    @dollarAdd INT,
    @endIn VARCHAR(100),
    @selectedCollections VARCHAR(MAX),
    @startIndex INT = 0,
    @pageSize INT = 10,
    @sortCol VARCHAR(50) = NULL,
    @sortDirect VARCHAR(4) = NULL
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @sqlstmt VARCHAR(1000) = NULL;
    SET RO"
dbo,FrameSearch_Get,SQL_STORED_PROCEDURE,2015-03-10 22:44:18.947,2024-05-21 08:13:31.400,3360,Has Source,6008,"-- =============================================
-- Author:		<Author,,Ankur Patel>
-- Create date: <Create Date,,02/18/2015>
-- Description:	<Description,,Get Frame Search Data>
-- =============================================
--exec FrameSearch_Get '936','936','MYICM',NULL,NULL
--exec FrameSearch_Get_Old '936','936','NIKE%1000%',NULL,NULL
--exec FrameSearch_Get '936','936','NIKE%1000%',NULL,NULL
--exec FrameSearch_Get '936','936','NIKE%1000%',NULL,1

/*History:
10/23/19 - Amish - Updated stored"
dbo,FrameSearch_ByManufacturerCollectionModel_Get,SQL_STORED_PROCEDURE,2018-12-20 11:58:24.640,2024-05-21 08:13:31.397,1979,Has Source,3938,"--exec [FrameSearch_ByManufacturerCollectionModel_Get] 77,177,0,'936','936',1,1
--exec [FrameSearch_ByManufacturerCollectionModel_Get_New] 77,177,0,'936','936',1,1
--exec [FrameSearch_ByManufacturerCollectionModel_Get] 77,177,35733,'936','936',1,1

--exec [FrameSearch_ByManufacturerCollectionModel_Get] 77,30,89182,'00000072','8570',1,1
--exec [FrameSearch_ByManufacturerCollectionModel_Get_New] 77,30,89182,'00000072','8570',1,1
CREATE PROCEDURE [dbo].[FrameSearch_ByManufacturerCollectionModel_Get"
dbo,GetIDPALabOrders,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.297,2024-05-16 08:11:06.373,3720,Has Source,9014,"


CREATE PROCEDURE [dbo].[GetIDPALabOrders]
@FromServiceDate as varchar(15),
@ToServiceDate as varchar(15),
@CarrierId as varchar(30),
@OfficeNum as varchar(max),
@CompanyID as varchar(30)
AS
BEGIN
	SET NOCOUNT ON;
	
	select id 
	into #Officenum 
	from dbo.GetOfficeNumber(@officeNum)

	select MAX(ClaimID) AS MaxClaimID
	into #MaxClaimBillingClaimOrders
	from BillingClaimOrders 
	group by OrderNum having COUNT(*)>1


SELECT	newID() as ID,
		bcd.BillingProviderName as ProviderName, isnull(bcd.Bil"
dbo,GetUnbilledBalanceAging,SQL_STORED_PROCEDURE,2010-03-31 15:34:17.553,2024-04-26 16:34:44.570,5140,Has Source,2747,"CREATE PROCEDURE [dbo].[GetUnbilledBalanceAging]
@toservicedate as datetime,
@todate as datetime,
@Companyid as varchar(10)

AS
BEGIN

	          select
	         NEWID() as ID,
	     	 bcd.CarrierName as CarrierName
	           , bcd.CarrierId as CarrierId
	           ,0 as BegingUnBilled
               , sum(bt.INSAR) as CurrentUnbilled
            ,bcd.OfficeNum as OfficeNum
            ,o.OfficeName as OfficeName
            
           from BillingTransaction bt
          "
dbo,GetFunctionalMetrics,SQL_STORED_PROCEDURE,2016-03-09 00:02:23.893,2024-04-26 16:34:44.557,2970,Has Source,7234,"CREATE PROCEDURE [dbo].[GetFunctionalMetrics]
	@dateFrom datetime,
	@dateTo datetime
AS
BEGIN
	
	select * from (  
        select 'Number of Orders' Name, count(distinct o.ordernum) Value from orders o where orderdate > convert(date, @dateFrom) and orderdate < convert(date, @dateTo + 1)
                        
        union
                        
        select 'Number of Claims' Name, count(distinct b.ClaimId) Value from BillingClaim b where claimdate > convert(date, @dateFrom) and claimdate"
dbo,GB_RecordDailySummary,SQL_STORED_PROCEDURE,2008-09-19 09:37:05.023,2024-04-26 16:34:44.480,5698,Has Source,10948,"


CREATE procedure [dbo].[GB_RecordDailySummary]
as

declare @startdate smalldatetime
select @startdate = max(AsOf) from dbo.GB_DailySummary

insert into dbo.GB_DailySummary (
	DateType
	, Date
	, CarrierId
	, PlanId
	, OfficeNumber
	, PatientId
	, GrossRetail
	, RetailDiscounts
	, NetRetail
	, Allowances
	, InsuranceDiscounts
	, Charges
	, PatientCopays
	, NetInsuranceReceivables
	, NetPatientResponsibility
	, InsurancePayments
	, InsurancePaymentRefunds
	, BillingAd"
dbo,DeleteBillingClaimsWithoutWorkflow,SQL_STORED_PROCEDURE,2013-02-20 00:00:56.043,2024-04-26 16:34:44.400,4083,Has Source,1463,"CREATE PROCEDURE DeleteBillingClaimsWithoutWorkflow

AS
BEGIN
	SET NOCOUNT ON;
declare @claimid as int
declare @orderid as int
set @claimid = ''
set @orderid = ''            
 DECLARE ClaimCursor CURSOR FOR  
 
select distinct b.ClaimId as claimid,b.ordernum as orderid from BillingClaimLineItem b inner join Orders o on b.OrderNum =o.OrderNum
where WorkflowInstanceId =0

OPEN ClaimCursor   
FETCH NEXT FROM ClaimCursor INTO @claimid,   @orderid
WHILE @@FETCH_STATUS = 0   
BEGIN   "
dbo,GetOnHoldClaimsForCutoffDate,SQL_STORED_PROCEDURE,2017-04-13 00:40:54.713,2024-04-26 16:34:44.387,2570,Has Source,4031,"-- Note! ANSI NULLS must be on for this procedure. In DACPAC this is a file property.

CREATE PROCEDURE [dbo].[GetOnHoldClaimsForCutoffDate]
   @cutOffDate   DATETIME,  
    @FromServiceDate DATETIME,  
    @ToServiceDate  DATETIME,      
    @FromTransDate DATETIME,  
    @ToTransDate DATETIME,     
    @CompanyID    VARCHAR(20),  
    @OfficeNumber VARCHAR(MAX),  
    @CarrierId    VARCHAR(50)  
AS  
BEGIN 
      
    IF (@CarrierId IS NULL)  
    BEGIN  
        SET @CarrierId = '';  
    END"
dbo,GetInsuranceBillingClaimTransactions,SQL_STORED_PROCEDURE,2015-05-05 22:49:42.847,2024-04-26 16:34:44.373,3279,Has Source,3140,"CREATE PROCEDURE [dbo].[GetInsuranceBillingClaimTransactions]
	@fromServ date
	, @toServ date
	, @fromBill date
	, @toBill date
	, @carrierId varchar(50) = null
	, @planId int = null
	, @companyId varchar(20) = ''
	, @officeNumber varchar(8) = null
AS

-- since we are now dealing with dates, in order to grab all the dates
-- for the entire last day, add 1 day to the @to___ vars.
set @toServ = dateadd(d, 1, @toServ)
set @toBill = dateadd(d, 1, @toBill)
;with ClaimBillingDate
as(
	select distinct "
dbo,GetUnbilledAging,SQL_STORED_PROCEDURE,2010-03-30 17:02:53.380,2024-04-26 16:34:44.367,5141,Has Source,4861,"CREATE PROCEDURE [dbo].[GetUnbilledAging]
@toservicedate as datetime,
@todate as datetime,
@Companyid as varchar(10)
AS
BEGIN

	
	          select
	          '1' as AccountId
	, '1' as AccountTypeId
	, '1' as GLReceivableId
	, '1' as GLPaybleId
	,bc.PatientID as PatientId
    , '01/01/2001' as BalanceDate
    , '01/01/2001'  as ClaimDate
    , '01/01/2001' as BillingDate
	, bcd.CarrierName as CarrierName
    , bcd.PlanId as PlanId
	           , bcd.CarrierId as CarrierId
	   "
Era,SetIsReadyToPostIsExternalClaim,SQL_STORED_PROCEDURE,2020-04-17 23:42:28.597,2024-04-26 16:34:44.360,1470,Has Source,1508,"CREATE PROC [Era].[SetIsReadyToPostIsExternalClaim]
    @EDI835HeaderInfoID INT
AS
BEGIN
    SET NOCOUNT ON;

    -- Mark all the claims that have same payment amount as Insurance Receivables as Ready To Post
    WITH ClaimReceivables AS
    (
        SELECT  ci.ID AS EDI835ClaimInfoID,
                SUM(car.InsAR) AS OutstandingReceivables
        FROM    EDI835ClaimInfo ci
        JOIN    BillingClaim bc 
		ON      bc.Claimid = ci.ClaimId
        AND     bc.ExternalClaimNum IS NULL
        J"
dbo,ConvertOfficesToEncompass,SQL_STORED_PROCEDURE,2024-04-16 08:11:29.537,2024-04-16 08:11:29.537,0,Has Source,1719,"--Convert existing locations to Encompass by adding feature flags
CREATE PROCEDURE [dbo].[ConvertOfficesToEncompass]
	@OfficeNums VARCHAR(MAX) = NULL
	AS	
	BEGIN
	CREATE TABLE #OfficeNumTable
	(		
	  OfficeNum varchar(max)
	);	
	 
	INSERT INTO #OfficeNumTable
	select ID from dbo.GetOfficeNumber(@OfficeNums)
	
	--Check if  Encompass feature flag already exists for the office
    ;WITH cteEncompass as (select officenum as OfficeId from #OfficeNumTable where OfficeNum not in (select ContextKey from"
dbo,ResetVisionStarMissedOrder,SQL_STORED_PROCEDURE,2009-10-21 22:11:33.080,2024-03-29 08:10:29.383,5273,Has Source,1607,"-- =============================================
-- Author:		Anthony Lazar
-- Create date: June 10, 2008
-- Description:	Returns information about a carrier
-- =============================================
CREATE PROCEDURE [dbo].[ResetVisionStarMissedOrder]
	
AS

UPDATE orders set orders.statuscode = 'RP' 
from orders 
where orders.ordernum in 
    (SELECT     dbo.VisionStarOrderSent.OrderNum
		FROM         dbo.VisionStarOrderSent INNER JOIN
				     dbo.Orders ON dbo.VisionStarOrd"
WorkQueues,WorkFlowPurge,SQL_STORED_PROCEDURE,2014-03-10 00:08:58.277,2024-03-25 16:42:52.327,3668,Has Source,2752,"
-- =============================================
-- Author:		Sam Callejo and Kris Jornlin
-- Create date: 01/30/2013
-- Description:	Gets only providers for listbox.
-- =============================================

CREATE PROCEDURE [WorkQueues].[WorkFlowPurge]  
	@ProcessDate datetime,
	@ProcessToPurge varchar(50)
AS  
BEGIN  
	 
	 declare @ErrorCode int
	 
	 BEGIN TRY 
		BEGIN TRANSACTION
		 
	 	 declare @WFDataType int
		 if (@ProcessToPurge = 'claims')
		 begin
			set @"
dbo,GetPOSAR,SQL_STORED_PROCEDURE,2014-11-18 23:37:07.323,2024-03-25 16:42:52.310,3415,Has Source,4751,"CREATE Procedure [dbo].[GetPOSAR]
 @FromTransDate as datetime,
 @ToTransDate as datetime,
  @CompanyID as varchar(10),  
 @OfficeNums as varchar(max),
@IncludeOldSystemCredit as bit
 
As
Begin
select ID
into #OfficeNumList
from dbo.GetStringintable(@OfficeNums)
inner join Office ot on ot.OfficeNum = ID
order by ID

select PaymentOfficeNum,OriginalOfficeNum,sum(paymentAmount) PaymentAmount,convert(date,TransactionDate) TransactionDate
into #DifferentPaymentOffice
 from [V_PosPaymentDifferentLocat"
dbo,LoadInventoryPhysicalFile,SQL_STORED_PROCEDURE,2010-02-02 09:22:32.197,2024-03-25 16:42:52.277,5165,Has Source,962,"


CREATE PROCEDURE [dbo].[LoadInventoryPhysicalFile]
	
AS
BEGIN
	SET NOCOUNT ON;	
	
	DECLARE @OfficeNum AS varchar(8)
	
	DECLARE TempCursor CURSOR FOR
	
	Select OfficeNum from office where OfficeNum = '302'-- isLiveOffice = 1  and OfficeNum <> '342' or officeNum ='999'
	
	OPEN TempCursor

	FETCH NEXT FROM TempCursor INTO
	@OfficeNum
	
	WHILE @@FETCH_STATUS = 0
		BEGIN
		
			INSERT INTO [dbo].[InventoryBalance]
			   ([OfficeNum]
			   ,[ItemID]
			   ,[OnHand]
			   ,"
dbo,MarkVisionStarCancelOrderReadyToBeSent,SQL_STORED_PROCEDURE,2008-08-30 11:41:49.930,2024-03-25 16:42:52.273,5686,Has Source,921,"
CREATE PROCEDURE [dbo].[MarkVisionStarCancelOrderReadyToBeSent] 
	@XifDataBatchId int,
	@HasRecordsToProcess int out 
AS
BEGIN


if exists(select * from VisionStarCancelSent where XifDataBatchId = @XifDataBatchId)
Begin
	--we may clear the data before proceeding with the insert
	--do not want to create the duplicate records for the same order
	--in same batch
	delete from VisionStarCancelSent where XifDataBatchId = @XifDataBatchId 
End

insert into VisionStarCancelSent (XifDataB"
WorkQueues,WorkFlowPurge_Orders,SQL_STORED_PROCEDURE,2014-03-10 00:08:58.330,2024-03-25 16:42:52.267,3668,Has Source,5502,"
-- =============================================
-- Author: Sam Callejo and Kris Jornlin
-- Create date: 01/30/2013
-- Description: Gets only providers for listbox.
-- =============================================

CREATE PROCEDURE [WorkQueues].[WorkFlowPurge_Orders]  
        @OrderDate datetime,
        @WFOrdersTypeId int
AS  
BEGIN  

        declare @CurrentDate DateTime
        set @CurrentDate = GETDATE()

        declare @DateYearAgo DateTime
        set @DateYearAgo = "
dbo,CopyRxInfo,SQL_STORED_PROCEDURE,2009-05-14 21:40:57.453,2024-03-25 16:42:52.220,5429,Has Source,2263,"
CREATE PROCEDURE [dbo].[CopyRxInfo]
	
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @TOrderNum AS int 
    DECLARE @TRxDate AS datetime
	DECLARE @TDoctor AS int 
	DECLARE @TPatientExamID AS int
	DECLARE @TOutsideDrID AS int
	DECLARE @TRxType AS int
	
	DECLARE TempCursor CURSOR FOR
	SELECT OrderNum, RxDate, Doctor, PatientExamID, OutsideDrID
	FROM [dbo].[Orders]
	WHERE (Doctor is not null or PatientExamID is not null or OutsideDrID is not null)	

	OPEN TempCursor

	FETCH NEXT FROM TempC"
dbo,LoadOutOfStoreRefund,SQL_STORED_PROCEDURE,2010-03-14 19:42:28.023,2024-03-25 16:42:52.123,5125,Has Source,3371,"
CREATE PROCEDURE [dbo].[LoadOutOfStoreRefund]
	
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @TOrderNum AS int 
	DECLARE @TransNum AS int 
	DECLARE @InvoiceSumID AS int 
	DECLARE @PatientID AS int 
	DECLARE @Amount AS int 
	DECLARE @Date AS datetime 
	DECLARE @MiscWfversion AS int 
	DECLARE @WfInstanceID AS int 
	declare @WFEventId as int
	declare @UserId as int
	declare @OfficeNum as varchar(20)
	declare @InvoiceId as int
	declare @itemnum as varchar(20)
	declare @itemId as int
	
	s"
dbo,GetItemTypeSaleSummaryByDateRange,SQL_STORED_PROCEDURE,2024-02-06 18:45:41.070,2024-03-25 16:42:52.070,48,Has Source,2643,"/****** Object:  StoredProcedure [dbo].[GetItemTypeSaleSummaryByDateRange]    Script Date: 1/30/2024 10:57:48 AM ******/

CREATE PROCEDURE [dbo].[GetItemTypeSaleSummaryByDateRange] 
@FromDate datetime,
@ToDate datetime

AS
BEGIN
       SET NOCOUNT ON;
	   DECLARE @NewSeed NUMERIC(12)

       create table ##tempdata  
    ( 
       ID int,
       ItemType int,
       ItemID int,
       OfficeNum varchar(50),
       Quantity int,
       Amount Decimal(38,2),
       Discount Decimal(38,2),
       R"
dbo,GetItemTypeSaleSummaryByDate,SQL_STORED_PROCEDURE,2023-12-21 07:54:31.167,2024-03-25 16:42:52.063,95,Has Source,1090,"CREATE PROCEDURE [dbo].[GetItemTypeSaleSummaryByDate] 
@TransactionDate datetime
AS
BEGIN
	SET NOCOUNT ON;

    SELECT TOP (100) PERCENT Row_Number() OVER (ORDER BY v.OfficeNum) AS ID, 
	dateadd(dd,0, datediff(dd,0,TransactionDate)) AS TransactionDate, itemType, ItemID, 
	v.OfficeNum, SUM(isnull(Quantity,0)) AS Quantity, 
	SUM(ISNULL(customerpay, 0)) - SUM(ISNULL(Tax, 0)) + SUM(ISNULL(Receivable, 0)) AS Amount, 
	SUM(ISNULL(Discount, 0)) + SUM(ISNULL(LineDisc, 0)) + SUM(ISNULL(PackageDisc, 0)) +"
dbo,InsertPOSTransactionSummaryByDate,SQL_STORED_PROCEDURE,2009-05-14 21:40:57.530,2024-03-25 16:42:52.057,5429,Has Source,2721,"-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[InsertPOSTransactionSummaryByDate]
AS
BEGIN
declare @TransDate as datetime
Declare @Dayclose as int
Declare @officenum as varchar(5)
Declare @Retail as money
Declare @Discount as money
Declare @Allowance as money
Declare @Copay as money
Declare @Receivable as money
Decla"
dbo,CalcPOSTransactionSummaryByDayCloseDate,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.727,2024-03-25 16:42:52.047,3668,Has Source,3510,"CREATE PROCEDURE [dbo].[CalcPOSTransactionSummaryByDayCloseDate]
@officenum as varchar(15),
@TransDate as varchar(15)
AS
BEGIN
Declare @Dayclose as int
Declare @Retail as money
Declare @Discount as money
Declare @Allowance as money
Declare @Copay as money
Declare @Receivable as money
Declare @Tax as money
Declare @CustomerPay as money
Declare @Payment  as money
Declare @CustomerCredit as money
declare @iCnt as int
Declare @OldSystemBalance as money

if((Select count(*) from Dayclose where transd"
dbo,CalcPOSTransactionSummaryByDate,SQL_STORED_PROCEDURE,2009-05-14 21:40:57.530,2024-03-25 16:42:52.040,5429,Has Source,4347,"CREATE PROCEDURE [dbo].[CalcPOSTransactionSummaryByDate]
@TransDate as datetime
AS
BEGIN
Declare @Dayclose as int
Declare @officenum as varchar(15)
Declare @Retail as money
Declare @Discount as money
Declare @Allowance as money
Declare @Copay as money
Declare @Receivable as money
Declare @Tax as money
Declare @CustomerPay as money
Declare @Payment  as money
Declare @CustomerCredit as money
Declare @TransactionDate as datetime
declare @iCnt as int

Declare @OldSystemBalance as m"
dbo,InsertPOSTransactionSummary,SQL_STORED_PROCEDURE,2009-05-14 21:40:57.513,2024-03-25 16:42:52.030,5429,Has Source,2553,"-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE InsertPOSTransactionSummary
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
declare @TransDate as datetime
Declare @Dayclose as int
Declare @officenum as varchar(5)
Declare @Retail as money
Declare @Dis"
dbo,SalesByGoal,SQL_STORED_PROCEDURE,2011-02-24 23:15:19.470,2024-03-25 16:42:51.913,4778,Has Source,24265,"
CREATE PROCEDURE [dbo].[SalesByGoal]
@OfficeNum as varchar(10),
@CurrentDate as datetime

AS
BEGIN
 
declare @CurrentLYDate as datetime
declare @CurrentDayofWeek as int
declare @CurrentWeek as int

declare @FirstDateMonth as datetime
declare @LastDateMonth as datetime
declare @FirstDateYear as datetime
declare @LastDateYear as datetime
declare @FirstDayWeek as datetime
declare @LastDayWeek as datetime

declare @FirstDateLYMonth as datetime
declare @LastDateLYMonth as datetim"
dbo,GetInvoiceDetailsLite,SQL_STORED_PROCEDURE,2020-04-17 23:42:28.573,2024-03-25 16:42:51.883,1438,Has Source,841,"CREATE PROCEDURE [dbo].[GetInvoiceDetailsLite]
(
@InvoiceId int
)
AS

BEGIN 

SET NOCOUNT ON;

select
id.InvoiceID
, id.ID
, i.ItemNum
, i.ItemGroup
, id.Quantity
, id.Amount
, id.Tax
, id.LineDisc
, id.PackageDisc
, id.Discount
, id.Price
, id.DiscountTypeID
, id.IsLensItem
, isnull((select sum(InsuranceDiscount) from InvoiceInsuranceDet where InvoiceDetailID = id.ID group by InvoiceDetailID),0) InsuranceInvoiceDetDiscountSum
, isnull((select sum(Receivable) from InvoiceInsuranceDet where Invoi"
dbo,UndeliveredOrdersSummary,SQL_STORED_PROCEDURE,2011-02-24 23:15:13.647,2024-03-25 16:42:51.737,4778,Has Source,2959,"CREATE PROCEDURE UndeliveredOrdersSummary
AS
BEGIN

select  
pt.officenum,sum(isnull(ind.amount,0))+sum(isnull(iid.Receivable,0))-sum(isnull(ind.tax,0)) as TotalSales,
sum(iid.receivable) as Receivable,sum(ind.amount) as PatientPay
, ((sum(ind.amount))+sum(case when pt.paymentid is not null then pt.amount else 0 end) ) as outstanding,
sum(case when ind.itemtype=6 then 0 else ind.amount end)+sum(case when ind.itemtype=6 then 0 else iid.Receivable end)-
sum(case when ind.itemtype=6 then 0"
dbo,UpdateInsCheck,SQL_STORED_PROCEDURE,2017-09-20 08:27:19.350,2024-01-30 08:08:08.367,2323,Has Source,3710,"

CREATE PROCEDURE [dbo].[UpdateInsCheck]
	@PaymentId INT,
	@PaymentNumber VARCHAR(50),
	@PaymentDate DATE,
	@DepositDate DATE,
	@Amount DECIMAL(18,2),
	@OutstandingAmount DECIMAL(18,2),
	@IsRemoveCheck BIT
AS
BEGIN
if(@IsRemoveCheck = 0)
	BEGIN
	 --Correct Insurance Check amount or Reset the Check amount.
	UPDATE Billingpayment SET PaymentNumber = @PaymentNumber, PaymentDate = @PaymentDate, DepositDate = @DepositDate,  Amount=@Amount, outstandingamount=@OutstandingAmount WHERE PaymentId=@Paymen"
dbo,CopyPatientPreferencesSetup,SQL_STORED_PROCEDURE,2017-08-09 00:47:02.107,2023-12-19 07:52:54.327,2323,Has Source,1082,"CREATE PROCEDURE [dbo].[CopyPatientPreferencesSetup]
	@CopyFromCompanyId as varchar(32),
	@CopyToCompanyId as varchar(32),
	@WithOverlay as int = 0	
AS
BEGIN

MERGE FeatureAvailability AS T
USING (
	SELECT FeatureUUID,ContextType,@CopyToCompanyId ContextKey,IsAvailable, License,PropertiesJSON 
	FROM FeatureAvailability
	WHERE ContextType='Company'
	AND ContextKey=@CopyFromCompanyId
	AND FeatureUUID in (
		'4FC72817-FB94-45FA-A3B3-B78D41078690',
		'89840DC8-AC3D-42A0-8BC6-0394D286C85B',
		'111AD4"
dbo,Scheduler_TemplatesForTimeSlot_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.127,2023-12-07 12:01:01.873,3559,Has Source,2622,"
-- =============================================
-- Author:		Joel Deister
-- Create date: 04/09/2010
-- Description:	Gets the appointment templates for a selected time slot.
-- =============================================

CREATE PROCEDURE [Scheduler_TemplatesForTimeSlot_Get]
       @locationId                INT
       ,@providerId              INT
       ,@SelectedDate       DATETIME
       ,@StartTime              NVARCHAR(11)
       ,@EndTime               NVARCHAR(11)
AS
BEGIN
       

--"
dbo,Scheduler_OfficeHours_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.770,2023-10-30 18:50:50.553,3521,Has Source,685,"-- =============================================
-- File Name:	Scheduler_OfficeHours_Get_sql
-- Description:	Gets hours of an Office from AL OfficeHours table
-- Author:	Ali Atabek
-- History:	Date		Initials	Description
--			04/24/2011	AA			Created
-- =============================================


CREATE PROCEDURE [Scheduler_OfficeHours_Get] 
	 @OfficeID int
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT [Day], OpenFrom, OpenTo, OfficeName,"
dbo,Scheduler_ALProviderHoursConversion_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.373,2023-10-30 18:50:50.540,3521,Has Source,2488,"CREATE PROCEDURE [dbo].[Scheduler_ALProviderHoursConversion_Get] 
	@Employee int
	, @OfficeNum varchar(8)
	, @CutoffDate datetime
AS

-- =============================================
-- File Name:	Scheduler_ALProviderHoursConversion_Get
-- Description:	extracts old AL Employee Hours to convert to new Provider blocks
-- Author:	Ali
-- History:	Date		Initials	Description
--			12/31/2012		AA		created
-- =============================================
BEGIN
	SET NOCOUNT ON;
	SET TRANSAC"
dbo,Scheduler_LocationsByLocType_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.670,2023-10-30 18:50:50.513,3521,Has Source,778,"

-- =============================================
-- File Name:	Scheduler_LocationsByLocType_Get.sql
-- Description:	This Stored Procedure Gets Locations By LocType.
-- Author:	Milenko Djuricin
-- Example: [Scheduler_LocationsByLocType_Get] 1
-- History:	Date		Initials	Description
--			03/23/2010	MD			Created
--          02/28/2012  PA          Modified for AL
-- =============================================

CREATE PROCEDURE [Scheduler_LocationsByLocType_Get] 
	@LocType int
AS
B"
dbo,Scheduler_OfficeNum_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.800,2023-10-30 18:50:50.507,3521,Has Source,509,"
  
-- =============================================  
-- Author:  GLlano
-- Create date: 09/28/2012  
-- Description: Gets the location number by the Office Id
-- History:  Initials Date   Description  
  
-- =============================================  
  
CREATE PROCEDURE [Scheduler_OfficeNum_Get]  
 @officeId int
AS  
BEGIN  
 SET NOCOUNT ON;  
  
 SELECT  
  [OfficeNum] as OfficeNum
 FROM  
  Office WITH (NOLOCK)  
 WHERE  
  [OfficeId] = @officeId
  
 RETURN;  
  "
dbo,SetupAllVSPPlans,SQL_STORED_PROCEDURE,2015-02-10 22:41:32.437,2023-10-30 18:50:50.467,3184,Has Source,4469,"CREATE PROCEDURE [dbo].[SetupAllVSPPlans]
	@companyId varchar(20)
AS

	DECLARE @versionId              INT      = 262,
            @DetaultStartDate       DATETIME = CAST(GETDATE() AS DATE),
            @DefaultTerminationDate DATETIME = DATEADD(YEAR, 20, CAST(GETDATE() AS DATE)),
            @DefaultModifiedDate    DATETIME = GETDATE(),
            @DefaultUserId          INT      = 29; -- Admin

	-- create temp table contains all vsp default schedules for all  the companies
	select inss.InsSch"
dbo,Scheduler_DisplayedLocations_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.130,2023-10-30 18:50:50.463,3521,Has Source,871,"-- =============================================
-- File Name:	Scheduler_DisplayedLocations_Get.sql
-- Description:	This stored procedure gets displayed (available) locations for the given location.
-- Author:	Milenko Djuricin
-- Example: [Scheduler_DisplayedLocations_Get] 5
-- History:	Date		Initials	Description
--			03/23/2010	MD			Created
--          03/01/2012  PA          Modify to work with AL
-- =============================================

CREATE PROCEDURE [Scheduler_Displayed"
dbo,UpdateInventoryBalanceOnOrderAndTransitIn,SQL_STORED_PROCEDURE,2010-09-20 11:14:19.720,2023-10-30 18:50:50.403,4788,Has Source,3106,"
Create PROCEDURE [dbo].[UpdateInventoryBalanceOnOrderAndTransitIn]
	
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @Count as int
	declare @OfficeNum as varchar(8)
	DECLARE @OnOrder  as int
	DECLARE @TransitIn  as int
	declare @ItemIDUpdate as int
	declare @OnOrderBefore as int
	declare @TransitInBefore as int
	declare @OnOrderUpdate as int
	declare @TransitInUpdate as int
	
	DECLARE TempCursor CURSOR FOR	
	select OfficeNum from office where isliveOffice = 1	--And OfficeNum = '01'
	OPE"
dbo,UnMapInsurancePlan,SQL_STORED_PROCEDURE,2015-05-05 22:49:42.903,2023-10-30 18:50:50.280,3100,Has Source,3944,"CREATE PROC [dbo].[UnMapInsurancePlan]
	@PlanID     INT,
	@OfficeNum  VARCHAR(20),
	@UnMapAllOffices INT = 1,
	@CompanyID VARCHAR(8) = NULL

AS
--------------------------------------------------------------------------------
-- [dbo].[UnMapInsurancePlan]
-- This procedure ""Unmaps"" an insurance plan for an office and/or company.
-- It does this by removing the office level mapping from InsOfficeSchedule, 
-- then, if there are no more offices mapped, remove all
-- plan schedule versio"
dbo,Scheduler_OfficeHoliday_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.753,2023-10-30 18:50:50.250,3521,Has Source,415,"CREATE PROC [dbo].[Scheduler_OfficeHoliday_Get] 
(@OfficeId INT,
 @Holiday DATETIME)
 
 AS
 
 BEGIN

 --Scheduler_OfficeHoliday_Get '999','2009-07-04' 

 SELECT OH.ID
      , OH.OfficeNum 
	  , OH.HolidayDate 
	  , OH.Description 
   FROM OfficeHoliday OH inner join Office ON oh.OfficeNum = Office.OfficeNum
  WHERE convert(date,OH.HolidayDate) = @Holiday
    AND Office.OfficeId = @OfficeId

END"
dbo,SetupInsPlanByCarrierCode,SQL_STORED_PROCEDURE,2015-05-05 22:49:42.893,2023-10-30 18:50:50.160,3100,Has Source,4794,"-- =============================================
-- Author:		<Anton Frantchouk>
-- Create date: <Mar 30 2015>
-- Description:	<Maps Ins carrier to the company, 
-- generated from  SetupALLVSPPlans.sql>
-- =============================================
CREATE PROCEDURE [dbo].[SetupInsPlanByCarrierCode]
	@companyId varchar(20),
	@carrierCode varchar(20)
AS
	DECLARE @versionId              INT      = 262,
            @DetaultStartDate       DATETIME = CAST(GETDATE() AS DATE),
            @DefaultTer"
dbo,Scheduler_CompanyId_Get,SQL_STORED_PROCEDURE,2018-12-20 11:58:24.670,2023-10-30 18:50:49.980,1775,Has Source,726,"/****** Object:  StoredProcedure [dbo].[Scheduler_CompanyId_Get]    Script Date: 09/26/2018 14:12:08 ******/
-- =============================================
-- FileName:	Scheduler_CompanyId_Get
-- Description:	returns company Id based on location Id
-- Author:		Anton
-- Example:		Scheduler_CompanyId_Get 184
-- History:		Date		Initials	Description
--				09/26/2010	AF			Created
-- =============================================
CREATE PROCEDURE [dbo].[Scheduler_CompanyId_Get]
	@locationID int
AS
BE"
dbo,Scheduler_LocationsList_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.687,2023-10-30 18:50:49.967,3521,Has Source,973,"

-- =============================================
-- Author:		G. Tran
-- Create date: 12/14/2009
-- Description:	Gets all the Locations for UI lists
-- History:		Initials	Date			Description
--				JL			04/01/2010		Filtering location by loctype 1 (store)
--              PA          02/28/2012      Modify to work in AL
--				KD			12/31/2012		Add officenum to officename
-- =============================================

CREATE PROCEDURE [Scheduler_LocationsList_Get]
	(
	@IncludeActiveO"
dbo,Scheduler_LocationByResourceID_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.567,2023-10-30 18:50:49.923,3521,Has Source,1887,"

-- =============================================
-- File Name:	Scheduler_LocationByResourceID_Get.sql
-- Description:	This Stored Procedure Gets Locations By Provider.
-- Author:	Armando Moran
-- Example: [Scheduler_LocationByResourceID_Get] 11
-- History:	Date		Initials	Description
--			02/16/2010	AM			Created
--			02/24/2010	JL			Updated to include office hours
--			04/01/2010	JL			Updated to filter by loctype 1 (store) and to use left outer join when joining AppSch_Office
--     "
dbo,GetPackageByIdAndCheckIsValidIOF,SQL_STORED_PROCEDURE,2022-03-10 10:31:41.650,2023-10-30 18:50:49.917,599,Has Source,2290,"CREATE PROCEDURE [dbo].[GetPackageByIdAndCheckIsValidIOF]
	@officeNum VARCHAR(8), 
	@description VARCHAR(50) = NULL,
	@packageID int = NULL,
	@isVSPIOF bit = 0
AS
BEGIN

	SET NOCOUNT ON;

	IF @description IS NULL OR @description = ''
		SET @description = '%'
	ELSE 
		SET @description = '%' + @description + '%';

	IF @packageID = 0 
		SET @packageID = NULL 

	IF OBJECT_ID('tempdb..#TempPackSchedule') IS NOT NULL
		DROP TABLE #TempPackSchedule

	CREATE TABLE #TempPackSchedule 
	(packageid int)


	"
dbo,AddOfficeFromOfficeTemp,SQL_STORED_PROCEDURE,2011-02-24 23:15:12.887,2023-10-30 18:50:49.910,4631,Has Source,1711,"-- =============================================
-- Author:		Praveen
-- Create date: 10/06/2010
-- Description:	Add Office
-- =============================================
CREATE PROCEDURE [dbo].[AddOfficeFromOfficeTemp]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	DECLARE @TOfficeNum AS varchar(50)  
	DECLARE @TName AS varchar(50)
	DECLARE @TAddress1 AS va"
dbo,GetMonthlyCashSummary,SQL_STORED_PROCEDURE,2013-02-20 00:01:00.030,2023-10-30 18:50:49.873,3904,Has Source,1221,"CREATE PROCEDURE [dbo].[GetMonthlyCashSummary]
 @FromDate as datetime,
 @ToDate as datetime
 
AS
BEGIN
set @FromDate = DATEADD(dd, 0, dbo.DateOnly(@FromDate))
set @ToDate = DATEADD(dd, 1, dbo.DateOnly(@ToDate))

SELECT NEWID() as ID, GETDATE() as Date, sum(dcd.Actual) as OfficeActual, ofc.OfficeName as OfficeName, ofc.officeNum as OfficeNum,
(select Value from CatElementLU where ID = ofc.OfficeTypeId) as OfficeType, sum(dcd.Actual) - sum(dcd.Computed) as OfficeVar,
null as OfficeVarEx"
dbo,Scheduler_LocationEhrSystem_Get,SQL_STORED_PROCEDURE,2014-04-09 22:35:18.400,2023-10-30 18:50:49.870,3491,Has Source,603,"-- =======================================================
-- FileName:	Scheduler_LocationEhrSystem_Get
-- Description:	Get EHR System flag from CompanyInfo table
-- History:		Date		Initials	Description
--				03/18/2014	PTA			Created
-- =======================================================


CREATE PROCEDURE [dbo].[Scheduler_LocationEhrSystem_Get] 
	@locationId int
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT 		
		o.EMRSystem	as EHRSyste"
dbo,GetInventoryValue,SQL_STORED_PROCEDURE,2015-01-13 23:42:18.653,2023-10-30 18:50:49.827,3212,Has Source,1887,"CREATE PROCEDURE [dbo].[GetInventoryValue]
	@CutOffDate AS DateTime,
	@OfficeNums AS VarChar(Max),
	@ItemTypeIDs AS VarChar(Max),
    @FinancialGroupIDs as varchar(1000)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT ID INTO #officenum FROM dbo.GetOfficeNumber(@OfficeNums)
	SELECT ID INTO #ItemTypes FROM dbo.GetOfficeNumber(@ItemTypeIDs)
	SELECT ID INTO #FinancialGroups FROM dbo.GetOfficeNumber(@FinancialGroupIDs)


SELECT ia.ID, i.ItemNum, i.ItemType, ItemType.Description as ItemTypeName, i.ItemName, i.UPC"
dbo,CleanUpPatientQuickList,SQL_STORED_PROCEDURE,2017-02-15 00:04:22.027,2023-10-30 18:50:49.583,2448,Has Source,405,"CREATE PROCEDURE [dbo].[CleanUpPatientQuickList]
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		BEGIN TRANSACTION
		-- CLEAN UP JUNCTION TABLES
		DELETE FROM OfficePatientHistory WHERE OfficeNum IN (SELECT OfficeNum FROM Office WHERE IsSingleLocation = 1)
		COMMIT
	END TRY
    BEGIN CATCH
		ROLLBACK
        SELECT
        ERROR_NUMBER() AS ErrorNumber
        ,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END"
dbo,GetInventoryInTransit,SQL_STORED_PROCEDURE,2018-08-23 15:34:10.993,2023-10-30 18:50:49.563,1894,Has Source,1482,"CREATE PROCEDURE [dbo].[GetInventoryInTransit]
	@CutOffDate AS DateTime,
	@OfficeNums AS VarChar(Max),
	@ItemTypes as VarChar(Max)
AS
BEGIN
	SET NOCOUNT ON;


;WITH officenums AS (select id from dbo.GetOfficeNumber(@OfficeNums))
SELECT 
    distinct
    srd.ID, 
    sr.StockReceiptNum AS ReferenceNum, 
    ofrom.OfficeNum AS FromOfficeNum, 
    ofrom.OfficeName AS FromOfficeName, 
    oto.OfficeNum AS ToOfficeNum, 
    oto.OfficeName AS ToOfficeName,    
    i.ItemNum, i.ItemName, 
    srd.Recei"
dbo,Scheduler_Appointment_Del,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.423,2023-10-30 18:50:49.530,3521,Has Source,3007,"CREATE PROCEDURE [Scheduler_Appointment_Del] 
	
	 @appointmentId int
	
	
AS

-- =============================================
-- File Name:	Scheduler_Appointment_Del.sql
-- Description:	This Stored Procedure Deletes Existing Appointments.
-- Author:	Armando Moran
-- Example: [Scheduler_Appointment_Del] 174046
-- History:	Date		Initials	Description
--			02/22/2010	AM			Created
--			04/13/2010	MD			Modified to delete recurring appointment when the last instance is deleted
--			04/20/2010	AM			Modi"
dbo,MapInsurancePlan,SQL_STORED_PROCEDURE,2015-05-05 22:49:42.860,2023-10-30 18:50:49.500,3100,Has Source,9220,"CREATE PROC [dbo].[MapInsurancePlan]
    @PlanID     INT,
    @OfficeNum  VARCHAR(20),
    @ModifiedBy INT,
	@Version1   INT = 262,
	@MapAllOffices INT = 1,
	@CompanyID VARCHAR(8) = NULL
AS
--------------------------------------------------------------------------------
-- Maps Insurance Plans at company and office level
-- This procedure mimics the behavior of 
-- ALE Admin -> Company Setup -> Ins Mapping -> ""Include"" Checkbox.
-- The basic premise of mapping an insurance is making a copy of a "
dbo,Scheduler_LocationIsSingleLocation_Get,SQL_STORED_PROCEDURE,2014-08-20 23:17:10.383,2023-10-30 18:50:49.470,3358,Has Source,595,"-- =======================================================
-- FileName:	Scheduler_LocationIsSingleLocation_Get
-- Description:	Gets the flag to indicate if this office is a single location type.
-- History:		Date		Initials	Description
--				07/10/2014	JD			Created
-- =======================================================


CREATE PROCEDURE [dbo].[Scheduler_LocationIsSingleLocation_Get] 
	@officeId int
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	"
dbo,SaveItemPrice_ForAllOfficesInCompany,SQL_STORED_PROCEDURE,2016-08-31 00:04:07.377,2023-10-30 18:50:49.460,2616,Has Source,846,"CREATE PROC [dbo].[SaveItemPrice_ForAllOfficesInCompany]
	@ItemID			INT, 
	@PriceTypeID	INT, 
	@Price			DECIMAL(8,2),
	@PriceListID	INT,
	@CompanyID		varchar(20),
	@SvPrice	    DECIMAL(8,2),
	@BfPrice	    DECIMAL(8,2),
	@TfPrice 	   DECIMAL(8,2),
	@PgPrice		DECIMAL(8,2)
AS
BEGIN
	SET NOCOUNT ON;
	/* Save the item price record */
	EXEC SaveItemPrice_Extension @ItemID, @PriceTypeID, @Price, @PriceListID, @SvPrice, @BfPrice, @TfPrice,@PgPrice;
	/* Fill in the holes... attach it to any office in thi"
dbo,UpdateInventoryBalanceOnHand,SQL_STORED_PROCEDURE,2010-03-14 19:42:28.110,2023-10-30 18:50:49.443,4978,Has Source,2205,"
Create PROCEDURE [dbo].[UpdateInventoryBalanceOnHand]
	
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @itemid AS int 
	DECLARE @Count as int
	declare @OfficeNum as varchar(8)
	DECLARE @OnHand  as int
	
	DECLARE TempCursor CURSOR FOR	
	select OfficeNum from office where isliveOffice = 1	--and OfficeNum = '38'
	OPEN TempCursor	
	FETCH NEXT FROM TempCursor INTO
	@OfficeNum
	WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE ActivityCursor  CURSOR FOR

			select itemid, count(itemid)  from Inv"
dbo,GetKPISpecialReportByALLOfficeDaily,SQL_STORED_PROCEDURE,2009-08-25 10:59:59.967,2023-10-30 18:50:49.440,5179,Has Source,2460,"
CREATE PROCEDURE [dbo].[GetKPISpecialReportByALLOfficeDaily]

@FromDate varchar(20),
@ToDate varchar(20),
@LYFromDate varchar(20),
@LYToDate varchar(20),
@KPIID varchar(10)

AS
BEGIN
	SET NOCOUNT ON;

select Row_number() over(order by k.ID) as ID, k.ID as kpiid ,k.Description
 , case when sum(ks.quantity) is null then 0 else sum(ks.quantity) end as Quantity,
 sum(Amount) as Amount,sum(Insurance) as Insurance,sum(Discount) as Discount,sum(Retail) as Retail
 , ks.Officenum as Offi"
dbo,Scheduler_Locations_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.653,2023-10-30 18:50:49.427,3521,Has Source,1804,"

-- =============================================
-- Author:		B. VanHorne
-- Create date: 12/14/2009
-- Description:	Gets all the Locations and office hours
-- History:		Initials	Date			Description
--				JL			03/31/2010		Doing a left join on AppSch_Office table and filtering by NOT loctype 4
--				JL			04/01/2010		Filtering by loctype 1 (Store)
--				MD			10/20/2010		Added default_city and default_state
--              GL          04/05/2010      Added column EyeHome_ProviderID
--			"
dbo,Scheduler_OfficeId_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.787,2023-10-30 18:50:49.350,3521,Has Source,470,"
-- =============================================
-- Author:		Ali
-- Create date: 06/15/2012
-- Description:	Gets the display text of an audit value
-- History:		Initials	Date			Description

-- =============================================

CREATE PROCEDURE [Scheduler_OfficeId_Get]
	@officeNum varchar (8)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[OfficeId] as OfficeId
	FROM
		Office WITH (NOLOCK)
	WHERE
		[OfficeNum] = @officeNum

	RETURN;

END
"
dbo,Scheduler_LocationsListOfEmployee_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.703,2023-10-30 18:50:49.290,3521,Has Source,651,"

-- =============================================
-- Author:		Ali
-- Create date: 10/23/2012
-- Description:	Gets all the Locations for an Employee
-- History:		Initials	Date			Description

-- =============================================
CREATE PROCEDURE [Scheduler_LocationsListOfEmployee_Get]
	(
	@employeeID int
	)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		O.[OfficeNum] 
		,O.[OfficeId] as LocationId
		,O.OfficeNum + ' - ' + O.OfficeName as LocDisplayName
	FROM OfficeEmployee"
dbo,GetInventoryInTransitValue,SQL_STORED_PROCEDURE,2020-04-17 23:42:28.570,2023-10-30 18:50:49.283,1291,Has Source,1651,"
CREATE PROCEDURE [dbo].[GetInventoryInTransitValue]

	@OfficeNums AS VarChar(Max),
	@ItemTypeIDs AS VarChar(Max),
    @FinancialGroupIDs as varchar(1000)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT ID INTO #officenum FROM dbo.GetOfficeNumber(@OfficeNums)
	SELECT ID INTO #ItemTypes FROM dbo.fn_GetIDsFromList(@ItemTypeIDs,"","")
	SELECT ID INTO #FinancialGroups FROM dbo.fn_GetIDsFromList(@FinancialGroupIDs,"","")


SELECT srd.ID, i.ItemNum, i.ItemType, ItemType.Description as ItemTypeName, i.ItemName, i.UPCCo"
dbo,Scheduler_LocationHolidayList_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.620,2023-10-30 18:50:49.280,3521,Has Source,289,"

CREATE PROCEDURE [dbo].[Scheduler_LocationHolidayList_Get]
	(
	@locationId INT	
	)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT H.[HolidayDate]      
	FROM [dbo].[OfficeHoliday] H
	INNER JOIN Office O on O.OfficeNum = H.OfficeNum
	WHERE O.OfficeId=@locationId

	RETURN;

END


"
dbo,Scheduler_OfficeByOfficeId_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.737,2023-10-30 18:50:49.243,3521,Has Source,534,"  
-- =============================================  
-- Author:  George Llano
-- Create date: 07/10/2012  
-- Description: Gets the office information by OfficeId
-- History:  Initials Date   Description  
  
-- =============================================  
  
CREATE PROCEDURE [Scheduler_OfficeByOfficeId_Get]  
 @OfficeId int
AS  
BEGIN  
 SET NOCOUNT ON;  
  
 SELECT [OfficeNum]
      , [OfficeName]
      , [OfficeId]
   FROM [dbo].[Office] (NOLOCK)
  WHERE [OfficeId] = @O"
dbo,GetKPIReportBYDateByKPIIDs,SQL_STORED_PROCEDURE,2009-10-21 22:11:32.610,2023-10-30 18:50:49.210,5122,Has Source,7123,"CREATE PROCEDURE [dbo].[GetKPIReportBYDateByKPIIDs]


@FromDate varchar(20),
@ToDate varchar(20),
@LYFromDate varchar(20),
@LYToDate varchar(20),
@KPI varchar(200),
@CompanyID varchar(20)
WITH RECOMPILE
AS
BEGIN
	SET NOCOUNT ON;
--
--select @KPI + ' - '+ ks.Officenum as ID, isnull(k.ID as KPIID ,
--k.Description,
--  ks.officenum  as OfficeNum,
--
--(select (case when(sum(Quantity)) is null then 0 else sum(Quantity) end) from kpidaily ks1 
--where ks1.kpiid=k.id and ks1.Date >=@FromDate and ks1."
dbo,UpdateFrameSearch,SQL_STORED_PROCEDURE,2020-04-17 23:42:28.580,2023-10-17 07:54:18.370,1278,Has Source,5281,"-- =============================================
-- Author:		Amish Shukla
-- Create date: 31-Oct-2019
-- Description:	Stored procedure to update FrameSearch table with data to optimize FrameSearch query.
-- =============================================

/**********************************************************
10/31/19 - Amish - Stored procedure created.
11/08/19 - Amish - Removed Transaction
11/01/21 - Robert - Added FamilyCodeCode
***********************************************************/
"
dbo,Scheduler_InsurancePlan_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.440,2023-09-26 07:53:51.987,3487,Has Source,542,"
-- =============================================
-- Author:		Joel Deister
-- Create date: 11/24/2010
-- Description:	Gets a specific plan for an insurance
--              even if the plan has expired.
-- =============================================

CREATE PROCEDURE [Scheduler_InsurancePlan_Get]
	(
	@planId int
	)	
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT 
		p.id as planId
		,p.planname as planName
	FROM insplan as p WITH (NOLOCK"
dbo,Scheduler_RangeNumberFromDate_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.090,2023-09-08 07:54:14.687,3469,Has Source,864,"-- =============================================
-- File Name:	Scheduler_RangeNumberFromDate_Get.sql
-- Description:	This Stored Procedure gets the range number based on the entered date, location and provider (optional).
-- Author:	Joel Deister
-- History:	Date		Initials	Description
--			01/31/2011	JD			Created
-- =============================================

CREATE PROCEDURE [Scheduler_RangeNumberFromDate_Get] 
	@apptDate	DATETIME = NULL,
	@locationId	INT,
	@providerId INT = NULL

AS
BEGIN
	S"
dbo,SearchAllTables2,SQL_STORED_PROCEDURE,2014-02-21 03:37:54.297,2023-08-15 07:53:32.270,3462,Has Source,2142,"
CREATE PROC [dbo].[SearchAllTables2]
(
    @SearchStr nvarchar(100),
    @ExactMatch int
)
AS

    CREATE TABLE #Results (ColumnName nvarchar(370), ColumnValue nvarchar(3630))

    SET NOCOUNT ON

    DECLARE @TableName nvarchar(256), @ColumnName nvarchar(128), @SearchStr2 nvarchar(110), @WhereClause nvarchar(256)
    SET @TableName = ''

    IF @ExactMatch = 1
		SET @SearchStr2 = QUOTENAME(@SearchStr,'''')
    ELSE
		SET @SearchStr2 = QUOTENAME('%' + @SearchStr + '%','''')

    WHILE @TableNam"
dbo,SearchAllTables,SQL_STORED_PROCEDURE,2009-08-29 12:37:05.187,2023-08-15 07:53:32.263,5099,Has Source,1825,"CREATE PROC SearchAllTables
(
	@SearchStr nvarchar(100)
)
AS
BEGIN

	-- Copyright © 2002 Narayana Vyas Kondreddi. All rights reserved.
	-- Purpose: To search all columns of all tables for a given search string
	-- Written by: Narayana Vyas Kondreddi
	-- Site: http://vyaskn.tripod.com
	-- Tested on: SQL Server 7.0 and SQL Server 2000
	-- Date modified: 28th July 2002 22:50 GMT


	CREATE TABLE #Results (ColumnName nvarchar(370), ColumnValue nvarchar(3630))

	SET NOCOUNT ON

	DECLARE @TableName nva"
dbo,SaveExistingPriceBulkFrameSetup,SQL_STORED_PROCEDURE,2014-12-17 23:08:36.760,2023-08-15 07:53:32.243,3163,Has Source,5944,"CREATE PROCEDURE [dbo].[SaveExistingPriceBulkFrameSetup]
    @companyId VARCHAR(20),
    @onlyPriceActive INT,
    @changeTypeValue DECIMAL(18, 2),
    @changeTypePercentage INT,
    @dollarAmountValue DECIMAL(18, 2),
    @dollarAdd INT,
    @endIn VARCHAR(100),
    @selectedCollections VARCHAR(MAX)
AS
BEGIN
    DECLARE @tranname VARCHAR(20);
    SELECT @tranname = 'SaveExistingPriceBFSTransaction';

    SET NOCOUNT ON;
    IF (@onlyPriceActive = 0)
    BEGIN
        --activate frame collection	"
dbo,GetPhysicalScanByCriteriaList,SQL_STORED_PROCEDURE,2018-08-23 15:34:11.010,2023-08-15 07:53:32.220,1818,Has Source,1515,"CREATE PROCEDURE [dbo].[GetPhysicalScanByCriteriaList]
@CompanyId AS VARCHAR(20),
@ItemNum AS VARCHAR(50), 
@UPCCode AS VARCHAR(50),
@CollectionIDs AS VARCHAR(MAX)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @Sql NVARCHAR(MAX)
    SELECT @Sql = '
	     SELECT 
			 i.ID as ID, 
			 ifa.ItemID as ItemID,
			 i.ItemNum as ItemNum,
			 i.ItemName as ItemName,
			 i.UPCCode as UPCCode,
			 i.Active as Active,
			 fc.ID as CollectionID,
			 i.DataSourceID as DataSourceID	
		 FROM 	
			 ItemFrame ifa INNER JOIN"
dbo,GenerateInserts,SQL_STORED_PROCEDURE,2014-02-21 03:37:54.580,2023-08-15 07:53:32.207,3462,Has Source,932,"

CREATE PROCEDURE dbo.GenerateInserts
    @table     NVARCHAR(511), -- expects schema.table notation
    @pk_column SYSNAME,       -- column that is primary key
	@whereClause NVARCHAR(MAX) -- the where clause used to parse down the data
AS
BEGIN

	declare @temp TABLE ( keyValue nvarchar(10),	Pos int );
	declare @result TABLE (	insertString nvarchar(MAX) );
	declare @query NVARCHAR(MAX)

	set @query = 
	'with qry as 
	(
		SELECT ' + @pk_column + ' as KeyValue, ROW_NUMBER() over(ORDER BY ' + @pk_"
dbo,Scheduler_TemplatesDetail_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.077,2023-07-21 14:08:52.317,3420,Has Source,1008,"-- =============================================
-- Author:		M. Nabeel
-- Create date: 03/23/2010
-- Description:	Gets the detail for a particular Template
-- History		Initials	Date			Description
--				JL			04/12/2010		Added temptID to result set
--				KD			02/13/2013	    Added tempt_Name and tempt_DisplayName to result set
-- =============================================

CREATE PROCEDURE [Scheduler_TemplatesDetail_Get]
	@temptID INT
	,@tempt_DayofWeek INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		D"
dbo,UpdateInventoryBalanceOnHand1,SQL_STORED_PROCEDURE,2010-12-27 17:32:20.540,2023-05-12 16:16:45.040,4519,Has Source,3709,"
CREATE PROCEDURE [dbo].[UpdateInventoryBalanceOnHand1]
	
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @itemid AS int 
	DECLARE @Count as int
	declare @OfficeNum as varchar(8) -- '8081'
	DECLARE @OnHand  as int
	DECLARE @Adjustment  as int
	DECLARE @PhysicalID  as int --26
	declare @AdjustmentID as int --118
	declare @AdjustmentDate as datetime -- getdate()
	declare @Employee as int --605
	
	DECLARE TempCursor CURSOR FOR	
	select ip.id, ip.officeNum,getdate(), 605 from inventoryPhysica"
dbo,Clean_CSVFrame,SQL_STORED_PROCEDURE,2018-08-23 15:34:10.790,2023-05-12 16:16:43.967,1723,Has Source,297,"CREATE PROCEDURE [dbo].[Clean_CSVFrame]
(@RESULT AS INT = 0 OUTPUT)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DELETE FROM CSVFrame
	DBCC CHECKIDENT('CSVFrame', RESEED, 0)
	SET @RESULT = '1'
	RETURN @RESULT
END"
dbo,GenerateItemContactLensFromRange,SQL_STORED_PROCEDURE,2009-05-14 21:40:57.310,2023-05-12 16:16:43.940,5111,Has Source,5398,"-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GenerateItemContactLensFromRange]
AS
BEGIN

declare @itemId as int
declare @styleId as int
declare @colorId as varchar(8)
declare @powerId as int

declare @price as decimal(8,2)
declare @priceType as int
declare @priceList as int

declare @styleName as varchar(30)
dec"
dbo,LoadABBData3_BKP,SQL_STORED_PROCEDURE,2012-02-29 08:33:02.307,2023-05-12 16:16:43.930,4090,Has Source,5495,"Create PROCEDURE [dbo].[LoadABBData3_BKP]
AS
BEGIN
	
	DECLARE @styleid AS INT
	DECLARE @TItemNo AS varchar(50)  
	DECLARE @prd_upc_code AS varchar(50)
	DECLARE @prd_description AS varchar(50)
	DECLARE @ItemID AS int
	DECLARE @ItemNum AS varchar(50)
	DECLARE @PowerID AS int
	DECLARE @ColorCode AS varchar(50)  
	DECLARE @Sphere AS decimal(8,2)
	Declare @cylinder as decimal(8,2)
	Declare @add as decimal (8,2)
	declare @axis as int 
	declare @SupplierID as int
	declare @ItemType as "
dbo,LoadABBData2,SQL_STORED_PROCEDURE,2009-06-04 21:34:04.503,2023-05-12 16:16:43.923,5090,Has Source,2971,"-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[LoadABBData2]
AS
BEGIN
	
	declare @styleid as int 
	
	DECLARE TempCursor CURSOR FOR
	SELECT CLStyleID
	FROM [dbo].[CLStyleMapping]		
	WHERE SupplierID = 1
	
	OPEN TempCursor

	FETCH NEXT FROM TempCursor INTO
	@styleid

	WHILE @@FETCH_STATUS = 0
		BEGIN
			print @s"
dbo,UpdateCLItemName,SQL_STORED_PROCEDURE,2010-02-08 16:51:18.993,2023-05-12 16:16:43.920,4841,Has Source,2863,"
CREATE PROCEDURE [dbo].[UpdateCLItemName]
AS
BEGIN
	
	DECLARE @styleid AS INT
	DECLARE @TItemNo AS varchar(50)  
	DECLARE @prd_upc_code AS varchar(50)
	DECLARE @prd_description AS varchar(50)
	DECLARE @ItemID AS int
	DECLARE @ItemNum AS varchar(50)
	DECLARE @PowerID AS int
	DECLARE @ColorCode AS varchar(50)  
	DECLARE @Sphere AS decimal(8,2)
	Declare @cylinder as decimal(8,2)
	Declare @add as decimal (8,2)
	declare @axis as int 
	declare @SupplierID as int
	declare @ItemType a"
dbo,LoadABBData3,SQL_STORED_PROCEDURE,2009-08-25 11:00:02.043,2023-05-12 16:16:43.907,5008,Has Source,5685,"-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[LoadABBData3]
AS
BEGIN
	
	DECLARE @styleid AS INT
	DECLARE @TItemNo AS varchar(50)  
	DECLARE @prd_upc_code AS varchar(50)
	DECLARE @prd_description AS varchar(50)
	DECLARE @ItemID AS int
	DECLARE @ItemNum AS varchar(50)
	DECLARE @PowerID AS int
	DECLARE @ColorCode AS va"
dbo,GetContactLensPowers_Extension,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.790,2023-05-12 16:16:43.900,3350,Has Source,218,"CREATE PROC [dbo].GetContactLensPowers_Extension
	@ClStyleId        INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT CLPowerId, ClStyleId, Base, Diameter 
			
	FROM dbo.CLPower
	
	WHERE  CLStyleID = @ClStyleId

END
"
dbo,CopyRecallTypeSetup,SQL_STORED_PROCEDURE,2017-08-09 00:47:02.113,2023-04-23 07:55:05.597,2083,Has Source,2896,"/*************************************************************************************
************************COPY Item component mapping DATA**********************************
-- This stored procedure copies over Recall Types and Notices data from one practice to another.
-- This stored procedure is used in the Copy Setup Data and Go Live functions of ALSupport.
*************************************************************************************/

CREATE PROCEDURE [dbo].[CopyRecallTypeSetup]
"
WorkQueues,WorkFlowPurge_Appointments,SQL_STORED_PROCEDURE,2014-03-10 00:09:08.083,2023-03-19 07:58:56.643,3296,Has Source,1576,"-- =============================================
-- Author:		Andrei Ramanovich
-- Create date: 01/15/2014
-- Description:	Purge Appointment Workflow
-- =============================================
CREATE PROCEDURE [WorkQueues].[WorkFlowPurge_Appointments]
AS
BEGIN
	 
	 declare @ErrorCode int
	 
	 BEGIN TRY 
		BEGIN TRANSACTION

		SELECT ID INTO #temp_wfevent_del FROM WFEvent WHERE WFTypeId=3

		SELECT ID INTO #temp_wfactivity_del FROM WFActivity WHERE WFEventId IN (SELECT ID FRO"
dbo,uspCleanTempFrame,SQL_STORED_PROCEDURE,2008-09-08 13:07:23.840,2023-03-19 07:58:56.640,5305,Has Source,513,"-- =============================================
-- Author:		Ahmed Alhosaini
-- Create date: 09/08/2008
-- Description:	Cleaning VST_Frame
-- =============================================
CREATE PROCEDURE [dbo].[uspCleanTempFrame]
(@RESULT AS INT = 0 OUTPUT)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DELETE FROM VST_Frame
	DBCC CHECKIDENT('VST_Frame', RESEED, 0)
	SET @RESULT = '1'
	RETURN @RESU"
dbo,CleanVSTFrameTable,SQL_STORED_PROCEDURE,2015-08-25 23:04:45.153,2023-03-19 07:58:56.637,2763,Has Source,127,"CREATE PROCEDURE [dbo].[CleanVSTFrameTable]
AS
BEGIN
    truncate table VST_Frame
	DBCC CHECKIDENT('VST_Frame', RESEED, 0)	
END"
dbo,xifDeleteInboundBatch,SQL_STORED_PROCEDURE,2008-09-02 20:21:47.580,2023-03-19 07:58:56.633,5311,Has Source,145,"

CREATE PROCEDURE [dbo].[xifDeleteInboundBatch]
@piBatchID int
AS


DELETE VisionStarStatus WHERE XifBatchID = @piBatchID







"
dbo,SaveSSOffice,SQL_STORED_PROCEDURE,2015-09-23 00:09:00.597,2023-03-19 07:58:56.630,2734,Has Source,2178,"-- =============================================  
-- [SaveSSOffice]
-- Description: Save the SSOffice Record
-- Modified By  Date  reason  
-- Ankur P			8/18/2015	SP created
-- EXEC	[dbo].[SaveSSOffice]
--		@SSOfficeID = N'1234567890', @OfficeNum = N'TEST1', @CarrierID = N'VSP', @Login = N'Login', @Password = N'Password', @AcctNum = N'ACCT', @PlanName = N'VSP Plan1', @LabCookie = N'Lab Cookie', @AccessCookie = N'Access Cookie', @SelectedLabId = N'Select', @PhoneCookie = N'Phone cookie', @IsAuto"
dbo,SP_CleanSpexFrame,SQL_STORED_PROCEDURE,2009-08-25 10:59:58.530,2023-03-19 07:58:56.623,4954,Has Source,514,"-- =============================================
-- Author:		Ahmed Alhosaini
-- Create date: 09/08/2008
-- Description:	Cleaning VST_Frame
-- =============================================
CREATE PROCEDURE [dbo].[SP_CleanSpexFrame]
(@RESULT AS INT = 0 OUTPUT)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    truncate table SpexFrame
	DBCC CHECKIDENT('SpexFrame', RESEED, 0)
	SET @RESULT = '1'
	RETURN @R"
dbo,LoadFromSpexFrameToVSTFrame,SQL_STORED_PROCEDURE,2015-08-25 23:04:45.270,2023-03-19 07:58:56.620,2763,Has Source,1071,"CREATE PROCEDURE [dbo].[LoadFromSpexFrameToVSTFrame]
AS 
BEGIN
INSERT INTO [dbo].[VST_Frame]
           (AMeas
		   ,[BMeas]	
		   ,[Bridge]
		   ,[Category]
		   ,[Collection]
           ,[Color]
		   ,[DblMeas]
		   ,[EdMeas]
           ,[Gender]
		   ,[ItemNo]
           ,[LabName]
		   ,[List]
		   ,[Model]
		   ,[OPC]
		   ,[Style]
		   ,Size
		   ,Temple
		   ,Type)
SELECT      
		    SF.A as AMeas
		   ,SF.B as BMeas
		   ,SF.Bridge
		   ,SF.RimType as Category
		   ,SC.SpexCollectionName"
dbo,SP_UpdateSpexCollection,SQL_STORED_PROCEDURE,2009-08-25 11:00:02.983,2023-03-19 07:58:56.617,4954,Has Source,940,"
CREATE PROCEDURE [dbo].[SP_UpdateSpexCollection]
	
AS
BEGIN
	DECLARE @TCollectionID AS int 
    DECLARE @TCollectionName AS varchar(255)
		
	DECLARE TempCursor CURSOR FOR
	SELECT SpexCollection, CollectionID
	FROM [dbo].[SpexCollectionTemp]	

	OPEN TempCursor

	FETCH NEXT FROM TempCursor INTO
	@TCollectionName, @TCollectionID

	WHILE @@FETCH_STATUS = 0
		BEGIN
			--print @TCollectionName
			IF(CHARINDEX('/', @TCollectionName) = 0)
				SET @TCollectionName = @TCollectionName"
dbo,GetSpexControlDetails,SQL_STORED_PROCEDURE,2017-02-25 01:30:17.800,2023-03-19 07:58:56.613,2213,Has Source,967,"CREATE Proc GetSpexControlDetails
@ControlID varchar(50),
@ManufacturerLoaded int,
@CollectionStatus int,
@ManufaturerNotLoaded int,
@FramesLoaded INT,
@MatchSpexCollectionToSpexData bit
as
Begin
IF(@MatchSpexCollectionToSpexData = 1)
	BEGIN
		IF exists(SELECT '*' FROM spexcontrol WHERE id = @ControlID AND status = @ManufaturerNotLoaded)
		BEGIN
			Truncate table SpexManufacturer
			Truncate table SpexFrame
			Truncate table SpexFrameString
			Truncate table SpexCollection
		END"
dbo,UpdateCollectionIDForSpex,SQL_STORED_PROCEDURE,2010-01-29 21:48:05.680,2023-03-19 07:58:56.610,4797,Has Source,629,"

CREATE PROCEDURE [dbo].[UpdateCollectionIDForSpex]
	
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @spexcompanyid AS varchar(4)
	DECLARE @collectionid AS int
	
	DECLARE TempCursor CURSOR FOR
	
	select spexcompanyid, collectionid from spexcollectionold
	
	OPEN TempCursor

	FETCH NEXT FROM TempCursor INTO
	@spexcompanyid, @collectionid

	WHILE @@FETCH_STATUS = 0
		BEGIN			
			Update SpexCollection
			SET CollectionID = @collectionid
			WHERE SpexCompanyID = @spexcompanyid			
			"
dbo,DeleteTempCouponCodes,SQL_STORED_PROCEDURE,2022-12-14 20:49:51.793,2023-03-19 07:58:56.600,95,Has Source,532,"CREATE PROCEDURE [dbo].[DeleteTempCouponCodes] 
	@CompanyID varchar(20),
	@PromotionID int,
	@Coupons varchar(MAX)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	with cte as 
	(SELECT ID as CouponCode
	 from GetStringintable(@Coupons))
    DELETE PromotionCouponCodeTemp 
	FROM PromotionCouponCodeTemp pcct 
	inner join cte on cte.CouponCode = pcct.CouponCode and pcct.CompanyID = @CompanyID and pcct.Prom"
dbo,DeleteOldTempCouponCodes,SQL_STORED_PROCEDURE,2022-12-14 20:49:51.237,2023-03-19 07:58:56.597,95,Has Source,479,"CREATE PROCEDURE [dbo].[DeleteOldTempCouponCodes] 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @maxSeed int;

    DELETE PromotionCouponCodeTemp 
	FROM PromotionCouponCodeTemp 
	WHERE CreatedDateTime > DATEADD(day, -1, GETDATE())
	
	SET @maxSeed = (SELECT ISNULL(MAX(ID),0) FROM PromotionCouponCodeTemp)

	DBCC CHECKIDENT('PromotionCouponCodeTemp', RESEED, @maxSeed)

END"
dbo,DeleteCompanyPromotionTempCouponCodes,SQL_STORED_PROCEDURE,2022-12-14 20:49:50.677,2023-03-19 07:58:56.593,95,Has Source,538,"CREATE PROCEDURE [dbo].[DeleteCompanyPromotionTempCouponCodes] 
	@CompanyID varchar(20),
	@PromotionID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @maxSeed int;

    DELETE PromotionCouponCodeTemp 
	FROM PromotionCouponCodeTemp 
	WHERE companyid=@CompanyID and PromotionID = @PromotionID

	SET @maxSeed = (SELECT isnull(MAX(ID),0) FROM PromotionCouponCodeTemp)

	dbcc checkident('Promotio"
dbo,LoadTempCouponCodes,SQL_STORED_PROCEDURE,2022-12-14 20:49:52.887,2023-03-19 07:58:56.587,95,Has Source,408,"CREATE PROCEDURE [dbo].[LoadTempCouponCodes] 
	@CompanyID varchar(20),
	@PromotionID int,
	@Coupons varchar(MAX)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    INSERT INTO PromotionCouponCodeTemp
	SELECT @CompanyID,@PromotionID,ID as CouponCode, getdate() as createddatetime
from GetStringintable(@Coupons)

END"
dbo,LoadCouponCodesFromTemp,SQL_STORED_PROCEDURE,2022-12-14 20:49:52.343,2023-03-19 07:58:56.583,95,Has Source,455,"Create PROCEDURE [dbo].[LoadCouponCodesFromTemp] 
	@CompanyID varchar(20),
	@PromotionID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    INSERT INTO PromotionCouponCode (CompanyID,PromotionID,CouponCode)
	SELECT CompanyID,PromotionID,CouponCode
	FROM PromotionCouponCodeTemp pcct
	WHERE pcct.CompanyID = @CompanyID and pcct.PromotionID = @PromotionID

END"
dbo,AssignAllPriceListsToOffice,SQL_STORED_PROCEDURE,2016-07-27 00:03:46.060,2023-03-19 07:58:56.577,2426,Has Source,769,"-- =============================================
-- Author:		Chris Reine
-- Create date: 02/15/2016
-- Description:	Assigns all Default Price Lists for the office of a company to that company.
--  Called during importation of new Pearle Office after the office price lists are created.

-- =============================================
CREATE PROCEDURE [dbo].AssignAllPriceListsToOffice
	@OfficeNum varchar(20),
	@CompanyID varchar(20)
AS
	BEGIN
		INSERT INTO [OfficePriceList] ([OfficeNu"
dbo,UpdatePatientCorrespondence,SQL_STORED_PROCEDURE,2017-02-15 00:04:22.043,2023-03-19 07:58:56.573,2223,Has Source,571,"/****** Object:  StoredProcedure [dbo].[UpdatePatientCorrespondence]    Script Date: 12/22/2016 2:58:06 PM ******/

Create PROCEDURE [dbo].[UpdatePatientCorrespondence]
@correspondenceName varchar(55),
@patientIdList varchar(max),
@recallTypeId int,
@correspondencePrtDate datetime
AS
BEGIN

 SET NOCOUNT ON;

	UPDATE PatientCorrespondence SET CorrespondenceName = @correspondenceName  
	WHERE PatientID in(SELECT * FROM fn_GetIDsFromList(@patientIdList,',')) AND
	RecallTypeNum = @recallTypeId AND
	"
dbo,CopyOfficeLabData,SQL_STORED_PROCEDURE,2017-08-09 00:47:02.100,2023-03-19 07:58:56.527,2048,Has Source,4542,"-- IF EXISTS ( SELECT * FROM sysobjects WHERE  id = object_id(N'[dbo].[CopyOfficeLabData]') and OBJECTPROPERTY(id, N'IsProcedure') = 1 ) BEGIN DROP PROCEDURE [dbo].[CopyOfficeLabData] END
CREATE PROCEDURE [dbo].[CopyOfficeLabData]
@FromOfficeNum VARCHAR (100),
@ToOfficeNum VARCHAR (100),
@WithOverlay BIT
AS
BEGIN
	-- Internal variables BEGIN ---------------------------------------------------------------------------------
	DECLARE @totalChange int = 0;
	DECLARE @officenumber VARCHAR (100) = @Fro"
dbo,GetOfficeHours,SQL_STORED_PROCEDURE,2014-03-10 00:08:57.993,2023-03-19 07:58:56.523,3296,Has Source,222,"
CREATE PROCEDURE [dbo].[GetOfficeHours]
	@OfficeNum varchar(8)
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT ID,
       OfficeNum,
       [DAY],
       OpenFrom,
       OpenTo
	FROM   OfficeHours
	WHERE  OfficeNum = @OfficeNum 
END"
dbo,GetOfficeHolidays,SQL_STORED_PROCEDURE,2014-03-10 00:08:57.983,2023-03-19 07:58:56.520,3296,Has Source,303,"
CREATE PROCEDURE [dbo].[GetOfficeHolidays]
    @HolidayDates DateTime,
	@OfficeNum varchar(20)
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT ID,
		   OfficeNum,
		   HolidayDate,
		   [Description]
	FROM   OfficeHoliday
	WHERE  HolidayDate = @HolidayDates
		   and OfficeNum = @OfficeNum

END

"
dbo,Scheduler_AppointmentNote_Save,SQL_STORED_PROCEDURE,2022-05-10 09:30:58.043,2023-03-19 07:58:56.433,313,Has Source,1208,"CREATE PROCEDURE [Scheduler_AppointmentNote_Save]
	@ID INT = NULL
	,@noteDate DATETIME = NULL
	,@detail NVARCHAR(MAX) = NULL
	,@employeeID INT = NULL
	,@customerID INT = NULL
	,@entityTypeID INT = NULL
	,@entityID INT = NULL
	,@noteTypeID INT = NULL
	,@isUrgent BIT = NULL
	,@isFollowup BIT = NULL
	,@noteUid VARCHAR(36)
	,@noteID INT OUT
AS
BEGIN
	SET NOCOUNT ON;

	IF @ID IS NULL
	BEGIN		
		INSERT INTO dbo.Notes
		(
			[noteDate]
			,[detail]
			,[employeeID]
			,[customer"
dbo,GetKPIProductivityCalcByOffice,SQL_STORED_PROCEDURE,2009-04-23 09:56:47.147,2023-03-19 07:58:56.423,5078,Has Source,2256,"CREATE PROCEDURE [dbo].[GetKPIProductivityCalcByOffice]

@OfficeNum varchar(10),
@Period int,
@YearNo int

AS
BEGIN
	SET NOCOUNT ON;


select Row_number() over(order by k.ID) as ID, k.ID as kpiid ,null as Employee
 , case when sum(ks.quantity) is null then 0 else sum(ks.quantity) end as Quantity
 , case when sum(ks.quantitypercentage) is null then 0 else sum(ks.quantitypercentage) end as QuantityPercentage ,
  case when ks.officenum is null then @officenum else ks.officenum end as "
dbo,GetKPIProductivityCalcByOfficeByEmployeeDaily,SQL_STORED_PROCEDURE,2016-10-26 00:03:32.890,2023-03-19 07:58:56.413,2335,Has Source,4040,"CREATE PROCEDURE [dbo].[GetKPIProductivityCalcByOfficeByEmployeeDaily]

@FromDate varchar(20),
@ToDate varchar(20),
@Employee int,
@LYFromDate varchar(20),
@LYToDate varchar(20),
@OfficeNum varchar(10)
AS
BEGIN
	SET NOCOUNT ON;

select Row_number() over(order by k.ID) as ID, k.ID as KPIID , case when ks.Employee is null then @employee else ks.employee end as Employee
 , case when Sum(ks.quantity) is null then 0 else sum(ks.quantity) end as Quantity ,
 case when sum(isnull(ks.Amount,0))+SUM(ISNUL"
dbo,GetKPIProductivityCalcByEmployeeDaily,SQL_STORED_PROCEDURE,2009-08-25 10:59:57.420,2023-03-19 07:58:56.410,4954,Has Source,3641,"CREATE PROCEDURE [dbo].[GetKPIProductivityCalcByEmployeeDaily]

@FromDate varchar(20),
@ToDate varchar(20),
@Employee int,
@LYFromDate varchar(20),
@LYToDate varchar(20)
AS
BEGIN
	SET NOCOUNT ON;

select Row_number() over(order by k.ID) as ID, k.ID as KPIID , case when ks.Employee is null then @employee else ks.employee end as Employee
 , case when Sum(ks.quantity) is null then 0 else sum(ks.quantity) end as Quantity ,
 case when sum(isnull(ks.Amount,0))+SUM(ISNULL(ks.Insurance,0)) "
dbo,GetKPIProductivityCalcByEmployee,SQL_STORED_PROCEDURE,2009-04-23 09:58:21.230,2023-03-19 07:58:56.403,5078,Has Source,2222,"CREATE PROCEDURE [dbo].[GetKPIProductivityCalcByEmployee]

@Period int,
@YearNo int,
@Employee int

AS
BEGIN
	SET NOCOUNT ON;

select Row_number() over(order by k.ID) as ID, k.ID as KPIID , case when ks.Employee is null then @employee else ks.employee end as Employee
 , case when Sum(ks.quantity) is null then 0 else sum(ks.quantity) end as Quantity
 , case when sum(ks.quantitypercentage) is null then 0 else sum(ks.quantitypercentage) end as QuantityPercentage ,
  null as OfficeNum,"
dbo,GetKPIProductivityCalcByOfficeDaily,SQL_STORED_PROCEDURE,2014-03-10 00:08:57.970,2023-03-19 07:58:56.400,3296,Has Source,3797,"

CREATE PROCEDURE [dbo].[GetKPIProductivityCalcByOfficeDaily]


@FromDate varchar(20),
@ToDate varchar(20),
@OfficeNum varchar(10),
@LYFromDate varchar(20),
@LYToDate varchar(20)

AS
BEGIN
	SET NOCOUNT ON;


select convert(varchar,Row_number() over(order by k.ID))+ '-'+ @OfficeNum as ID, k.ID as kpiid ,null as Employee
 , case when sum(ks.quantity) is null then 0 else sum(ks.quantity) end as Quantity
 
 , case when sum(isnull(ks.Amount,0))+SUM(ISNULL(ks.Insurance,0)) is null "
dbo,GetKPIProductivityCalcByALLOfficeDaily,SQL_STORED_PROCEDURE,2009-08-25 10:59:57.780,2023-03-19 07:58:56.387,4954,Has Source,3002,"
CREATE PROCEDURE [dbo].[GetKPIProductivityCalcByALLOfficeDaily]

@FromDate varchar(20),
@ToDate varchar(20),
@LYFromDate varchar(20),
@LYToDate varchar(20)

AS
BEGIN
	SET NOCOUNT ON;

select Row_number() over(order by k.ID) as ID, k.ID as kpiid ,null as Employee
 , case when sum(ks.quantity) is null then 0 else sum(ks.quantity) end as Quantity
 ,case when sum(isnull(ks.Amount,0))+SUM(ISNULL(ks.Insurance,0)) is null then 0 else sum(isnull(ks.Amount,0))+SUM(ISNULL(ks.Insurance,0)) end as NetSale
"
dbo,GetKPIProductivityCalcByALLOffice,SQL_STORED_PROCEDURE,2009-04-23 17:20:17.457,2023-03-19 07:58:56.380,5078,Has Source,1914,"CREATE PROCEDURE [dbo].[GetKPIProductivityCalcByALLOffice]

@Period int,
@YearNo int

AS
BEGIN
	SET NOCOUNT ON;


select Row_number() over(order by k.ID) as ID, k.ID as kpiid ,null as Employee
 , case when sum(ks.quantity) is null then 0 else sum(ks.quantity) end as Quantity
 , case when sum(ks.quantitypercentage) is null then 0 else sum(ks.quantitypercentage) end as QuantityPercentage ,
  null as OfficeNum,

(select (case when(sum(quantity)) is null then 0 else sum(quantity) end)"
dbo,CopyItemPrices,SQL_STORED_PROCEDURE,2016-07-27 00:03:46.067,2023-03-19 07:58:56.373,2426,Has Source,1419,"-- =============================================
-- Author:		Chris Reine
-- Create date: 02/15/2016
-- Description:	Copies all ItemsPrice entries from a Source PriceList ID to a Target PriceList ID
--  Called during importation of new Pearle Office.
-- =============================================

CREATE PROCEDURE [dbo].CopyItemPrices
	@SourcePriceList int,
	@TargetPriceList int,
	@WithOverlay int = 0
AS
	BEGIN

		INSERT INTO ItemPrice (ItemID, PriceTypeID, Price ,PriceListID, SvP"
dbo,SaveItemPrice_Extension,SQL_STORED_PROCEDURE,2014-02-21 03:37:54.257,2023-03-19 07:58:56.367,3313,Has Source,929,"
CREATE PROC [dbo].[SaveItemPrice_Extension]
	@ItemID			INT, 
	@PriceTypeID	INT, 
	@Price			DECIMAL(8,2),
	@PriceListID	INT,
	@SvPrice	    DECIMAL(8,2),
	@BfPrice	    DECIMAL(8,2),
	@TfPrice 	   DECIMAL(8,2),
	@PgPrice	    DECIMAL(8,2)
AS
BEGIN
	SET NOCOUNT ON;
	
	IF EXISTS
	(
		SELECT	* 
		FROM	ItemPrice
		WHERE	ItemID		= @ItemID
		AND		PriceTypeID = @PriceTypeID
		AND		PriceListID = @PriceListID
	)
	BEGIN
		UPDATE	ItemPrice
		SET		Price		= @Price,
		        SvPrice		= "
dbo,Scheduler_ScheduleTemplateServiceGroupServiceItems_Get,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.257,2023-03-19 07:58:56.350,1615,Has Source,307,"CREATE PROCEDURE [Scheduler_ScheduleTemplateServiceGroupServiceItems_Get] 
	@groupId int
AS
	SELECT 
		appointmentTypeId AS prd_no
		, ItemNum AS prd_style_name
	FROM 
		AppSch_SchedulerTemplate_ServiceGroupItems
		JOIN Item WITH (NOLOCK) ON appointmentTypeId = ID
	WHERE
		service_GroupID=@groupId
	
RETURN"
dbo,Scheduler_ServiceGroupServiceItems_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.743,2023-03-19 07:58:56.347,3296,Has Source,772,"CREATE PROCEDURE [Scheduler_ServiceGroupServiceItems_Get] 
	(
	@groupId int
	)
-- =============================================
-- File Name:	Scheduler_ServiceGroupServiceItems_Get.sql
-- Description:	This Stored Procedure deletes all service items from a service group.
-- Author:	Ali atabek
-- Example: exec [Scheduler_ServiceGroupServiceItems_Get] 
-- History:	Date		Initials	Description
--			04/01/2010	AA			Created
--			03/22/2012	AA			WebScheduler adaptation
-- ===================="
dbo,CopyInsuranceRejectionReasons,SQL_STORED_PROCEDURE,2018-08-23 15:34:10.803,2023-03-19 07:58:56.223,1669,Has Source,1269,"CREATE PROCEDURE [dbo].[CopyInsuranceRejectionReasons]
		@SourceRejectionReasonIDList VARCHAR(MAX),
		@SourceCompany VARCHAR(20),
		@DestinationCompanyIDList VARCHAR(MAX),
		@DestinationCarrier VARCHAR(50)		
AS
BEGIN
	MERGE InsRejectionReason AS _target
	USING (
			SELECT a.ID, a.CarrierID, a.CarrierRejectionReason, a.[Description], a.ReasonCodeID, a.CompanyID, a.IsActive
					, _comp.ID AS destinationCompanyId
			FROM fn_GetCompanyIDsFromList(@DestinationCompanyIDList) _comp
			JOIN"
dbo,DeleteEdiRow,SQL_STORED_PROCEDURE,2015-11-18 00:15:10.680,2023-03-19 07:58:56.210,2678,Has Source,266,"CREATE PROC [dbo].[DeleteEdiRow]
    @CompanyID  VARCHAR(8),   
    @CarrierID    VARCHAR(50),
    @PayerID    VARCHAR(50) 
 
AS
BEGIN
	SET NOCOUNT ON;
	DELETE FROM InsEDI837 WHERE CompanyID = @CompanyID AND CarrierID = @CarrierID AND PayerID = @PayerID
END"
dbo,UpdateGLSummary,SQL_STORED_PROCEDURE,2016-07-27 00:03:46.163,2023-03-19 07:58:56.153,2426,Has Source,548,"CREATE PROCEDURE [dbo].[UpdateGLSummary]
@MonthNum int,
@YearNum int,
@Source int,
@CloseId int
AS
BEGIN
	INSERT INTO [dbo].[GLSummary]
		([YearNum]
		,[MonthNum]
		,[Source]
		,[OfficeNum]
		,[AccountNum]
		,[Amount]
		,[GLCenter]
		,[CloseID])
	Select @YearNum,
		   @MonthNum,
		   Source,
		   Officenum,
		   accountnum,
		   Sum(amount),
		   glcenter,
		   @CloseId
	From GLDetail
	GROUP BY source, 
         officenum, 
         accountnum, 
         closeid, 
         glcenter 
	HAVING   so"
dbo,uspUpdateFramesNew,SQL_STORED_PROCEDURE,2008-11-20 17:05:19.720,2023-03-19 07:58:56.143,5232,Has Source,10794,"-- =============================================
-- Author:		Ahmed Alhosaini
-- Create date: 09/08/2008
-- Description:	Updating Frames
-- =============================================
CREATE PROCEDURE [dbo].[uspUpdateFramesNew]
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @TID AS int
	DECLARE @TStyle AS varchar(50) 
	DECLARE @TSize AS varchar(50)
	DECLARE @TTemple AS varchar(50)
	DECL"
dbo,UpdateItemName,SQL_STORED_PROCEDURE,2009-08-25 10:59:58.077,2023-03-19 07:58:56.133,4954,Has Source,1108,"
CREATE PROCEDURE [dbo].[UpdateItemName]
	
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @Style AS varchar(50) 
    DECLARE @Color AS varchar(50) 
	DECLARE @eye AS int 
    DECLARE @bridge AS int
	DECLARE @temple AS int 
	DECLARE @itemID AS int
	
	DECLARE TempCursor CURSOR FOR
	select i.id, fs.Description,itemf.Color, itemf.eye, itemf.bridge, itemf.temple  from Item i Inner join ItemFrame itemf on i.id = itemf.ItemID 
	inner join FrameStyle fs on fs.id = itemf.framestyleid

	OPEN TempCurso"
dbo,UpdateFrameEdgeTypeForSpexFrame,SQL_STORED_PROCEDURE,2010-03-19 16:32:01.947,2023-03-19 07:58:56.127,4748,Has Source,7867,"

--select * from vst_frame v where v.itemno not in (select itemnum from item)


-- =============================================
-- Author:		Ahmed Alhosaini
-- Create date: 09/08/2008
-- Description:	Updating Frames
-- =============================================
Create PROCEDURE [dbo].[UpdateFrameEdgeTypeForSpexFrame]
(@RESULT AS INT = 0 OUTPUT)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    "
dbo,SetSpexFrameItems,SQL_STORED_PROCEDURE,2013-02-20 00:01:03.267,2023-03-19 07:58:56.120,3679,Has Source,1703,"
CREATE proc [SetSpexFrameItems]
@SpexCollectionId int,
@CollectionStatus varchar(10),
@LoadedFrames varchar(10),
@SpexControlId int


as
Begin

        Update SpexFrame set PriceChangeinItemFrame = 0 
        from   SpexFrame sf 
        inner join ItemFrame it on sf.FPC = it.SpexFPC 
        where it.ListPrice = sf.CompletePrice 
        and sf.SpexCollectionID = @SpexCollectionId
        
        Update SpexFrame set NewItemFrame = 0 
        from SpexFrame sf 
        left"
dbo,SP_UpdateSpexFrames,SQL_STORED_PROCEDURE,2009-08-25 10:59:59.310,2023-03-19 07:58:56.110,4954,Has Source,12839,"
--select * from vst_frame v where v.itemno not in (select itemnum from item)


-- =============================================
-- Author:		Ahmed Alhosaini
-- Create date: 09/08/2008
-- Description:	Updating Frames
-- =============================================
CREATE PROCEDURE [dbo].[SP_UpdateSpexFrames]
(@RESULT AS INT = 0 OUTPUT)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @TID A"
dbo,AddFeatureUUID,SQL_STORED_PROCEDURE,2020-05-18 18:08:32.270,2023-03-19 07:58:56.073,1035,Has Source,1877,"-- =============================================  
-- [AddFeatureUUID]
-- Description: Save an entry in the FeatureUUID table if it's not already there.
-- Created: Chris Reine 2020-04-02
-- usage: EXEC	[dbo].[AddFeatureUUID]  @FeatureUUID = N'A8B6038A-0BF6-468E-846F-A11AE3FEE738', @FeatureType = N'Standard', @Name = N'Promotions', @Description = 'Sales Promotions Properties' , @StartDate = '2020-01-01', @EndDate = '2120-12-31',@DefaultPropertiesJson   = N''
-- Note: @FeatureType, @StartDate, @E"
dbo,GetDayClose,SQL_STORED_PROCEDURE,2014-03-10 00:08:57.940,2023-03-19 07:58:55.873,3296,Has Source,758,"
CREATE PROCEDURE [dbo].[GetDayClose]
    @TransDates DateTime,
	@OfficeNum varchar(20)
AS
BEGIN
	SET NOCOUNT ON;
	
SELECT DayCloseId,
       OfficeNum,
       TransDate,
       EmployeeId,
       CloseTime,
       Sales,
       Payments,
       PrePaid,
       Receivable,
       PayOuts,
       PatientAR,
       CashDeposit,
       CreditCardDeposit,
       ReviewEmployeeID,
       ReviewDate,
       GiftCertificate,
       MonthClosedID,
       Tax,
       TransmitDate,
       isItemSaleCalc,
"
dbo,UndoDayClose,SQL_STORED_PROCEDURE,2014-03-10 00:09:08.060,2023-03-19 07:58:55.837,3296,Has Source,1814,"CREATE PROCEDURE [dbo].[UndoDayClose] 
	@DayCloseDate DATETIME, 
	@OfficeNum VARCHAR(20)
AS
BEGIN
	DECLARE @Dayclose AS INT	
	DECLARE @TranName VARCHAR(20);
	SELECT @TranName = 'DaycloseTransaction';

	IF (SELECT count(*) FROM Dayclose WHERE transdate >= @DayCloseDate AND transdate < dateadd(day, 1, @DayCloseDate) AND officenum = @OfficeNum) > 0
	BEGIN
		SELECT @Dayclose = daycloseid FROM dayclose WHERE transdate >= @DayCloseDate AND transdate < DATEADD(day, 1, @DayCloseDate) AND officenum = @Of"
dbo,Clean_CSVAccessory,SQL_STORED_PROCEDURE,2018-08-23 15:34:10.757,2023-03-19 07:58:55.823,1669,Has Source,309,"CREATE PROCEDURE [dbo].[Clean_CSVAccessory]
(@RESULT AS INT = 0 OUTPUT)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DELETE FROM CSVAccessory
	DBCC CHECKIDENT('CSVAccessory', RESEED, 0)
	SET @RESULT = '1'
	RETURN @RESULT
END"
dbo,UpdateCompanyPackageDescription,SQL_STORED_PROCEDURE,2010-04-21 10:03:11.650,2023-03-19 07:58:55.807,4715,Has Source,1036,"
CREATE PROCEDURE [dbo].[UpdateCompanyPackageDescription]
	
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @Description AS varchar(150) 
	DECLARE @PackageID AS int
	DECLARE @CompanyID AS varchar(8) 
	
	DECLARE TempCursor CURSOR FOR	
	select p.id,description,CompanyID from package p
	inner join  companyPackageMapping cpm on p.id = cpm.packageid --and CompanyID = 'AL999'

	OPEN TempCursor

	FETCH NEXT FROM TempCursor INTO
	@PackageID,@Description,@CompanyID

	WHILE @@FETCH_STATUS = 0
		BEG"
dbo,SP_AssignOfficesToInsSchedules,SQL_STORED_PROCEDURE,2021-12-16 13:32:41.700,2023-03-19 07:58:55.760,458,Has Source,2918,"CREATE PROCEDURE [dbo].[SP_AssignOfficesToInsSchedules] 
    @companyInsScheduleIds varchar(max),
    @officeIds varchar(max),
	@userId int
AS
Begin

-- declare variables used in cursor
DECLARE @startDate date;
DECLARE @endDate date;
DECLARE @planId int;
DECLARE @officeNum varchar(8);
DECLARE @versionId int;
DECLARE @companyId varchar;
DECLARE @numberOfRecordsInserted int;
select @numberOfRecordsInserted=0;
DECLARE @compnayInScheduleIdTable TABLE
(
RowId int, 
 CompanyInsScheduleId int
)
DECLARE"
dbo,Lookups_Accesories,SQL_STORED_PROCEDURE,2021-04-23 20:42:39.683,2023-03-19 07:58:55.723,695,Has Source,4499,"/****** Object:  StoredProcedure [dbo].[Lookups_Accesories]    Script Date: 4/27/2021 9:41:27 AM ******/
-- =============================================
-- Author:		<Author,,Victor Samson>
-- Create date: <Create Date,,04/12/2021>
-- Description:	<Description,,Accesories Lookup>
-- =============================================
CREATE PROCEDURE [dbo].[Lookups_Accesories]	
	@SearchString varchar(1000),
	@CompanyId varchar(50),
	@OfficeNum varchar(50),
	@pageNr int,
	@pageSz int,
	@Max"
dbo,GetCompanyGLExportIntacct,SQL_STORED_PROCEDURE,2017-05-17 00:04:03.833,2023-03-19 07:58:55.710,2132,Has Source,3606,"CREATE PROCEDURE [dbo].[GetCompanyGLExportIntacct] 
@CompanyId as varchar(20),
@OfficeNum as varchar(max),
@Source as Integer,
@MonthYear as nvarchar(20),
@MonthNum as nvarchar(20)

AS
BEGIN

Declare 
@JOURNAL as varchar(20)='ALJ',
@DESCRIPTION as varchar(20)='Historical Entry for',
@LOCATION_ID as varchar(20),  
@MEMO as varchar(20),
@GL_SPECIALIST as varchar(20)='Acuity Import',
@Month smallint,
@CloseID as int;

Set @LOCATION_ID =  (select top 1 CompanyName from companyInfo where Id = @Compan"
dbo,Lookups_ContactLenses,SQL_STORED_PROCEDURE,2021-09-13 14:33:01.280,2023-03-19 07:58:55.697,552,Has Source,13645,"/****** Object:  StoredProcedure [dbo].[Lookups_ContactLenses]    Script Date: 4/27/2021 10:04:28 AM ******/
-- =============================================
-- Author:		<Author,,Victor Samson>
-- Create date: <Create Date,,04/12/2021>
-- Description:	<Description,,Contat Lenses Lookup>
-- =============================================
CREATE PROCEDURE [dbo].[Lookups_ContactLenses]	
	@SearchString varchar(1000),
	@Suppliers varchar(max),
	@Categories varchar(1),
	@Manufacturers varchar("
dbo,GetCompanyGLExportDataByGLInterface,SQL_STORED_PROCEDURE,2017-05-17 00:04:03.830,2023-03-19 07:58:55.667,2132,Has Source,475,"CREATE PROCEDURE [dbo].[GetCompanyGLExportDataByGLInterface]
@CompanyId as varchar(20),
@OfficeNum as varchar(max),
@Source as Integer,
@MonthYear as nvarchar(20),
@MonthNum as nvarchar(20),
@GLInterfaceID as int
AS
BEGIN
	declare @procName as varchar(200)
	set @procName = (select top 1 ProcedureName from CompanyGLExportFormatMapping where CompanyID = @CompanyId and GLInterfaceID = @GLInterfaceID)
	execute @procName @CompanyId,@OfficeNum,@Source,@MonthYear,@MonthNum

END"
dbo,SpexFrame_CleanupScript,SQL_STORED_PROCEDURE,2013-02-20 00:01:03.953,2023-03-19 07:58:55.660,3679,Has Source,8727,"


CREATE proc [dbo].[SpexFrame_CleanupScript] 
as
Begin
	declare @SpexCOllecionID varchar(50)
	
	Select * into SpexCollectionbak_SpexFrametest from SpexCollection
	select * into FrameCOllectionbak_SpexFrametest from FrameCOllection
	select * into FrameStylebak_SpexFrametest from FrameStyle
	select * into SpexFramebak_SpexFrametest from SpexFrame
	
	if((select count(*) from companyinfo) > 0)
	Begin
		update SpexCollection set CollectionID=null where ID in (194, 446, 447, 592) 
	E"
dbo,Set_CompanyCOllectionmapping,SQL_STORED_PROCEDURE,2013-02-20 00:01:03.007,2023-03-19 07:58:55.557,3679,Has Source,3085,"


CREATE proc [dbo].[Set_CompanyCOllectionmapping] 
as
Begin

select * into CompanyCollectionMappingbak_spexframetest from CompanyCollectionMapping
declare @FrameCOllecionID varchar(50)           
DECLARE CollectionIDdetail CURSOR FOR
select  id from FrameCollectionbak_SpexFrametest --where id in (15,101) 
OPEN CollectionIDdetail
FETCH NEXT FROM CollectionIDdetail
INTO @FrameCOllecionID


WHILE @@FETCH_STATUS = 0
BEGIN  
     --, @CompanyID varchar(20)    
      declare  @Com"
dbo,AddCompanyCarrierPlanAllowance,SQL_STORED_PROCEDURE,2019-10-09 00:13:49.823,2023-03-19 07:58:55.550,1257,Has Source,4484,"CREATE PROCEDURE [dbo].[AddCompanyCarrierPlanAllowance]
@companyID VARCHAR(20),
@CarrierId VARCHAR(50)
AS
BEGIN
SET NOCOUNT ON;  
  
	-- ACLE-165 Make the Spectera contact lens coverage allowance configurable by clients
	-- New table was added to get the allowance and benefits and script is to populate the data.

	IF NOT EXISTS(SELECT * FROM CompanyCarrierPlanAllowance WHERE CompanyId = @companyID AND CarrierId= @CarrierId)
	BEGIN
		
		BEGIN TRANSACTION [CompanyCarrierPlanAllowance]
		BEGIN TRY
"
dbo,GetContactLensDetail_Extension,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.780,2023-03-19 07:58:55.513,3296,Has Source,992,"CREATE PROC [dbo].GetContactLensDetail_Extension
	@ItemId        INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT icl.ItemID AS ItemId, icl.CLStyleID AS StyleId, co.[Description] AS Color
		, CASE WHEN cls.IsHard = 1 THEN 'Hard' ELSE 'Soft' END AS LensCategory
		, lu.[Description] AS WearType, cls.IsDiagnostic, cls.SupplyQty AS Quantity, UnitPerBox  AS UnitsPerBox
		, SphereMin, SphereMax, SphereStep, CylinderMin, CylinderMax, CylinderStep, AxisMin, AxisMax, AxisStep, AddMin, AddMax, AddStep
		, Sphere2Mi"
dbo,Scheduler_CodesLookup_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.053,2023-03-19 07:58:55.433,3296,Has Source,566,"
-- =============================================
-- File Name:	Scheduler_CodesLookup_Get.sql
-- Description:	Gets all guarantor candidates to populate a list of guarantor objects.
-- Author:	Ali Atabek
-- Example: Scheduler_CodesLookup_Get
-- History:	Date		Initials	Description
--			02/12/2010	AA			Created
-- =============================================

CREATE PROCEDURE [Scheduler_CodesLookup_Get] 

	@category int

AS
BEGIN
	SET NOCOUNT ON
		
	SELECT 
	id, [value]
	
	FROM"
dbo,Scheduler_CodeLookupItemsList_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.040,2023-03-19 07:58:55.360,3296,Has Source,580,"
-- =============================================
-- Author:		Joel Deister
-- Create date: 02/13/2010
-- Description:	Gets the lookup items for the selected CodeID.
-- =============================================

CREATE PROCEDURE [Scheduler_CodeLookupItemsList_Get]
	@CodeCategory INT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		C.[type],
		C.[id],
		C.[value], 
		NULL as code_default,
		NULL as user_code, 
		NULL as system_code 
	FROM 
		dbo.CatElementLU C WITH (NOLOCK)
	"
dbo,CatalogCleanup_AllDuplicateFrameCollection,SQL_STORED_PROCEDURE,2019-06-20 13:20:27.250,2023-03-19 07:58:55.337,1368,Has Source,20867,"CREATE PROCEDURE [dbo].[CatalogCleanup_AllDuplicateFrameCollection]
	@SessionId uniqueidentifier = null, -- Session id to link runs
	@SkipDuplicateLoad BIT = 0, -- Skip Duplicate frame load in CatalogCleanup_DuplicateUPC
	@RunCleanup BIT = 0 -- Run Actual Cleanup for flagged records
AS
BEGIN
	DECLARE @DateCleanupPerformed AS DATETIME = GETDATE();
	DECLARE @BrandName AS VARCHAR(100) 
	DECLARE @CollectionName AS VARCHAR(100) 
	DECLARE @ManufacturerName AS VARCHAR(120) 
	DECLARE @VendorName AS VARC"
dbo,GetOutstandingBalance,SQL_STORED_PROCEDURE,2017-04-13 00:40:54.720,2023-03-19 07:58:55.290,2166,Has Source,1348,"Create PROCEDURE [dbo].GetOutstandingBalance
	
	@LineItemId 	int,
	@OrderId int,
	@Transtypeid	varchar(10)
	

AS
BEGIN	
declare @Transamout decimal(18,2), @Adjustmentamount decimal(18,2), @NewTransamount decimal(18,2), @Transid int, @TransTypeIdMax int, @AddAdjustmentamount decimal(18,2)

select @Transid = max(TransId)  from billingtransaction where OrderId = @OrderId  and lineitemid = @LineItemId and transtypeid in (select id from dbo.GetStringintable(@Transtypeid)	)
select @TransTypeIdMax = tr"
dbo,UpdateMonthlyCloseBillingSource,SQL_STORED_PROCEDURE,2014-03-10 00:08:09.247,2023-03-19 07:58:55.287,3296,Has Source,489,"
Create PROCEDURE [dbo].[UpdateMonthlyCloseBillingSource]
@Closeid AS int	
AS

BEGIN


if (@Closeid <> 0)
BEGIN
	update MonthCloseControl set Status=1 where ID =@Closeid 
	delete GLDetail where closeid =@Closeid
	delete GLSummary where closeid =@Closeid
	------just for billing source run below query
	-----Billing sourceID is 3 and you can determine the source from monthclosecontrol table
	update BillingTransaction set closeid = null where CloseID =@Closeid
END
END

"
dbo,DoesInsCheckModified,SQL_STORED_PROCEDURE,2018-08-23 15:34:10.880,2023-03-19 07:58:55.273,1669,Has Source,1002,"
CREATE PROCEDURE [dbo].[DoesInsCheckModified]
	@PaymentId INT,
	@PaymentNumber VARCHAR(50),
	@PaymentDate DATE,
	@DepositDate DATE,
	@Amount DECIMAL(18,2),
	@OutstandingAmount DECIMAL(18,2),
	@SectionTotal DECIMAL(18,2)
	
	AS
		BEGIN
				DECLARE @ExpectedSectionTotal AS DECIMAL(18,2)
				DECLARE @Result BIT

				BEGIN
						SET @ExpectedSectionTotal = (SELECT sum(SectionTotal) from BillingPaymentSection WHERE PaymentId = @PaymentId)
				END

				BEGIN
						IF NOT EXISTS(
									SELECT * from"
dbo,GetOutStandingReceivableforClaim,SQL_STORED_PROCEDURE,2017-04-13 00:40:54.727,2023-03-19 07:58:55.257,2166,Has Source,594,"Create PROCEDURE [dbo].[GetOutStandingReceivableforClaim]

@Claimid int,
@LineItemId int
AS
BEGIN


;WITH CTE AS (
		SELECT 
		
		 distinct bt.LineItemId  ,rownum = RANK() OVER (partition by bt.lineitemid ORDER BY bt.transid desc),TransId ,PATAR, insar,TransTypeId             
		FROM BillingTransaction bt
		inner join BillingClaimLineItem li on bt.lineitemId = li.lineitemId and li.ClaimId = @Claimid
		
		)	
		
		select isnull(sum(INSAR),0) as InsAR,isnull(sum(PATAR),0) as PatAR  from cte  where "
dbo,GetPaidAmountByClaimId,SQL_STORED_PROCEDURE,2017-04-13 00:40:54.733,2023-03-19 07:58:55.250,2166,Has Source,1204,"
Create PROCEDURE[dbo].[GetPaidAmountByClaimId]	
    @ClaimId        INT,
    @Mode			INT --0-total paid, 1- carrierpaid, 2-patientpaid
   
    
AS
BEGIN
	SET NOCOUNT ON;
	
 
 WITH CTE AS (
 
            
          SELECT
          CASE WHEN @Mode = 0 THEN   --Total Paid
          (
		CASE WHEN BT.TRANSTYPEID = 2 THEN BT.INSDELTAAR * (-1)
		     WHEN BT.TRANSTYPEID = 3 THEN BT.PATDELTAAR * (-1)
		     WHEN BT.TRANSTYPEID = 11 THEN (BT.INSDELTAAR + BT.PATDELTAAR) * (-1) END
		"
dbo,WorkFlowPurge_Claims,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.467,2023-03-19 07:58:55.237,3296,Has Source,1692,"
-- =============================================
-- Author:		Sam Callejo and Kris Jornlin
-- Create date: 01/30/2013
-- Description:	Gets only providers for listbox.
-- =============================================

CREATE PROCEDURE [dbo].[WorkFlowPurge_Claims]  
	@ServiceDate datetime
AS  
BEGIN  
	 	
	---------- Sanity Check : delete all existing reords in table before proceeding
	delete from temp_PurgeWorkFlowInfo
	---------------------------------------------------------------"
WorkQueues,WorkFlowPurge_Claims,SQL_STORED_PROCEDURE,2014-03-10 00:08:58.297,2023-03-19 07:58:55.230,3296,Has Source,6724,"
-- =============================================
-- Author: Sam Callejo and Kris Jornlin
-- Create date: 01/30/2013
-- Description: Purge workflow claim data
-- =============================================

CREATE PROCEDURE [WorkQueues].[WorkFlowPurge_Claims]  
        @ServiceDate datetime,
        @WFClaimsTypeId int
AS  
BEGIN  

        declare @CurrentDate DateTime
        set @CurrentDate = GETDATE()

        declare @DateYearAgo DateTime
        set @DateYearAgo = DATEA"
WorkQueues,CalculateOpticsDelta,SQL_STORED_PROCEDURE,2014-10-13 20:23:28.687,2023-03-19 07:58:54.867,3079,Has Source,18790,"
/******************************************************************************
                File:        CalculateOpticsDelta.proc.sql
                Name: CalculateOpticsDelta

                Desc:     Stored procedure to calculate the changes for Optics data for the a given batch

                Auth:     John Kang
                Date:     08/12/2013

                Help:     <best practice/guidance URLs for Tables>
                
                NOTE:   This SP will co"
dbo,Scheduler_TemplateDetailById_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.993,2023-03-19 07:58:54.783,3296,Has Source,414,"

CREATE PROCEDURE [Scheduler_TemplateDetailById_Get]
	@TemptItemID INT	
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		T.[TemptItemID]
		,T.[temptID]
		,T.[tempt_Start_Time]
		,T.[tempt_End_Time]
		,T.[tempt_DayofWeek]
		,T.[tempt_Duration]
		,T.[tempt_Interval]
		,T.[tempt_Selected]
	FROM
		Appsch_Service_TemplateDetail T WITH (NOLOCK)
	WHERE
		T.[TemptItemID] = @TemptItemID		

	RETURN;

END

"
dbo,Scheduler_TemplatesDetail_Save,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.090,2023-03-19 07:58:54.780,3296,Has Source,1355,"-- =============================================
-- Author:		M. Nabeel
-- Create date: 03/24/2010
-- Description:	Saves the detail for a particular Template
-- =============================================

CREATE PROCEDURE [Scheduler_TemplatesDetail_Save]
	@temptID INT
	,@tempt_DayofWeek INT
	,@tempt_Start_Time NVARCHAR(20)
	,@tempt_End_Time NVARCHAR(20)
	,@tempt_Duration INT
	,@tempt_Interval INT
	,@tempt_Selected BIT	
	
AS
BEGIN
	SET NOCOUNT ON;
	SELECT 
		[TemptItemID] 
	"
dbo,Scheduler_TemplatesDetail_Del,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.060,2023-03-19 07:58:54.777,3296,Has Source,412,"-- =============================================
-- Author:		Milenko Djuricin
-- Create date: 10/29/2010
-- Description:	Deletes the templates detail.
-- =============================================

CREATE PROCEDURE [Scheduler_TemplatesDetail_Del]
	@templateDetailID INT
AS
BEGIN
	SET NOCOUNT ON;

	DELETE 
	FROM 
		Appsch_Service_TemplateDetail
	WHERE
		TemptItemID=@templateDetailID
	
END
"
dbo,Scheduler_ServiceGroupUsage_Count,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.790,2023-03-19 07:58:54.770,3296,Has Source,335,"
CREATE PROCEDURE [Scheduler_ServiceGroupUsage_Count]   
(@groupId int)    
    
AS    
        
BEGIN    
 SET NOCOUNT ON;    
 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;    
     
 SELECT count(*) as NumberOfTemplates
   FROM AppSch_Service_Template WITH (NOLOCK)   
  WHERE service_GroupID = @groupId  
 
END 
"
dbo,Scheduler_TemplatesSummary_Del,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.143,2023-03-19 07:58:54.767,3296,Has Source,460,"-- =============================================
-- Author:		M. Nabeel
-- Create date: 03/19/2010
-- Description:	Deletes the templates.
-- =============================================

CREATE PROCEDURE [Scheduler_TemplatesSummary_Del]
	@temptID INT
AS
BEGIN
	SET NOCOUNT ON;

	DELETE 
	From 
		Appsch_Service_TemplateDetail
	WHERE
		temptID=@temptID
	
	Delete
	FROM
		AppSch_Service_Template
	WHERE
		temptID=@temptID
	RETURN;

END
"
dbo,Scheduler_TemplatesByName_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.043,2023-03-19 07:58:54.763,3296,Has Source,806,"
-- =============================================
-- Author:		Joel Deister
-- Create date: 12/29/2010
-- Description:	Gets the templates of a selected display name for a resource.
-- History:
-- =============================================

CREATE PROCEDURE [Scheduler_TemplatesByName_Get]
	@locationID	INT
	,@resourceId	INT
	,@range_no	INT = NULL
	,@name		NVARCHAR(255)
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	
	SELECT
		Distinct
		T.[tempt"
dbo,Scheduler_Template_Save,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.960,2023-03-19 07:58:54.760,3296,Has Source,1710,"-- =============================================
-- Author:		M. Nabeel
-- Create date: 03/24/2010
-- Description:	Saves a particular Template
-- History:	Date		Initials	Description
--			08/11/2012	AA			Added rotation_week to save
-- =============================================

CREATE PROCEDURE [Scheduler_Template_Save]
	@templateId INT = NULL
	,@range_no INT
	,@resourceId INT
	,@locationID INT
	,@service_GroupID INT = NULL
	,@tempt_Name NVARCHAR(255)
	,@tempt_DisplayName NVARCHA"
dbo,Scheduler_TemplatesSummary_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.160,2023-03-19 07:58:54.757,3296,Has Source,1451,"-- =============================================
-- Author:		M. Nabeel
-- Create date: 03/19/2010
-- Description:	Gets the templates for a resource.
-- History:
--				JL			04/20/2010		Updated to reflect current and to put in source control
--				AA			11/13/2012		Added rotation ID to templates
-- =============================================

CREATE PROCEDURE [Scheduler_TemplatesSummary_Get]
	@locationID INT
	,@resourceId INT
	,@range_no int = NULL
		,@rotationId int = NULL
AS
BEGI"
dbo,Scheduler_TemplateById_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.977,2023-03-19 07:58:54.753,3296,Has Source,349,"
CREATE PROCEDURE [Scheduler_TemplateById_Get]
	@templateId INT
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT		
		T.[temptID]
		,T.[range_no]		
		,T.[tempt_DisplayName]
		,T.[tempt_Name]
		,T.[service_GroupID]
		,T.[restrict_Service]
	FROM
		AppSch_Service_Template T WITH (NOLOCK)
	WHERE
		T.[temptID] = @templateId		
	RETURN;
	

END

"
dbo,Scheduler_ServiceReminders_Save,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.853,2023-03-19 07:58:54.750,3296,Has Source,1388,"-- =============================================
-- Description:	Saves existing or creates a new service reminder
-- Author:		Milenko Djuricin
-- History:		Date		Initials	Description
--				04/29/2010	MD			Created
-- =============================================
CREATE PROCEDURE [Scheduler_ServiceReminders_Save]
	@sr_no int = null out,
	@appointmentTypeId [int],
	@resourceId [int] = NULL,
	@LocationID [int] = NULL,
	@sr_how_many [int] = NULL,
	@sr_per [int] = NULL,
	@sr_reminder [nva"
dbo,Scheduler_ServiceReminder_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.807,2023-03-19 07:58:54.747,3296,Has Source,369,"
CREATE PROCEDURE [Scheduler_ServiceReminder_Get]
	@serviceReminderId INT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	SELECT 
		[sr_no],
		[appointmentTypeId],
		[resourceId],
		[LocationID],
		[sr_how_many],
		[sr_per],
		[sr_reminder],
		[sr_all_location_ind]
	FROM
		dbo.AppSch_Service_Reminders WITH (NOLOCK)		
	WHERE
		[sr_no] = @serviceReminderId
END

"
dbo,Scheduler_ServiceReminders_Delete,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.823,2023-03-19 07:58:54.743,3296,Has Source,460,"-- =============================================
-- Description:	Deletes service reminder
-- Author:		Milenko Djuricin
-- History:		Date		Initials	Description
--				04/29/2010	MD			Created
-- =============================================
CREATE PROCEDURE [Scheduler_ServiceReminders_Delete]
	@sr_no int
AS
BEGIN

	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	DELETE AppSch_Service_Reminders
	WHERE [sr_no] = @sr_no
END
"
dbo,Scheduler_ServiceReminders_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.840,2023-03-19 07:58:54.740,3296,Has Source,1891,"-- =============================================
-- Author:		Milenko Djuricin
-- Create date: 04/29/2010
-- Description:	Gets service reminders details (given or all)
-- =============================================

CREATE PROCEDURE [Scheduler_ServiceReminders_Get]
	@appointmentTypeId INT = NULL,
	@resourceId INT = NULL,
	@LocationID INT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	IF @appointmentTypeId IS NULL AND @resourceId IS NULL AND @LocationID IS NULL 
	SELECT 
		[sr_no],
		[appoi"
dbo,Scheduler_ServiceGroups_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.713,2023-03-19 07:58:54.737,3296,Has Source,762,"CREATE PROCEDURE [Scheduler_ServiceGroups_Get]   
(@locationId int)    
    
AS    
    
-- =============================================    
-- File Name: Scheduler_ServiceGroups_Get.sql    
-- Description: This Stored Procedure Gets the service groups.    
-- Author: Ali atabek    
-- Example: exec [Scheduler_ServiceGroups_Get]     
-- History: Date  Initials Description    
--   03/27/2010 AA   Created    
-- =============================================    
    
BEGIN    
 SET"
dbo,Scheduler_Templates_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.010,2023-03-19 07:58:54.733,3296,Has Source,1388,"-- =============================================
-- Author:		B. VanHorne
-- Create date: 12/15/2009
-- Description:	Gets the appointment templates for a Provider.
--              Optionally accepts @appt_dayofweek and @appt_start_time to identify
--              a template that applies to an appointment -- if any
-- =============================================

CREATE PROCEDURE [Scheduler_Templates_Get]
	@locationID INT
	,@resourceId INT
	,@appt_dayofweek SMALLINT = NULL
	,@appt_sta"
dbo,Scheduler_ServiceGroup_Delete,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.683,2023-03-19 07:58:54.730,3296,Has Source,596,"CREATE PROCEDURE [Scheduler_ServiceGroup_Delete] 

-- =============================================
-- File Name:	Scheduler_ServiceGroup_Delete.sql
-- Description:	This Stored Procedure Deletes a service group.
-- Author:	Ali atabek
-- Example: exec [Scheduler_ServiceGroups_Get] 
-- History:	Date		Initials	Description
--			03/30/2010	AA			Created
-- =============================================
	(
	@groupId int
	)
AS
	DELETE FROM AppSch_Service_Group_Items
	WHERE service_GroupID ="
dbo,Scheduler_ServiceGroup_Save,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.700,2023-03-19 07:58:54.727,3296,Has Source,1221,"CREATE PROCEDURE [Scheduler_ServiceGroup_Save]   
 (  
 @groupId int = NULL OUT,  
 @locationId int, 
 @description nvarchar(255)  
 )  
-- =============================================  
-- File Name: Scheduler_ServiceGroup_Save.sql  
-- Description: This Stored Procedure adds or updates a service group.  
-- Author: Ali atabek  
-- Example: exec [Scheduler_ServiceGroup_Save]   
-- History: Date  Initials Description  
--   04/01/2010 AA   Created  
--   04/02/2010 AA   Added scope"
dbo,Scheduler_ScheduleTemplateTemplatesDetail_Save,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.330,2023-03-19 07:58:54.723,1615,Has Source,1361,"-- =============================================
-- Author:		Richard Liu
-- Create date: 07/17/2018
-- Description:	Saves the detail for a particular Template
-- =============================================

CREATE PROCEDURE [Scheduler_ScheduleTemplateTemplatesDetail_Save]
	@temptID INT
	,@tempt_DayofWeek INT
	,@tempt_Start_Time NVARCHAR(20)
	,@tempt_End_Time NVARCHAR(20)
	,@tempt_Duration INT
	,@tempt_Interval INT
	,@tempt_Selected BIT	
	
AS
BEGIN
	SET NOCOUNT ON;
	SELECT 
		[TemptItemID] 
	FR"
dbo,Scheduler_ScheduleTemplateTemplateDetailById_Get,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.303,2023-03-19 07:58:54.717,1615,Has Source,419,"

CREATE PROCEDURE [Scheduler_ScheduleTemplateTemplateDetailById_Get]
	@TemptItemID INT	
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		T.[TemptItemID]
		,T.[temptID]
		,T.[tempt_Start_Time]
		,T.[tempt_End_Time]
		,T.[tempt_DayofWeek]
		,T.[tempt_Duration]
		,T.[tempt_Interval]
		,T.[tempt_Selected]
	FROM
		AppSch_SchedulerTemplate_ServiceTemplateDetail T WITH (NOLOCK)
	WHERE
		T.[TemptItemID] = @TemptItemID		

	RETURN;

END"
dbo,Scheduler_ScheduleTemplateTemplatesDetail_Del,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.313,2023-03-19 07:58:54.713,1615,Has Source,420,"-- =============================================
-- Author:		Richard Liu
-- Create date: 07/12/2018
-- Description:	Deletes the templates detail.
-- =============================================

CREATE PROCEDURE [Scheduler_ScheduleTemplateTemplatesDetail_Del]
	@templateDetailID INT
AS
BEGIN
	SET NOCOUNT ON;

	DELETE 
	FROM 
		AppSch_SchedulerTemplate_ServiceTemplateDetail
	WHERE
		TemptItemID=@templateDetailID
	
END"
dbo,Scheduler_ScheduleTemplateTemplatesDetail_Get,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.320,2023-03-19 07:58:54.710,1615,Has Source,832,"-- =============================================
-- Author:		Richard Liu
-- Create date: 07/12/2018
-- Description:	Gets the detail for a particular Template
-- =============================================

CREATE PROCEDURE [Scheduler_ScheduleTemplateTemplatesDetail_Get]
	@temptID INT
	,@tempt_DayofWeek INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		Distinct
		T.[TemptItemID]
		,T.[temptID]
		,T.[tempt_Start_Time]
		,T.[tempt_End_Time]
		,T.[tempt_DayofWeek]
		,T.[tempt_Duration]
		,T.[tempt_Interval"
dbo,Scheduler_ScheduleTemplateTemplate_Save,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.280,2023-03-19 07:58:54.703,1615,Has Source,1626,"-- =============================================
-- Author:		Richard Liu
-- Create date: 07/17/2018
-- Description:	Saves a particular Template
-- History:	Date		Initials	Description
-- =============================================

CREATE PROCEDURE [Scheduler_ScheduleTemplateTemplate_Save]
	@templateId INT = NULL
	,@range_no INT
	,@scheduleTemplateId INT
	,@service_GroupID INT = NULL
	,@tempt_Name NVARCHAR(255)
	,@tempt_DisplayName NVARCHAR(255)
	,@recorded_by_computer NVARCHAR(255) = NULL
	,@r"
dbo,Scheduler_ScheduleTemplateTemplateById_Get,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.293,2023-03-19 07:58:54.700,1615,Has Source,357,"
CREATE PROCEDURE [Scheduler_ScheduleTemplateTemplateById_Get]
	@templateId INT
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT		
		T.[temptID]
		,T.[range_no]		
		,T.[tempt_DisplayName]
		,T.[tempt_Name]
		,T.[service_GroupID]
		,T.[restrict_Service]
	FROM
		AppSch_SchedulerTemplate_ServiceTemplate T WITH (NOLOCK)
	WHERE
		T.[temptID] = @templateId		
	RETURN;
	

END"
dbo,Scheduler_ScheduleTemplateTemplatesSummary_Del,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.340,2023-03-19 07:58:54.693,1615,Has Source,485,"-- =============================================
-- Author:		Richard Liu
-- Create date: 07/12/2018
-- Description:	Deletes the templates.
-- =============================================

CREATE PROCEDURE [Scheduler_ScheduleTemplateTemplatesSummary_Del]
	@temptID INT
AS
BEGIN
	SET NOCOUNT ON;

	DELETE 
	From 
		AppSch_SchedulerTemplate_ServiceTemplateDetail
	WHERE
		temptID=@temptID
	
	Delete
	FROM
		AppSch_SchedulerTemplate_ServiceTemplate
	WHERE
		temptID=@temptID
	RETURN;

END"
dbo,Scheduler_ScheduleTemplateTemplatesSummary_Get,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.350,2023-03-19 07:58:54.690,1615,Has Source,1251,"-- =============================================
-- Author:		Richard Liu
-- Create date: 07/12/2018
-- Description:	Gets the schedule template templates.
-- =============================================

CREATE PROCEDURE [Scheduler_ScheduleTemplateTemplatesSummary_Get]
	@scheduleTemplateId INT
	,@range_no int = NULL
		,@rotationId int = NULL
AS
BEGIN
	SET NOCOUNT ON;
IF (@rotationId = 1 OR @rotationId IS NULL)
	BEGIN	
		SELECT
			Distinct
			T.[temptID]
			,T.[range_no]
			,T.[tempt_DisplayName]"
dbo,Scheduler_ScheduleTemplateServiceGroupUsage_Count,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.263,2023-03-19 07:58:54.683,1615,Has Source,351,"
CREATE PROCEDURE [Scheduler_ScheduleTemplateServiceGroupUsage_Count]   
(@groupId int)    
    
AS    
        
BEGIN    
 SET NOCOUNT ON;    
 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;    
     
 SELECT count(*) as NumberOfTemplates
   FROM AppSch_SchedulerTemplate_ServiceTemplate WITH (NOLOCK)   
  WHERE service_GroupID = @groupId  
 
END"
dbo,Scheduler_ScheduleTemplateServiceGroup_Delete,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.237,2023-03-19 07:58:54.680,1615,Has Source,275,"CREATE PROCEDURE [Scheduler_ScheduleTemplateServiceGroup_Delete] 
	(
	@groupId int
	)
AS
	DELETE FROM AppSch_SchedulerTemplate_ServiceGroupItems
	WHERE service_GroupID = @groupId
	
	DELETE FROM AppSch_SchedulerTemplate_ServiceGroup
	WHERE service_GroupID = @groupId
	
	RETURN"
dbo,Scheduler_ScheduleTemplateServiceGroups_Get,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.247,2023-03-19 07:58:54.673,1615,Has Source,394,"CREATE PROCEDURE [Scheduler_ScheduleTemplateServiceGroups_Get]   
(@companyId varchar(20))    
    
AS    
    
BEGIN    
 SET NOCOUNT ON;    
 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;    
     
 SELECT service_GroupID,companyId, group_Description    
   FROM AppSch_SchedulerTemplate_ServiceGroup WITH (NOLOCK)   
  WHERE companyId = @companyId  
 ORDER BY group_Description    
 
END"
dbo,Scheduler_ScheduleTemplate_ServiceGroup_Save,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.187,2023-03-19 07:58:54.670,1615,Has Source,599,"CREATE PROCEDURE [Scheduler_ScheduleTemplate_ServiceGroup_Save]   
 (  
 @groupId int OUT,  
 @companyId varchar(20), 
 @description varchar(255)  
 )  
AS   
BEGIN  
 SET NOCOUNT ON;  
  
 IF @groupId=0
  BEGIN  
   INSERT INTO Appsch_SchedulerTemplate_ServiceGroup  
   (  
     group_Description  
   , companyId
   )  
   VALUES  
   (  
     @description
   , @companyId 
   )  
     
   SET @groupId = SCOPE_IDENTITY()  
  END  
 ELSE  
  BEGIN  
  UPDATE Appsch_SchedulerTemplate_ServiceGroup "
dbo,Scheduler_ScheduleTemplate_Clear,SQL_STORED_PROCEDURE,2018-12-20 11:58:24.693,2023-03-19 07:58:54.663,1550,Has Source,520,"CREATE PROCEDURE [Scheduler_ScheduleTemplate_Clear]
	@scheduleTemplateID INT
AS
BEGIN
	SET NOCOUNT ON;

	DELETE 
	FROM 
		AppSch_SchedulerTemplate_ServiceTemplateDetail
	WHERE temptID in 
	(SELECT temptID FROM AppSch_SchedulerTemplate_ServiceTemplate
	WHERE schedulerTemplateID=@scheduleTemplateID)
	
	DELETE
	FROM
		AppSch_SchedulerTemplate_ServiceTemplate
	WHERE
		schedulerTemplateID=@scheduleTemplateID

	DELETE 
	From 
		AppSch_SchedulerTemplate_Blocks
	WHERE
		schedulerTemplateID=@scheduleTemp"
dbo,Scheduler_ScheduleTemplateAvailability_Del,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.210,2023-03-19 07:58:54.660,1615,Has Source,617,"
-- =============================================
-- File Name:	Scheduler_ScheduleTemplateAvailability_Del.sql
-- Description:	This Stored Procedure Deletes a Schedule Template Availability.
-- Author:	Richard Liu
-- Example: Scheduler_ScheduleTemplateAvailability_Del
-- History:	Date		Initials	Description
--			07/11/2018	RL			Created
-- =============================================

CREATE PROCEDURE [Scheduler_ScheduleTemplateAvailability_Del]
	@scheduleTemplateAvailabilityId INT
AS
BEGIN
	SET "
dbo,Scheduler_ScheduleTemplateAvailability_Get,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.217,2023-03-19 07:58:54.657,1615,Has Source,1548,"
-- =============================================
-- File Name:	Scheduler_ScheduleTemplateAvailability_Get.sql
-- Description:	This Stored Procedure Gets Availability by Schedule Template.
-- Author:	Richard Liu
-- Example: exec [Scheduler_ScheduleTemplateAvailability_Get] 1
-- History:	Date		Initials	Description
--			07/11/2018	RL			Created
-- =============================================

CREATE PROCEDURE [Scheduler_ScheduleTemplateAvailability_Get] 
	@rangeId int = NULL
	,@scheduleTemplateId "
dbo,Scheduler_ScheduleTemplateAvailability_Save,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.230,2023-03-19 07:58:54.650,1615,Has Source,1655,"-- =============================================
-- File Name:	 Scheduler_ScheduleTemplateAvailability_Save.sql
-- Description:	This Stored Procedure Save Schedule Template Availability.
-- Author:	Richard Liu
-- Example: [Scheduler_ScheduleTemplateAvailability_Save] 
-- History:	Date		Initials	Description
--			07/11/2018	RL			Created
-- =============================================

CREATE PROCEDURE [Scheduler_ScheduleTemplateAvailability_Save] 
		@scheduleTemplateAvailabilityId int
		,@schedul"
dbo,Scheduler_ScheduleTemplate_Del,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.167,2023-03-19 07:58:54.647,1615,Has Source,593,"CREATE PROCEDURE [Scheduler_ScheduleTemplate_Del]
	@scheduleTemplateID INT
AS
BEGIN
	SET NOCOUNT ON;

	DELETE 
	FROM 
		AppSch_SchedulerTemplate_ServiceTemplateDetail
	WHERE temptID in 
	(SELECT temptID FROM AppSch_SchedulerTemplate_ServiceTemplate
	WHERE schedulerTemplateID=@scheduleTemplateID)
	
	DELETE
	FROM
		AppSch_SchedulerTemplate_ServiceTemplate
	WHERE
		schedulerTemplateID=@scheduleTemplateID

	DELETE 
	From 
		AppSch_SchedulerTemplate_Blocks
	WHERE
		schedulerTemplateID=@scheduleTempla"
dbo,Scheduler_ScheduleTemplate_Copy,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.157,2023-03-19 07:58:54.640,1615,Has Source,3000,"CREATE PROCEDURE [Scheduler_ScheduleTemplate_Copy]
		@scheduleTemplateId int
		,@newScheduleTemplateName varchar(50)
AS
BEGIN
	/* SET NOCOUNT ON */
	DECLARE @returnScheduleTemplateId int
	BEGIN
		INSERT INTO AppSch_SchedulerTemplate
		(ScheduleTemplateName,CompanyID)
		SELECT @newScheduleTemplateName, CompanyID
		FROM AppSch_SchedulerTemplate
		WHERE ID = @scheduleTemplateId

		SELECT @returnScheduleTemplateId = SCOPE_IDENTITY()
	
		INSERT INTO AppSch_SchedulerTemplate_Blocks
		(schedulerTemplat"
dbo,Scheduler_ScheduleTemplate_Save,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.177,2023-03-19 07:58:54.633,1615,Has Source,684,"CREATE PROCEDURE [Scheduler_ScheduleTemplate_Save] 
		@scheduleTemplateId int
		,@scheduleTemplateName varchar(50)
		,@companyId varchar(20)
AS
BEGIN
	/* SET NOCOUNT ON */
	DECLARE @returnScheduleTemplateId int
	IF @scheduleTemplateId=0
	BEGIN
		INSERT INTO AppSch_SchedulerTemplate
		(
			ScheduleTemplateName,
			CompanyID
		)
		VALUES
		(
			@scheduleTemplateName,
			@companyId
		)

		SELECT @returnScheduleTemplateId = SCOPE_IDENTITY()
	END
	
	ELSE
	BEGIN
		UPDATE AppSch_SchedulerTemplate
		SET"
dbo,Scheduler_ScheduleTemplatesForCompany_Get,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.270,2023-03-19 07:58:54.630,1615,Has Source,536,"-- ========================================================
-- Author:		Luis Estefan
-- Create date: 06/21/2018
-- Description:	Gets the scheduler appointment by CompanyID
-- =========================================================

CREATE PROCEDURE [dbo].[Scheduler_ScheduleTemplatesForCompany_Get]
@companyId NVARCHAR(20) = NULL
AS
BEGIN
	SELECT	AST.ID,
			AST.ScheduleTemplateName,
			AST.CompanyID

	FROM dbo.AppSch_SchedulerTemplate AST  WITH (NOLOCK)
	WHERE AST.CompanyID = @companyId
	ORDER B"
dbo,Scheduler_RecurringException_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.170,2023-03-19 07:58:54.627,3296,Has Source,707,"
-- =============================================
-- Author:		G. Tran
-- Create date: 2/14/2009
-- Description:	Gets the recurring exception details
-- =============================================

CREATE PROCEDURE [Scheduler_RecurringException_Get]
	@recurringExceptionID INT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		RE.RecurringExceptionID
		,RE.resourceId
		,RE.LocationID
		,RE.pro_available
		,RE.pro_start_time
		,RE.pro_end_time
		,RE.pro_exception_date
		,RE.pro_note"
dbo,Scheduler_RecurringException_Save,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.190,2023-03-19 07:58:54.623,3296,Has Source,1581,"
-- =============================================
-- Description:	saves the existing or creates new Recurring Exception
-- Author:		Milenko Djuricin
-- History:		Date		Initials	Description
--				04/08/2010	MD			Created
-- =============================================
CREATE PROCEDURE [Scheduler_RecurringException_Save]
	@recurringExceptionID int = null out,
	@resourceId int,
	@LocationID int,
	@pro_available bit,
	@pro_start_time nvarchar(11),
	@pro_end_time nvarchar(11),
	@pro_exc"
dbo,Scheduler_RecurringAppointment_Save,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.140,2023-03-19 07:58:54.620,3296,Has Source,2438,"
-- =============================================
-- Description:	saves the existing or creates new Recurring Appointment
-- Author:		Milenko Djuricin
-- History:		Date		Initials	Description
--				04/02/2010	MD			Created
-- =============================================
CREATE PROCEDURE [Scheduler_RecurringAppointment_Save]
	@recurringAppointmentID int = null out,
	@recurrence_rule_data nvarchar(1024) = null,
	@appointmentTypeId int = null,
	@resourceId int = null,
	@LocationID int = "
dbo,Scheduler_RecurringException_Delete,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.157,2023-03-19 07:58:54.617,3296,Has Source,667,"
-- =============================================
-- Description:	deletes  Recurring Exception
-- Author:		Milenko Djuricin
-- History:		Date		Initials	Description
--				04/08/2010	MD			Created
--				04/22/2010	JL			Delete exceptions manually
-- =============================================
CREATE PROCEDURE [Scheduler_RecurringException_Delete]
	@recurringExceptionID int
	
AS
BEGIN

	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	DELETE AppSch_Provider_Exce"
dbo,Scheduler_ExceptionReasons_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.273,2023-03-19 07:58:54.613,3296,Has Source,699,"



-- =============================================
-- Author:		G. Tran
-- Create date: 2/14/2009
-- Description:	Gets the list of reasons currently listed for exceptions
-- =============================================

CREATE PROCEDURE [Scheduler_ExceptionReasons_Get]
	@locationID INT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	WITH temp AS
	(
		SELECT pro_notes, pro_exception_date, row_number()
			OVER (PARTITION BY pro_notes ORDER BY pro_exception_date) AS rn
		FROM 
			AppSch_P"
dbo,Scheduler_ExceptionRecurringInstances_Delete,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.287,2023-03-19 07:58:54.607,3296,Has Source,536,"-- =============================================
-- Description:	deletes Recurring Exception instances
-- Author:		Milenko Djuricin
-- History:		Date		Initials	Description
--				04/08/2010	MD			Created
-- =============================================
CREATE PROCEDURE [Scheduler_ExceptionRecurringInstances_Delete]
	@recurringExceptionID int
	
AS
BEGIN

	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	DELETE AppSch_Provider_Exception
	WHERE [exceptionRecurrence"
dbo,Scheduler_Exception_Del,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.180,2023-03-19 07:58:54.603,3296,Has Source,1361,"
CREATE PROCEDURE [Scheduler_Exception_Del] 
	
	 @pro_exception_no int
		
AS

-- =============================================
-- File Name:	Scheduler_Exception_Del.sql
-- Description:	This Stored Procedure Deletes Existing Exceptions.
-- Author:	Armando Moran
-- Example: [Scheduler_Exception_Del] 174046
-- History:	Date		Initials	Description
--			02/22/2010	AM			Created
--			04/13/2010	MD			Modified to delete recurring exception when the last instance is deleted
--			04/20/2010	A"
dbo,Scheduler_ResourceExceptions_Save,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.430,2023-03-19 07:58:54.600,3296,Has Source,1716,"
-- =============================================
-- Author:		B. VanHorne
-- Create date: 12/14/2009
-- Description:	Saves the schedule exception for a Provider
-- History:		Initials	Date		Description
--				JL			03/31/2010	Returning exception id
-- =============================================

CREATE PROCEDURE [Scheduler_ResourceExceptions_Save]
	@exceptionID INT = NULL
	,@locationID INT = NULL
	,@recurrenceID INT = NULL
	,@available BIT = NULL
	,@resourceId INT = NULL
	,@start_d"
dbo,Scheduler_ExceptionAppointmentConflict_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.200,2023-03-19 07:58:54.593,3296,Has Source,2807,"-- =============================================
-- File Name:	Scheduler_ExceptionAppointmentConflict_Get.sql
-- Description:	This Stored Procedure returns conflicting appointment exceptions.
-- Author:	Milenko Djuricin
-- Example: [Scheduler_ExceptionAppointmentConflict_Get] 
-- History:	Date		Initials	Description
--			04/12/2010	MD			Created
-- =============================================

CREATE PROCEDURE [Scheduler_ExceptionAppointmentConflict_Get] 
	@id int	= NULL,
	@locationId "
dbo,Scheduler_ExceptionAppointmentExceptionStatus_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.217,2023-03-19 07:58:54.583,3296,Has Source,2703,"-- =============================================  
-- File Name: Scheduler_ExceptionAppointmentExceptionStatus_Get.sql  
-- Description: This Stored Procedure gets the status if an appointment exception is available or not.  
-- Author: Muhammad Nabeel  
-- Example: [Scheduler_ExceptionAppointmentExceptionStatus_Get]   
-- History: Date  Initials Description  
--   02/26/2010 AM   Created  
-- =============================================  
  
CREATE PROCEDURE [Scheduler_ExceptionAppoin"
dbo,Scheduler_ResourceAvailabilityByTimeSlotCount_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.317,2023-03-19 07:58:54.573,3296,Has Source,2083,"-- =============================================
-- File Name:	Scheduler_ResourceAvailabilityByTimeSlotCount_Get.sql
-- Description:	This Stored Procedure gets the number of resource availabilities for a given time slot
-- Author:	Joseph Lee
-- History:	Date		Initials	Description
--			04/06/2010	JL			Created
--			04/07/2010	JL			Changed startTime and endTime to NVARCHAR(22) data type instead of TIME (no time in SQL 2005)
--			04/07/2010	JL			locationId is now nullable
--			04/13/2010	JL	"
dbo,Scheduler_ResourceAvailabilityWholeTimeSlotCount_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.333,2023-03-19 07:58:54.570,3296,Has Source,1323,"-- =============================================
-- File Name:	Scheduler_ResourceAvailabilityWholeTimeSlotCount_Get.sql
-- Description:	This Stored Procedure gets availablity for the resource in a selected time slot.
-- Author:	Joel Deister
-- History:	Date		Initials	Description
--			01/18/2011	JD			Created
-- =============================================

CREATE PROCEDURE [Scheduler_ResourceAvailabilityWholeTimeSlotCount_Get]
	@resourceID INT
	,@locationId INT = NULL
	,@rangeNo INT ="
dbo,Scheduler_ResourceAvailability_Del,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.237,2023-03-19 07:58:54.567,3296,Has Source,584,"
-- =============================================
-- File Name:	Scheduler_ResourceAvailability_Del.sql
-- Description:	This Stored Procedure Deletes a Resource Availability.
-- Author:	Joseph Lee
-- Example: Scheduler_ResourceAvailability_Del
-- History:	Date		Initials	Description
--			02/25/2010	JL			Created
-- =============================================

CREATE PROCEDURE [Scheduler_ResourceAvailability_Del]
	@resourceAvailabilityId INT
AS
BEGIN
	SET NOCOUNT ON
	
	DELETE FROM"
dbo,Scheduler_ResourceAvailability_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.250,2023-03-19 07:58:54.563,3296,Has Source,1899,"
-- =============================================
-- File Name:	Scheduler_ResourceAvailability_Get.sql
-- Description:	This Stored Procedure Gets Availability by Resource.
-- Author:	Armando Moran
-- Example: exec [Scheduler_ResourceAvailability_Get] 1
-- History:	Date		Initials	Description
--			02/09/2010	AM			Created
--			02/25/2010	JL			Removed some return values
--			03/26/2010  AA			Added rangeId as a parameter and a selected col
--			04/13/2010	JL			If @rangeId is null, then get "
dbo,Scheduler_ResourceAvailability_Get1,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.270,2023-03-19 07:58:54.560,3296,Has Source,770,"-- =============================================
-- Author:		B. VanHorne
-- Create date: 12/14/2009
-- Description:	Gets the normal hours of availibility for a Provider
-- =============================================

CREATE PROCEDURE [Scheduler_ResourceAvailability_Get1]
	@locationID INT
	,@resourceId INT
	,@prb_day_of_week SMALLINT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		B.[prb_no]
		,B.[prb_day_of_week]
		,B.[prb_start_date_time]
		,B.[prb_end_date_time]
	FROM
		AppSc"
dbo,Scheduler_ResourceHoursServiceTemplates_Clear,SQL_STORED_PROCEDURE,2018-12-20 11:58:24.680,2023-03-19 07:58:54.553,1550,Has Source,521,"CREATE PROCEDURE [Scheduler_ResourceHoursServiceTemplates_Clear]
	@resourceId INT
	,@locationId INT
AS
BEGIN
	SET NOCOUNT ON;

	DELETE FROM
		AppSch_Service_TemplateDetail
	WHERE
		temptID IN (SELECT temptID FROM AppSch_Service_Template WHERE resourceId = @resourceId AND LocationID = @locationId)
		
	DELETE FROM
		AppSch_Service_Template
	WHERE
		resourceId = @resourceId AND LocationID = @locationId

	DELETE FROM 
		AppSch_Provider_Blocks
	WHERE
		resourceId = @resourceId AND LocationID = @locat"
dbo,Scheduler_AvailabilityOfficeHourStatus_Get,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.957,2023-03-19 07:58:54.550,3296,Has Source,1540,"-- =============================================
-- File Name:	Scheduler_AvailabilityOfficeHourStatus_Get.sql
-- Description:	This stored procdure will find out if there is a conflict with office hour update with any availability.
-- Author:	Muhammad Nabeel
-- Example: [Scheduler_AvailabilityOfficeHourStatus_Get] 
-- History:	Date		Initials	Description
--			04/13/2010	AM			Created
--          03/01/2012  PA          Modify to work with AL
-- ============================================="
dbo,Scheduler_ResourceAvailability_Save,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.283,2023-03-19 07:58:54.547,3296,Has Source,1854,"-- =============================================
-- File Name:	 Scheduler_ResourceAvailability_Save .sql
-- Description:	This Stored Procedure Save Resource Availability.
-- Author:	Armando Moran
-- Example: [Scheduler_ResourceAvailability_Save] 
-- History:	Date		Initials	Description
--			02/24/2010	AM			Created
--			02/25/2010	JL			Modified to remove some parameters
--			03/26/2010  AA			Added rangeId parameter
--			11/08/2010  AA			Added rotationId 
-- =============================="
dbo,Scheduler_ResourceAvailabilityByTimeSlot_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.300,2023-03-19 07:58:54.537,3296,Has Source,1340,"-- =============================================
-- File Name:	Scheduler_ResourceAvailabilityByTimeSlot_Get.sql
-- Description:	This Stored Procedure gets availablity for the resource in a selected time slot.
-- Author:	Joel Deister
-- History:	Date		Initials	Description
--			01/18/2011	JD			Created
-- =============================================

CREATE PROCEDURE [Scheduler_ResourceAvailabilityByTimeSlot_Get]
	@resourceID INT
	,@locationId INT
	,@rangeNo INT
	,@dayOfWeek INT
	,@st"
dbo,Scheduler_Preferences_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.057,2023-03-19 07:58:54.533,3296,Has Source,645,"
-- =============================================
-- File Name:	Scheduler_Preferences_Get.sql
-- Description:	Gets the scheduler preferences
-- Author:	Joel Deister
-- Example: Scheduler_PatientDetail_Save
-- History:	Date		Initials	Description
--			02/18/2010	JD			Created
--			04/02/2010	GT			Modified
-- =============================================
CREATE PROCEDURE [Scheduler_Preferences_Get] 
	(
	@LocationID int
	)
	AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		pref_name
		,pref_v"
dbo,Scheduler_Preferences_Save,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.073,2023-03-19 07:58:54.530,3296,Has Source,1077,"

-- =============================================
-- File Name:	Scheduler_Preferences_Save.sql
-- Description:	This Stored Procedure Saves the Scheduler Preferences.
-- Author:	Joel Deister
-- History:	Date		Initials	Description
--			02/02/2010	JD			Created
-- =============================================

CREATE PROCEDURE [Scheduler_Preferences_Save] 
	(
	@LocationID int
	,@PreferrenceName NVARCHAR(255)
	,@PreferrenceValue NVARCHAR(255)
	)	
AS
	BEGIN
	SET NOCOUNT ON;
	SET TR"
dbo,Scheduler_InsuranceReminders_Save,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.520,2023-03-19 07:58:54.527,3296,Has Source,1371,"-- =============================================
-- Description:	Saves existing or creates a new insurance reminder
-- Author:		Milenko Djuricin
-- History:		Date		Initials	Description
--				04/29/2010	MD			Created
-- =============================================
CREATE PROCEDURE [Scheduler_InsuranceReminders_Save]
	@ir_no int = null out,
	@insurance_no [int],
	@resourceId [int] = NULL,
	@LocationID [int] = NULL,
	@ir_how_many [int] = NULL,
	@ir_per [int] = NULL,
	@ir_reminder [nvar"
dbo,Scheduler_InsuranceReminder_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.470,2023-03-19 07:58:54.523,3296,Has Source,372,"
CREATE PROCEDURE [Scheduler_InsuranceReminder_Get]
	@insuranceReminderId INT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	SELECT 
		[ir_no],
		[insurance_no],
		[resourceId],
		[LocationID],
		[ir_how_many],
		[ir_per],
		[ir_reminder],
		[ir_all_location_ind]
	FROM
		dbo.AppSch_Insurance_Reminders WITH (NOLOCK)		
	WHERE
		[ir_no] = @insuranceReminderId
END

"
dbo,Scheduler_InsuranceReminders_Delete,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.487,2023-03-19 07:58:54.520,3296,Has Source,466,"-- =============================================
-- Description:	Deletes insurance reminder
-- Author:		Milenko Djuricin
-- History:		Date		Initials	Description
--				04/29/2010	MD			Created
-- =============================================
CREATE PROCEDURE [Scheduler_InsuranceReminders_Delete]
	@ir_no int
AS
BEGIN

	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	DELETE AppSch_Insurance_Reminders
	WHERE [ir_no] = @ir_no
END
"
dbo,Scheduler_InsuranceReminders_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.503,2023-03-19 07:58:54.517,3296,Has Source,1847,"
-- =============================================
-- Author:		Milenko Djuricin
-- Create date: 04/29/2010
-- Description:	Gets the insurance reminders details (given or all)
-- =============================================

CREATE PROCEDURE [Scheduler_InsuranceReminders_Get]
	@insurance_no INT = NULL,
	@resourceId INT = NULL,
	@LocationID INT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @insurance_no IS NULL AND @resourceId IS NULL AND @LocationID IS NULL 
	SELECT 
		[ir_no],
		[insu"
dbo,Scheduler_AvailableDateRange_DeleteProviderBlocksOrphans,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.990,2023-03-19 07:58:54.500,3296,Has Source,918,"-- =============================================
-- FileName:	Scheduler_AvailableDateRange_DeleteProviderBlocksOrphans
-- Description:	deletes AppSch_Provider_Blocks orphan records
-- Usage:		This store procedure should be run manually to clean up orphaned AppSch_Provider_Blocks records.
--
-- Author:		Milenko Djuricin
-- Example:		Scheduler_AvailableDateRange_DeleteProviderBlocksOrphans
-- History:		Date		Initials	Description
--				10/28/2010	MD			Created 
-- =========================="
dbo,Scheduler_AvailabilityDataRangesByResourceIDs_Get,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.923,2023-03-19 07:58:54.493,3296,Has Source,1714,"
-- =============================================
-- File Name:	Scheduler_AvailabilityDataRangesByResourceIDs_Get.sql
-- Description:	This Stored Procedure gets availablity date range for a list of resources
-- Author:	Joseph Lee
-- History:	Date		Initials	Description
--			04/08/2010	JL			Created
--			09/16/2010	MD			Extended selection criteria to include partially overlapped date ranges
-- =============================================

CREATE PROCEDURE [Scheduler_AvailabilityDataRange"
dbo,Scheduler_AvailableDateRange_Save,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.007,2023-03-19 07:58:54.480,3296,Has Source,2199,"-- =============================================
-- FileName:	Scheduler_AvailableDateRange_Save
-- Description:	saves the existing or creates new available date range entry
-- Author:		Milenko Djuricin
-- Example:		Scheduler_AvailableDateRange_Save 4, 2, 5, 'range 1', '3/10/2010', '03/11/2010', 'DEV_SERVER' 
-- History:		Date		Initials	Description
--				03/18/2010	MD			Created
--				10/25/2012  JD			Added dummy record insert to AppSch_Provider_Blocks
--              02/12/2013  KD       "
dbo,Scheduler_ResourceLocation_Del,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.500,2023-03-19 07:58:54.473,3296,Has Source,1612,"

-- =============================================
-- File Name:	Scheduler_ResourceLocation_Del.sql
-- Description:	This Stored Procedure Deletes a Resource from the AppSch_Display_Resource table for a location
-- Author:	Paul Amedee
-- Example: Scheduler_ResourceLocation_Del
-- History:	Date		Initials	Description
--			09/06/2012	PA			Created
-- =============================================

CREATE PROCEDURE [Scheduler_ResourceLocation_Del]
	@resourceId INT
	,@locationId INT
AS
BE"
dbo,Scheduler_AvailabilityDateRange_Get,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.940,2023-03-19 07:58:54.470,3296,Has Source,841,"CREATE PROCEDURE [Scheduler_AvailabilityDateRange_Get] 
	
	  @resourceID int
	, @locationId int
	
AS

-- =============================================
-- File Name:	Scheduler_AvailabilityDateRange_Get.sql
-- Description:	This Stored Procedure Gets Availability for the date range.
-- Author:	Armando Moran
-- Example: exec [Scheduler_ResourceAvailability_Get] 1
-- History:	Date		Initials	Description
--			02/09/2010	AM			Created
-- =============================================

BEGI"
dbo,Scheduler_AuditLog_EventTypes_Get,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.870,2023-03-19 07:58:54.463,3296,Has Source,446,"
-- =============================================
-- Create date: 06/07/2012
-- Description:	Gets the Auditlog Event Types
-- AA 06/07/2012 Created

-- =============================================

CREATE PROCEDURE [Scheduler_AuditLog_EventTypes_Get]
	
AS
BEGIN
	SET NOCOUNT ON
	
	SELECT 
		eventTypeID
		,eventName
		,eventDescription

	FROM AppSch_Audit_EventType
	
	WHERE 	eventTypeActive = 1
	
	ORDER BY eventName
END"
dbo,Scheduler_AuditLog_Add,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.837,2023-03-19 07:58:54.460,3296,Has Source,816,"
-- =============================================
-- Description:	Adds a new log entry into AuditLog
-- Author:		Ali
-- History:		Date		Initials	Description
--				06/07/2012	AA			Created
-- =============================================
CREATE PROCEDURE [Scheduler_AuditLog_Add]

	@EventDate DateTime
	,@UserID int
	,@AppointmentID int
	,@EventTypeKey nvarchar(50)
	,@IPAddress nvarchar(50)
	,@HashValue text
	,@OldValue nvarchar(255)
	,@NewValue nvarchar(255)

AS
	IF ((SELECT Top "
dbo,Scheduler_Service_Save,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.650,2023-03-19 07:58:54.450,3296,Has Source,809,"
-- =============================================
-- File Name:	Scheduler_Service_Save.sql
-- Description:	This stored procedure saves a service to the AppointmentType 
-- Author:	G. Tran
-- History:	Date		Initials	Description
--			04/15/2012	GT			Created
-- =============================================

CREATE PROCEDURE [Scheduler_Service_Save] 
	@ServiceID				INT
	,@OfficeId				INT
	,@ApptDuration			INT
	,@ActiveForScheduler	BIT = NULL
	,@Color					VARCHAR(50) = NULL
AS
BEGIN
"
dbo,Scheduler_Service_Upd,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.667,2023-03-19 07:58:54.443,3296,Has Source,788,"
-- =============================================
-- File Name:	Scheduler_Service_Upd.sql
-- Description:	This Stored Procedure Gets data.
-- Author:	G. Tran
-- History:	Date		Initials	Description
--			02/04/2010	GT			Created
--			03/22/2012	AA			Modified for WebScheduler
--			05/22/2010  JD			Added OfficeId.
-- =============================================

CREATE PROCEDURE [Scheduler_Service_Upd] 
	@ServiceID				INT
	,@OfficeId				INT
	,@ActiveForScheduler	BIT = NULL
	,@Color			"
dbo,Scheduler_Services_Del,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.890,2023-03-19 07:58:54.433,3296,Has Source,554,"

-- =============================================
-- File Name:	Scheduler_Services_Del.sql
-- Description:	This Stored Procedure deletes all service items from the AppSch_AppointmentType table prior to updates
-- Author:	Ali atabek
-- Example: exec [[Scheduler_Services_Del]] 
-- History:	Date		Initials	Description
--			05/23/2012	GT			Created
-- =============================================
CREATE PROCEDURE [Scheduler_Services_Del]
(
	@officeID int
)

AS
	DELETE FROM AppSch_Appo"
dbo,Scheduler_ExceptionAppointmentStatus_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.230,2023-03-19 07:58:54.393,3296,Has Source,2025,"-- =============================================
-- File Name:	Scheduler_ExceptionAppointmentStatus_Get.sql
-- Description:	This Stored Procedure gets the status if an appointment is available or not.
-- Author:	Muhammad Nabeel
-- Example: [Scheduler_ExceptionAppointmentStatus_Get] 
-- History:	Date		Initials	Description
--			02/26/2010	AM			Created
--			01/26/2011  JD			Change this to return the number of conflicting appointments instead of a bool.
--			02/03/2011  JD			Corrected the da"
dbo,Scheduler_AppointmentRecurringInstances_Delete,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.643,2023-03-19 07:58:54.370,3296,Has Source,575,"
-- =============================================
-- Description:	deletes Recurring Appointment instances
-- Author:		Milenko Djuricin
-- History:		Date		Initials	Description
--				04/02/2010	MD			Created
--				11/04/2011	MJS			Updated
-- =============================================
CREATE PROCEDURE [Scheduler_AppointmentRecurringInstances_Delete]
	@recurringAppointmentID int
	
AS
BEGIN

	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	
	DELETE AppSch_Appoin"
dbo,Scheduler_AppointmentDetail_Save,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.553,2023-03-19 07:58:54.363,3296,Has Source,4347,"CREATE PROCEDURE [Scheduler_AppointmentDetail_Save]
	@appt_no INT = NULL
	,@locationID INT
	,@resourceID INT
	,@serv_no INT = NULL
	,@ins_no INT = NULL
	,@patientID INT = NULL
	,@appt_date DATETIME
	,@appt_start_time NVARCHAR(11)
	,@appt_end_time NVARCHAR(11)
	,@appt_notes NVARCHAR(255) = NULL
	,@appt_phone NVARCHAR(30) = NULL
	,@appt_cancel_ind BIT = 0
	,@appt_confirmed_ind BIT = NULL
	,@appt_left_msg_ind BIT = NULL
	,@appt_no_answer_ind BIT = NULL
	,@appt_conf_inits NVARCHAR(3) = NULL
	,@appt_"
dbo,Scheduler_AppointmentsInDayTimeSlotCount_Get,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.697,2023-03-19 07:58:54.360,3296,Has Source,1132,"

-- =============================================
-- Author:		Joel Deister
-- Create date: 01/18/2011
-- Description:	Gets the count of appointments for a Provider of a specific day of week and time slot.
-- =============================================

CREATE PROCEDURE [Scheduler_AppointmentsInDayTimeSlotCount_Get]
	@locationID			INT
	,@resourceId		INT
	,@dayOfWeek			INT		-- Sun=0, Mon=1 etc.
	,@startTime			DATETIME
	,@endTime			DATETIME
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSAC"
dbo,Scheduler_ServiceRemindersAppointmentCount_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.873,2023-03-19 07:58:54.350,3296,Has Source,967,"-- =============================================
-- Description:	Retrieves count of appointments for the service, resource, location, between start and end dates.
-- Author:		Milenko Djuricin
-- History:		Date		Initials	Description
--				05/04/2010	MD			Created
--              03/25/2022  KD          VNXT-10063
--              03/30/2022  KD          VNXT-10064
-- =============================================
CREATE PROCEDURE [Scheduler_ServiceRemindersAppointmentCount_Get]
	@appointmentTypeId ["
dbo,Scheduler_AppointmentIcon_Count,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.570,2023-03-19 07:58:54.340,3296,Has Source,840,"/****** Object:  StoredProcedure [dbo].[Scheduler_Appointment_Del]    Script Date: 04/13/2010 15:12:08 ******/
-- =============================================
-- FileName:	Scheduler_AppointmentIcon_Count
-- Description:	counts references to an icon in the appointments table
-- Author:		Ali Atabek
-- Example:		Scheduler_AppointmentIcon_Count 23
-- History:		Date		Initials	Description
--				05/04/2010	AA			Created
-- =============================================
CREATE PROCEDURE [Schedul"
dbo,Scheduler_AppointmentsInNormalAvailability_Get,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.710,2023-03-19 07:58:54.307,3296,Has Source,911,"

-- =============================================
-- Author:		Ali
-- Create date: 10/26/2012
-- Description:	Gets the count of future appointments for a Provider within Normal hours and in a specific day of week 
-- =============================================

CREATE PROCEDURE [Scheduler_AppointmentsInNormalAvailability_Get]
	@locationID			INT
	,@resourceId		INT
	,@dayOfWeek			INT		-- Sun=0, Mon=1 etc.
	,@startTime			nvarchar(8)
	,@endTime			nvarchar(8)

AS
BEGIN

	SELECT CO"
dbo,Scheduler_AppointmentsInRangeAvailability_Get,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.727,2023-03-19 07:58:54.183,3296,Has Source,1366,"

-- =============================================
-- Author:		Ali
-- Create date: 10/26/2012
-- Description:	Gets the count of appointments for a Provider within a date range 
-- and a specific day of week and within a time span. Only appointments that are 
-- today or in the future are considered. Past appointments are not counted. 
-- =============================================

CREATE PROCEDURE [Scheduler_AppointmentsInRangeAvailability_Get]
	@locationID			INT
	,@resourceId		IN"
dbo,Scheduler_AppointmentConfirmation_Upd,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.517,2023-03-19 07:58:54.177,3296,Has Source,886,"-- =============================================
-- Author:		G. Tran
-- Create date: 2/14/2009
-- Description:	Updates the appointment confirmation details
-- History:
--				MD	10/25/2010	Added showStatus
-- =============================================

CREATE PROCEDURE [Scheduler_AppointmentConfirmation_Upd]
	@appointmentID INT
	,@confirmed BIT = NULL
	,@showStatus SMALLINT = NULL
	,@leftMessage BIT = NULL
	,@noAnswer BIT = NULL
	,@initials NVARCHAR(3) = NULL
	,@notes NVARCHAR(2"
dbo,Scheduler_RecurringAppointment_Delete,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.107,2023-03-19 07:58:54.173,3296,Has Source,673,"-- =============================================
-- Description:	deletes  Recurring Appointment
-- Author:		Milenko Djuricin
-- History:		Date		Initials	Description
--				04/02/2010	MD			Created
--				04/22/2010	JL			Delete appointments manually
-- =============================================
CREATE PROCEDURE [Scheduler_RecurringAppointment_Delete]
	@recurringAppointmentID int
	
AS
BEGIN

	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	DELETE AppSch_Appoint"
dbo,Scheduler_AppointmentCountByTelehealthAppId_Get,SQL_STORED_PROCEDURE,2021-04-26 01:08:29.877,2023-03-19 07:58:54.153,692,Has Source,722,"
-- =============================================
-- Author:		Ravi Thakkar
-- Create date: 03/16/2021
-- Description:	Gets the count of upcoming appointments for a given telehealthApplicationId and location.
-- Note: Past appointments are not counted. 
-- =============================================

CREATE PROCEDURE [dbo].[Scheduler_AppointmentCountByTelehealthAppId_Get]
	@locationID			INT
	,@startDate			DATETIME
	,@telehealthAppId	VARCHAR(100)
AS
BEGIN	
	SELECT COUNT(appt_no) AS AppointmentCo"
dbo,Scheduler_AppointmentsInTimeSlot2_Get,SQL_STORED_PROCEDURE,2015-05-05 22:49:42.870,2023-03-19 07:58:54.150,2875,Has Source,1441,"-- =============================================
-- Author:		Paul Amedee
-- Create date: 03/11/2015
-- Description:	Gets the appointments for a Provider of a specific date and time slot.
-- =============================================

CREATE PROCEDURE [dbo].[Scheduler_AppointmentsInTimeSlot2_Get]
	@locationID			INT
	,@resourceId		INT
	,@appointmentDate	DATETIME
	,@startTime			NVARCHAR(22)
	,@endTime			NVARCHAR(22)
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	S"
dbo,SP_Archive_Appointment_Schedule,SQL_STORED_PROCEDURE,2017-03-02 00:03:29.107,2023-03-19 07:58:54.123,2208,Has Source,4694,"CREATE procedure [dbo].[SP_Archive_Appointment_Schedule]
as

Begin 
    begin
set identity_insert  [dbo].[AppSch_Appointment_Archive] on
insert into dbo.AppSch_Appointment_Archive([appt_no]
      ,[appointmentTypeId]
      ,[resourceId]
      ,[LocationID]
      ,[ins_no]
      ,[appt_phone]
      ,[appt_address]
      ,[appt_notes]
      ,[appt_date]
      ,[appt_start_time]
      ,[appt_end_time]
      ,[appt_cancel_ind]
      ,[appt_confirmed_ind]
      ,[appt_left_msg_ind]
      ,[appt_no_an"
dbo,WorkFlowPurge_Appointments,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.453,2023-03-19 07:58:54.013,3296,Has Source,1772,"
-- =============================================
-- Author:		Sam Callejo and Kris Jornlin
-- Create date: 01/30/2013
-- Description:	Gets only providers for listbox.
-- =============================================

CREATE PROCEDURE [dbo].[WorkFlowPurge_Appointments]  
	@Apptdate datetime,
	@ProcessToPurge varchar(50)
AS  
BEGIN  
	 	
		---------- Sanity Check : clean up rows --------------------------		 
		delete from temp_PurgeWorkFlowInfo where ProcessToPurge = @ProcessToPurge"
dbo,GetSpexFrameDetails,SQL_STORED_PROCEDURE,2013-02-20 00:01:01.483,2023-03-19 07:58:53.853,3679,Has Source,32778,"CREATE PROCEDURE [dbo].[GetSpexFrameDetails]
@SpexControlID int,
@SessionId uniqueidentifier,
@MatchSpexCollectionToSpexData bit
as
BEGIN
SET NOCOUNT ON
/******************************************
* LOAD SPEXFRAME FROM SPEXFRAMESTRING TABLE
*******************************************/
	MERGE SpexFrame sf
	USING SpexFrameString sfs
	ON sf.FPC = LTRIM(RTRIM(substring(sfs.SpexFrameDetails,1,14))) and sf.SpexCompanyId = sfs.SpexCompanyId
	WHEN MATCHED THEN
	  UPDATE
	  SET 	sf.SpexControlID = @SpexC"
dbo,LoadFrameCollectionForApi,SQL_STORED_PROCEDURE,2019-10-09 00:13:49.833,2023-03-19 07:58:53.680,1257,Has Source,24014,"-- ============================================================
-- Description: This stored proc loads the Spex Manufacturers Through Spex API, 
-- Spex Collections of the Spex Frames to the actual tables
-- which is retrieved from Jobson Frame API.
-- ============================================================
CREATE PROCEDURE [dbo].[LoadFrameCollectionForApi]
	@SpexControlForApiID INT
AS
BEGIN
SET NOCOUNT ON
	DECLARE @SpexCollectionID INT
	DECLARE @SpexCollectionName AS VARCHAR(150) 
	DECLARE"
dbo,CatalogCleanup_DuplicateFrameCollection,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.027,2023-03-19 07:58:53.640,1615,Has Source,11970,"CREATE PROCEDURE [dbo].[CatalogCleanup_DuplicateFrameCollection]
	@UseSystemCollectionID As INT, 
	@SetNewManufacturerName As VARCHAR(120), 
	@SetNewBrandName As VARCHAR(100), 
	@SetNewCollectionName AS VARCHAR(100),
	@CollectionNameTobeCleaned AS VARCHAR(100)
AS
BEGIN
	BEGIN TRAN T1
	BEGIN TRY  
		DECLARE @BrandName AS VARCHAR(100) 
		DECLARE @CleanCollectionName AS VARCHAR(100) 
		DECLARE @ManufacturerName AS VARCHAR(120) 
		DECLARE @SpexCompanyId AS VARCHAR(100) 
		DECLARE @DuplicateCollectio"
dbo,GetOpenAppointmentSlots_2,SQL_STORED_PROCEDURE,2021-09-29 17:23:44.237,2021-10-22 17:27:07.097,23,Has Source,67050,"CREATE PROCEDURE [dbo].[GetOpenAppointmentSlots_2]
-- parameters
	@begindate varchar(20), -- = '2050-04-01',
	@enddate varchar(20), -- = '2050-04-01',
	@officeNum varchar(25), -- '999',
	@providerId int, -- = 340,
	@duration int, -- = 15
	@scheduledServiceId int, -- = 197417
	@scheduledServiceDuration int, -- = 15
	@excludenicetimes bit
as
BEGIN
SET NOCOUNT ON;

-- get just dates from the parameters
DECLARE @beginDateWithTime varchar(20) = @begindate
DECLARE @endDateWithTime varc"
dbo,GetCompanyOpenAppointmentSlotsDev,SQL_STORED_PROCEDURE,2021-09-21 19:08:37.223,2021-09-22 12:56:00.420,1,Has Source,57078,"CREATE PROCEDURE [dbo].[GetCompanyOpenAppointmentSlotsDev]
-- parameters
	@begindate varchar(20),
	@enddate varchar(20),
	@companyId varchar(20),
	@duration int
AS
BEGIN
SET NOCOUNT ON;
-- declaration
DECLARE @beginDateDate DateTime = convert(date, @begindate);
DECLARE @endDateDate DateTime = convert(date,@enddate);
DECLARE @WeekStartDate DateTime;
DECLARE @WeekEndDate DateTime;
DECLARE @officeNum varchar(25);
DECLARE @tmpDateDateTime DateTime;
DECLARE @tmpDate varchar(20) = DATE"
dbo,GetOpenAppointmentSlots_Dev4,SQL_STORED_PROCEDURE,2021-09-07 10:47:17.893,2021-09-07 10:59:52.570,0,Has Source,63373,"
CREATE PROCEDURE [dbo].[GetOpenAppointmentSlots_Dev4]
-- parameters
	@begindate varchar(20), -- = '2050-04-01',
	@enddate varchar(20), -- = '2050-04-01',
	@officeNum varchar(25), -- '999',
	@providerId int, -- = 340,
	@duration int, -- = 15
	@scheduledServiceId int, -- = 197417
	@scheduledServiceDuration int, -- = 15
	@excludenicetimes bit
as
BEGIN
SET NOCOUNT ON;

-- get office id
DECLARE @officeId int;
select @officeId = officeId from Office where OfficeNum=@officeNum;

-- "
dbo,GetCompanyOpenAppointmentSlots_temp,SQL_STORED_PROCEDURE,2021-07-15 17:18:25.530,2021-07-22 17:18:29.920,7,Has Source,64163,"CREATE PROCEDURE [dbo].[GetCompanyOpenAppointmentSlots_temp]
-- parameters
	@begindate varchar(20),
	@enddate varchar(20),
	@companyId varchar(20),
	@duration int
AS
BEGIN
SET NOCOUNT ON;
-- declaration
DECLARE @beginDateDate DateTime = convert(date, @begindate);
DECLARE @endDateDate DateTime = convert(date,@enddate);
DECLARE @WeekStartDate DateTime;
DECLARE @WeekEndDate DateTime;
DECLARE @officeNum varchar(25);
DECLARE @tmpDateDateTime DateTime;
DECLARE @tmpDate varchar(20) = DA"
dbo,GetCompanyOpenAppointmentSlots_Dev,SQL_STORED_PROCEDURE,2021-07-13 16:34:27.867,2021-07-21 15:33:50.610,8,Has Source,72355,"CREATE PROCEDURE [dbo].[GetCompanyOpenAppointmentSlots_Dev]
-- parameters
	@begindate varchar(20),
	@enddate varchar(20),
	@companyId varchar(20),
	@duration int
AS
BEGIN
SET NOCOUNT ON;
-- declaration
DECLARE @beginDateDate DateTime = convert(date, @begindate);
DECLARE @endDateDate DateTime = convert(date,@enddate);
DECLARE @WeekStartDate DateTime;
DECLARE @WeekEndDate DateTime;
DECLARE @officeNum varchar(25);
DECLARE @tmpDateDateTime DateTime;
DECLARE @tmpDate varchar(20) = DAT"
dbo,GetOpenAppointmentSlots_Dev2,SQL_STORED_PROCEDURE,2021-07-15 17:57:41.803,2021-07-20 19:46:03.207,5,Has Source,64403,"CREATE PROCEDURE [dbo].[GetOpenAppointmentSlots_Dev2] 
-- parameters
	@begindate varchar(20), -- = '2050-04-01',
	@enddate varchar(20), -- = '2050-04-01',
	@officeNum varchar(25), -- '999',
	@providerId int, -- = 340,
	@duration int, -- = 15
	@scheduledServiceId int, -- = 197417
	@scheduledServiceDuration int -- = 15
as
BEGIN
SET NOCOUNT ON;

-- get office id
DECLARE @officeId int;
select @officeId = officeId from Office where OfficeNum=@officeNum;

-- sql code to get provider b"
dbo,GetOpenAppointmentSlots_Dev3,SQL_STORED_PROCEDURE,2021-07-16 20:15:09.217,2021-07-19 17:03:00.280,3,Has Source,62223,"CREATE PROCEDURE [dbo].[GetOpenAppointmentSlots_Dev3] 
-- parameters
	@begindate varchar(20), -- = '2050-04-01',
	@enddate varchar(20), -- = '2050-04-01',
	@officeNum varchar(25), -- '999',
	@providerId int, -- = 340,
	@duration int, -- = 15
	@scheduledServiceId int, -- = 197417
	@scheduledServiceDuration int -- = 15
as
BEGIN
SET NOCOUNT ON;

-- get office id
DECLARE @officeId int;
select @officeId = officeId from Office where OfficeNum=@officeNum;

-- sql code to get provider b"
dbo,GetOpenAppointmentSlots_Dev,SQL_STORED_PROCEDURE,2021-07-09 15:09:28.393,2021-07-13 16:53:17.670,4,Has Source,58912,"CREATE PROCEDURE [dbo].[GetOpenAppointmentSlots_Dev] 
-- parameters
	@begindate varchar(20), -- = '2050-04-01',
	@enddate varchar(20), -- = '2050-04-01',
	@officeNum varchar(25), -- '999',
	@providerId int, -- = 340,
	@duration int, -- = 15
	@scheduledServiceId int, -- = 197417
	@scheduledServiceDuration int -- = 15
as
BEGIN
SET NOCOUNT ON;

-- get office id
DECLARE @officeId int;
select @officeId = officeId from Office where OfficeNum=@officeNum;

-- sql code to get provider bl"
dbo,FrameSearch_Get_Testing,SQL_STORED_PROCEDURE,2020-12-09 22:44:53.527,2020-12-09 22:47:32.210,0,Has Source,5587,"
-- =============================================
-- Author:		<Author,,Ankur Patel>
-- Create date: <Create Date,,02/18/2015>
-- Description:	<Description,,Get Frame Search Data>
-- =============================================
--exec FrameSearch_Get '936','936','MYICM',NULL,NULL
--exec FrameSearch_Get_Old '936','936','NIKE%1000%',NULL,NULL
--exec FrameSearch_Get '936','936','NIKE%1000%',NULL,NULL
--exec FrameSearch_Get '936','936','NIKE%1000%',NULL,1

/*History:
10/23/19 - Amish - U"
dbo,__GetInvoiceTransactions,SQL_STORED_PROCEDURE,2020-11-16 11:24:19.110,2020-11-16 11:24:19.110,0,Has Source,2301,"-- InvoiceTransaction object
CREATE PROCEDURE [dbo].[__GetInvoiceTransactions]
    @InvoiceNum int,
    @CompanyId varchar(20),
	@MessageId varchar(36),
	@OrderNums varchar(MAX)
AS

SELECT
                            MessageId = @MessageId
                            ,Version = convert(varchar(10),'1.0.0')
                            ,TransactionId = pt.PosTransactionUid
                            ,DisplayTransactionNum = pt.TransactionID
                            ,PatientId = p."
dbo,__GetInvoiceProducts,SQL_STORED_PROCEDURE,2020-11-12 18:43:25.490,2020-11-12 19:02:29.720,0,Has Source,12094,"-- InvoiceProduct object

CREATE PROCEDURE [dbo].[__GetInvoiceProducts]
@MessageId varchar(36),
@OrderNums varchar(MAX),
@InvoiceNum int
AS

                        SELECT 
                            MessageId = @MessageId 
                            ,Version = convert(varchar(10),'1.0.0') 
                            ,InvoiceProductId = id.InvoiceDetailUid 
                            ,InvoiceId = invs.InvoiceSummaryUid 							
                            ,Quantity = id.Quantity "
dbo,__GetInvoiceOrders,SQL_STORED_PROCEDURE,2020-11-05 15:45:15.973,2020-11-11 01:29:31.117,6,Has Source,9788,"CREATE PROCEDURE [dbo].[__GetInvoiceOrders]
@InvoiceNum int
AS
SELECT o.StatusCode
                            ,Version = convert(varchar(10),'1.0.0')
                            ,InvoiceOrderId = invs.invoicesummaryuid
                            ,OrderId = o.OrderUid
                            ,DisplayOrderNum = o.orderNum
                            ,PairNum = 1
                            ,OfficeNum = o.OfficeNum
                            ,AssociateId = e.EMREmployeeNum
       "
dbo,__GetInvoice,SQL_STORED_PROCEDURE,2020-11-05 15:08:19.567,2020-11-05 15:08:19.567,0,Has Source,591,"-- Invoice object (New)
CREATE PROCEDURE [dbo].[__GetInvoice]
@InvoiceNum int
AS

SELECT TOP 1
MessageId = convert(varchar(36), '')
,Version = convert(varchar(10), '1.0.0')
,InvoiceId = pp.PaymentUid
,DisplayInvoiceId = pp.PaymentId
,EmployeeId = e.EMREmployeeNum
,EmployeeLogon = u.name
,InvoiceDate = convert(varchar(20), pp.PaymentDate, 120)
FROM PosPayment pp
INNER JOIN PosTransaction pt ON pt.PaymentId=pp.PaymentId --and pt.TransactionTypeID in (1,3,5)
INNER JOIN Employee e ON e.employee"
dbo,__GetInvoiceTransactionForStore,SQL_STORED_PROCEDURE,2020-07-23 15:02:41.190,2020-10-23 13:32:17.783,92,Has Source,1433,"-- InvoiceTransaction object
CREATE PROCEDURE __GetInvoiceTransactionForStore
    @OrderNum int,
    @CompanyId varchar(20)
AS

SELECT
    MessageId = convert(varchar(36), '')
    ,Version = convert(varchar(10), '1.0.0')
    ,TransactionId = pt.PosTransactionUid
    ,DisplayTransactionNum = pt.TransactionID
    ,PatientId = p.PatientUid
    ,PaymentId = pp.PaymentUid
    ,DisplayPaymentNum = pp.PaymentID
    ,TransactionType = ptt.Description
    ,TransactionDate = convert(varchar"
dbo,__GetLabOrderForStore,SQL_STORED_PROCEDURE,2020-09-22 11:45:05.980,2020-09-22 11:45:05.980,0,Has Source,4554,"
CREATE PROCEDURE [dbo].[__GetLabOrderForStore]
@OrderNum int
AS

SELECT
	MessageId = convert(varchar(36), '')
	,Version = convert(varchar(10), '1.0.0')
	,o.[OrderUid] as OrderId
	,o.[OrderNum] as DisplayOrderNum
	,InvoiceId = (select top 1 paymentuid from pospayment where paymentid in (select paymentid from postransaction where transactiontypeid=2 and orderid=@OrderNum) order by paymentid)
	,o.QualificationId as QualificationId
	,o.[OfficeNum]
	,o.[LabNum]
	,o.[ShipToType]
	,ship"
dbo,__GetInventoryActivityForStore,SQL_STORED_PROCEDURE,2020-07-23 15:05:09.123,2020-09-04 12:45:09.000,43,Has Source,1232,"CREATE PROCEDURE __GetInventoryActivityForStore 
@ID int
AS

SELECT  
MessageId = convert(varchar(36), '')
,Version = convert(varchar(10), '1.0.0')
,InventoryActivityId = InventoryActivityUid
,OfficeNum = [OfficeNum]
,ItemSku = i.ItemNum
,ItemUpc = i.UpcCode
,ReferenceNum = [ReferrenceNum]
,InvTransType = itt.description
,Quantity = [Quantity]
,TransactionDate = convert(varchar(20), [TransactionDate], 120)
,[AdjustmentReason] = c1.value
,ia.ID
,Employee = e.EmrEmployeeNum
,Tran"
dbo,__GetEyeglassExtraForStore,SQL_STORED_PROCEDURE,2020-08-06 12:18:03.650,2020-08-06 12:18:03.650,0,Has Source,774,"
CREATE PROCEDURE [dbo].[__GetEyeglassExtraForStore]
@OrderNum int
AS

SELECT
	MessageId = convert(varchar(36), '')
	,Version = convert(varchar(10), '1.0.0')
	,EGExtra.[ID]
	,[OrderNum]
	,[ItemType] = ItemType.Description
	--,[ItemID]
	,ItemName = i.ItemName
	,[Comment]
	,[ColorDensity]
	,Eye = whichlens
	,ExtraCode1 = ism.Code1
	,ExtraCode2 = ism.Code2
	,ExtraCode3 = ism.Code3
	,ExtraCode4 = ism.Code4
	,ExtraCode5 = ism.Code5
	,ExtraCode6 = ism.Code6
	,ExtraCode7 = ism.Cod"
dbo,__GetEyeglassOrderFrameForStore,SQL_STORED_PROCEDURE,2020-08-06 12:18:01.160,2020-08-06 12:18:01.160,0,Has Source,1807,"
CREATE PROCEDURE [dbo].[__GetEyeglassOrderFrameForStore]
@OrderNum int
AS

SELECT 
	MessageId = convert(varchar(36), '')
	,Version = convert(varchar(10), '1.0.0')
	,ego.[OrderNum]
	,[EGType]
	,[NearOnly]
	,[Uncut]
	,[ArBackSide]
	,[DispenseType] = dt.Description
	,[DispenseNote]
	,[toMakeFrame]
	,[toMakeRLens]
	,[toMakeLLens]
	,[toMakeExtra]
	,[isSafety]
	,[RxType]
	,[FrameWaiting]
	,[FrameVendorOrderNumber]
	,[SpecialFrameWholeSaleCost]
	,MakeabilityCallDate = convert(v"
dbo,__GetEyeglassRxForStore,SQL_STORED_PROCEDURE,2020-08-06 12:17:58.200,2020-08-06 12:17:58.200,0,Has Source,1121,"
CREATE PROCEDURE [dbo].[__GetEyeglassRxForStore]
@OrderNum int
AS

SELECT
	MessageId = convert(varchar(36), '')
	,Version = convert(varchar(10), '1.0.0')
	,egrx.[ID]
	,[OrderNum]
	,[Eye]
	--,egrx.[ItemID]
	,[FPD]
	,[NPD]
	,[Sphere]
	,[Cylinder]
	,[Axis]
	,[Prism1]
	,[PrismDir1]
	--,[Dir1]
	,[Prism2]
	,[PrismDir2]
	--,[Dir2]
	--,[ResultPrism]
	--,[ResultAngle]
	,[Base]
	,[OcHeight]
	,HeightDirection = 'H'
	,[AddPower1]
	,[AddPower2]
	,[SegHeight]
	,[Thick]
	,[IsBa"
dbo,__GetInvoiceDetailForStore,SQL_STORED_PROCEDURE,2020-08-06 12:17:55.477,2020-08-06 12:17:55.477,0,Has Source,1053,"
CREATE PROCEDURE [dbo].[__GetInvoiceDetailForStore]
@OrderNum int
AS

SELECT 
	MessageId = convert(varchar(36), '')
	,Version = convert(varchar(10), '1.0.0')
	,i.[ID]
	,[InvoiceID] = newid()
	,[LineNum]
	,d.OrderNum
	,OrderDate = convert(varchar(20), OrderDate, 120)
	,i.[ItemType]
	,ItemTypeDescription = t.Description
	--,[ItemID]
	,i.ItemNum
	,i.UPCCode
	,[Quantity]
	,[Price]
	--,[DiscountTypeID]
	,DiscountType = dt.Description
	,DiscountLabCode1 = dt.LabCode1
	,Discount"
dbo,__GetEndOfDayForStore,SQL_STORED_PROCEDURE,2020-07-30 15:06:33.073,2020-07-30 15:06:33.073,0,Has Source,2022,"
CREATE PROCEDURE __GetEndOfDayForStore
@OfficeNum varchar(20),
@TransDate date = null
AS

IF @TransDate IS NULL
	SET @TransDate = getdate() - 1

select
MessageId = convert(varchar(36), '')
,Version = convert(varchar(10), '1.0.0')
,OfficeEndOfDayActivityId = newid()
,DataStructureVersion = '1.0.0'
,DayCloseId = dc.DayCloseId
,OfficeEndOfDayActivityDate = convert(varchar(20), dc.TransDate, 120)
,GeneratedDate = convert(varchar(20), getdate(), 120) -- created by the API
,CompanyUi"
dbo,__GetEndOfDayTenderDetailForStore,SQL_STORED_PROCEDURE,2020-07-28 18:37:37.723,2020-07-28 18:37:37.723,0,Has Source,751,"
CREATE PROCEDURE __GetEndOfDayTenderDetailForStore
@OfficeNum varchar(20),
@TransDate date = null
AS

IF @TransDate IS NULL
	SET @TransDate = getdate() - 1

SELECT 
MessageId = convert(varchar(36), '')
,Version = convert(varchar(10), '1.0.0')
,EndOfDayTenderDetailId = newid() -- new field
,TenderType = pt.Description
,Computed = dcd.Computed
,StoreActual = dcd.Actual
,VarianceNotes = dcd.VarExplanation
,BackOfficeActual = dcd.BankActual
,BackOfficeNotes = dcd.SalesAuditRemarks"
dbo,__GetEndOfDayOrderForStore,SQL_STORED_PROCEDURE,2020-07-28 18:35:11.163,2020-07-28 18:35:11.163,0,Has Source,839,"
CREATE PROCEDURE __GetEndOfDayOrderForStore
@OfficeNum varchar(20),
@TransDate date = null
AS

IF @TransDate IS NULL
	SET @TransDate = getdate() - 1

SELECT
MessageId = convert(varchar(36), '')
,Version = convert(varchar(10), '1.0.0')
,OrderId = o.OrderUid
,DisplayOrderNum = convert(varchar(100), o.OrderNum)
,PairNum = 1
,OrderType = case 
	when o.[OrderType]='E' then 'Eyeglass' 
	when o.[OrderType]='M' then 'Miscellaneous' 
	when o.[OrderType]='S' then 'Soft CL'
	when o.[Ord"
dbo,__GetInvoiceProductForStore,SQL_STORED_PROCEDURE,2020-07-27 16:41:20.937,2020-07-27 16:41:20.937,0,Has Source,1972,"
-- InvoiceProduct object

CREATE PROCEDURE [dbo].[__GetInvoiceProductForStore]
@OrderNum int
AS

SELECT 
MessageId = convert(varchar(36), '')
,Version = convert(varchar(10), '1.0.0')
,InvoiceProductId = id.InvoiceDetailUid
,InvoiceId = invs.InvoiceSummaryUid
,Quantity = id.Quantity
,ListPrice = id.Price
,Tax = id.Tax
,GlobalDiscount = id.Discount
,LineDiscount = id.LineDisc
,PackageDiscount = id.PackageDisc
,DiscountType1 = dt.LabCode1
,DiscountType2 = dt.LabCode2
,Amount = "
dbo,__GetPatientExamForStore,SQL_STORED_PROCEDURE,2020-07-23 15:03:48.853,2020-07-23 17:37:42.590,0,Has Source,1073,"
-- PatientExam object
CREATE PROCEDURE [dbo].[__GetPatientExamForStore]
@OrderNum int
AS

SELECT 
MessageId = convert(varchar(36), '')
,Version = convert(varchar(10), '1.0.0')
,PatientExamId = pe.[PatientExamUid]
,DisplayPatientExamNum = pe.ID
,StaffId = e1.EmrEmployeeNum
,DoctorId = e2.EmrEmployeeNum
,ExamDate = convert(varchar(20), pe.[ExamDate], 120)
,ExpireDate = convert(varchar(20), pe.[ExpireDate], 120)
,ExamRXType = c1.value
,RxType = c2.value
,RecheckExamID = pe2.Patien"
dbo,__GetPatientForStore,SQL_STORED_PROCEDURE,2020-07-23 15:04:32.540,2020-07-23 15:04:32.540,0,Has Source,2271,"-- Patient object
CREATE PROCEDURE __GetPatientForStore
@OrderNum int
AS

DECLARE @AddressTemp TABLE
(
	AddressID int
)

INSERT INTO @AddressTemp
SELECT ID FROM Address
WHERE ID in (SELECT AddressID FROM PatientAddress WHERE PatientID in (select customerid from orders where ordernum = @OrderNum))
AND IsPrimary=1

DECLARE @PhoneTemp TABLE
(
	PhoneID int,
	IsPrimary bit
)

INSERT INTO @PhoneTemp
SELECT ID,IsPrimary FROM Phone
WHERE ID in (SELECT PhoneID FROM PatientPhone WHE"
dbo,__GetTransactionPaymentForStore,SQL_STORED_PROCEDURE,2020-07-23 15:03:16.027,2020-07-23 15:03:16.027,0,Has Source,719,"-- TransactionPayment object
CREATE PROCEDURE __GetTransactionPaymentForStore
@OrderNum int
AS

SELECT
MessageId = convert(varchar(36), '')
,Version = convert(varchar(10), '1.0.0')
,PaymentId = ppd.PosPaymentDetailUid
,Amount = ppd.Amount
,PaymentType = ptype.Description
,AuthorizationCode = p1.AuthorizationCode
,CreditCardLast4 = p1.Last4
,OrderNum = pt.OrderID
,TransactionNum = pt.TransactionID
FROM PosPaymentDetail ppd
INNER JOIN PosTransaction pt on pt.paymentid=ppd.PaymentID"
dbo,__GetInvoiceProductTaxBreakdownForStore,SQL_STORED_PROCEDURE,2020-07-23 15:02:06.810,2020-07-23 15:02:06.810,0,Has Source,539,"-- InvoiceProductTaxBreakdown
CREATE PROCEDURE __GetInvoiceProductTaxBreakdownForStore
@OrderNum int
AS

SELECT 
MessageId = convert(varchar(36), '')
,Version = convert(varchar(10), '1.0.0')
,TaxAuthId = [TaxAuthGuid]
,TaxAuthName = [TaxAuthName]
,OriginalTaxRate = [OriginalTaxRate]
,CurrentTaxRate = [CurrentTaxRate]
,TaxAmount = [TaxAmount]
,TaxExemptWithRx = [TaxExemptWithRx]
,InvoiceDetailId = [InvoiceDetailId]
,OrderNum = [OrderNum]   
 
 FROM [Blink].[dbo].[InvoiceDetailTax"
dbo,__GetOrderInsuranceForStore,SQL_STORED_PROCEDURE,2020-07-23 15:01:25.033,2020-07-23 15:01:25.033,0,Has Source,943,"CREATE PROCEDURE [dbo].[__GetOrderInsuranceForStore]
@OrderNum int
AS

DECLARE @InsuranceOrder TABLE
(
  IsPrimary bit, 
  OrderInsuranceId int
)

INSERT
into @InsuranceOrder
SELECT
DISTINCT IsPrimary, OrderInsuranceId 
from invoiceinsurancedet 
where orderinsuranceid in (select id from orderinsurance where orderid = @OrderNum)


SELECT
MessageId = convert(varchar(36), '')
,Version = convert(varchar(10), '1.0.0')
,OrderNum = oins.OrderId
,IsPrimary = ior.IsPrimary
,IsBilla"
dbo,__GetInvoiceForStore,SQL_STORED_PROCEDURE,2020-07-23 14:41:00.663,2020-07-23 14:41:00.663,0,Has Source,537,"-- Invoice object (New)
CREATE PROCEDURE __GetInvoiceForStore
@OrderNum int
AS

SELECT 
MessageId = convert(varchar(36), '')
,Version = convert(varchar(10), '1.0.0')
,InvoiceId = newid()
,DisplayInvoiceId = o.OrderNum
,EmployeeId = e.EMREmployeeNum
,EmployeeLogon = u.name
,InvoiceDate = convert(varchar(20), o.OrderDate, 120)
FROM Orders o
-- FROM the new table Invoice which does not currently exist
inner join Employee e on e.employee=o.associate
inner join Users u on u.id=e.useri"
dbo,__GetInvoiceOrderForStore,SQL_STORED_PROCEDURE,2020-07-23 14:40:33.330,2020-07-23 14:40:33.330,0,Has Source,2972,"CREATE PROCEDURE __GetInvoiceOrderForStore
@OrderNum int
AS

SELECT 
MessageId = convert(varchar(36), '')
,Version = convert(varchar(10), '1.0.0')
,InvoiceOrderId = newid()
,OrderId = o.OrderNum
,displayOrderNum = o.orderNum
,PairNum = 1
,OfficeNum = o.OfficeNum
,AssociateId = e.EMREmployeeNum
,DoctorId = e2.EMREmployeeNum
,InvoiceDate = convert(varchar(20), o.OrderDate, 120)
,IsOutsideDoctor = CASE WHEN ISNULL(e1.OutsideDrId,0)=0 THEN convert(bit, 0) ELSE convert(bit, 1) END
,Ou"
dbo,Scheduler_OfficeTime_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.817,2020-04-17 23:42:29.867,2230,Has Source,812,"


-- =============================================
-- Author:		Joel Deister
-- Create date: 11/09/2012
-- Description:	Returns a date/time that is offset to the offices timezone.
-- Use Scheduler_GetOfficeTime function to get the time.
-- This is based on current rules for Daylight Savings time
-- at http://www.nist.gov/pml/div688/dst.cfm
-- Daylight Saving Time in the United States
-- begins at 2:00 a.m. on the second Sunday of March
-- ends at 2:00 a.m. on the first Sunday of Nove"
dbo,HandleStockOrdersWithCLReturns,SQL_STORED_PROCEDURE,2019-11-08 16:56:38.483,2019-11-08 16:57:52.823,0,Has Source,1897,"-- =============================================================================================
-- Description:	This procedure will identify and load the returned CL orders in an open supplier 
-- stockorder to a table - StockOrders_CLReturns
-- =============================================================================================
CREATE PROCEDURE [dbo].[HandleStockOrdersWithCLReturns]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT"
dbo,MergeExtensionTables,SQL_STORED_PROCEDURE,2016-10-26 00:03:32.973,2019-03-25 10:53:00.287,880,Has Source,207,"CREATE PROCEDURE [dbo].[MergeExtensionTables]
	@Patient_ID1 INT,
	@Patient_ID2 INT

AS
BEGIN
	SET NOCOUNT ON;

	UPDATE PatientExam_Extension set PatientId = @Patient_ID1 where patientid = @Patient_ID2
		
END"
dbo,Scheduler_AppointmentBookByPatId,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.747,2018-10-16 09:46:45.720,1681,Has Source,5978,"
CREATE PROCEDURE [dbo].[Scheduler_AppointmentBookByPatId]                
@PatientId int,      
@CompanyId varchar(20)      
              
AS                
BEGIN                
--Scheduler_AppointmentBookByPatId 489538, 'AL999'      
 SET NOCOUNT ON;                
             
SELECT DISTINCT appt.appt_no              
              , appt.ResourceId              
              , appt.PatientID              
              , CONVERT(DATETIME, appt.appt_date) as appt_date        
         "
dbo,Scheduler_ScheduleTemplate_ServiceGroupServiceItems_Save,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.203,2018-10-16 09:46:45.203,0,Has Source,288,"CREATE PROCEDURE [Scheduler_ScheduleTemplate_ServiceGroupServiceItems_Save] 
	(
	@groupId int,
	@serviceID int = null
	)
AS
	INSERT INTO Appsch_SchedulerTemplate_ServiceGroupItems
			(
			service_GroupID
			, appointmentTypeId
			)
			VALUES
			(
			@groupId
			, @serviceID 
			)
	RETURN"
dbo,Scheduler_ScheduleTemplate_ServiceGroupServiceItems_Delete,SQL_STORED_PROCEDURE,2018-10-16 09:46:45.197,2018-10-16 09:46:45.197,0,Has Source,201,"CREATE PROCEDURE [Scheduler_ScheduleTemplate_ServiceGroupServiceItems_Delete] 
	(
	@groupId int
	)
AS
	DELETE FROM Appsch_SchedulerTemplate_ServiceGroupItems
	WHERE service_GroupID = @groupId
	
	RETURN"
dbo,GetLatestTransTypeAndAmount,SQL_STORED_PROCEDURE,2017-04-13 00:40:54.700,2018-10-16 09:46:44.670,551,Has Source,272,"CREATE PROC [dbo].[GetLatestTransTypeAndAmount]
    @LineItemId INT
AS
BEGIN
	SET NOCOUNT ON;
	       
     SELECT		
				CASE WHEN PatAR = 0 THEN 1 ELSE 0 END AS TransTypeIns,
				InsAR + PatAR AS Amount
	FROM		BillingLineItemCurrentAR
	WHERE		LineItemId = @LineItemId
END"
dbo,PearleKPISetup,SQL_STORED_PROCEDURE,2016-07-27 00:03:46.127,2018-08-23 15:34:13.093,757,Has Source,42504,"
CREATE PROCEDURE [dbo].[PearleKPISetup]
AS
BEGIN

 DECLARE @TID AS VARCHAR(200)

	DECLARE TempCursor CURSOR FOR
	SELECT ID FROM COMPANYINFO

	OPEN TempCursor

	FETCH NEXT FROM TempCursor INTO
	@TID

	WHILE @@FETCH_STATUS = 0
	BEGIN
--------------------------------------hours-------------------------------
	IF NOT EXISTS (SELECT ID FROM KPI WHERE COMPANY = @TID AND Description = 'Hours')
	BEGIN
		DECLARE @KPIID AS int
		SET @KPIID = 0
------INSERT INTO KPI TABLE

	INSERT INTO [KPI] ([Company],[D"
dbo,SaveWholeSalePriceBulkFrameSetup,SQL_STORED_PROCEDURE,2014-12-17 23:08:36.767,2018-08-23 15:34:10.730,1345,Has Source,6279,"CREATE PROCEDURE [dbo].[SaveWholeSalePriceBulkFrameSetup]
    @companyId VARCHAR(20),
    @onlyPriceActive INT,
    @changeTypeValue DECIMAL(18, 2),
    @changeTypePercentage INT,
    @dollarAmountValue DECIMAL(18, 2),
    @dollarAdd INT,
    @endIn VARCHAR(100),
    @selectedCollections VARCHAR(MAX)
AS
BEGIN
    DECLARE @tranname VARCHAR(20);
    SELECT @tranname = 'SaveWholeSalePriceBFSTransaction';
    SET NOCOUNT ON;
    IF (@onlyPriceActive = 0)
    BEGIN
        --activate "
dbo,CleanupDuplicateFrameCollection,SQL_STORED_PROCEDURE,2017-09-20 08:27:18.640,2018-08-23 15:34:10.030,337,Has Source,11927,"CREATE PROCEDURE [dbo].[CleanupDuplicateFrameCollection]
	@UseSystemCollectionID As INT, 
	@SetNewManufacturerName As VARCHAR(120), 
	@SetNewBrandName As VARCHAR(100), 
	@SetNewCollectionName AS VARCHAR(100),
	@CollectionNameTobeCleaned AS VARCHAR(100)
AS
BEGIN
	BEGIN TRAN T1
	BEGIN TRY  
		DECLARE @BrandName AS VARCHAR(100) 
		DECLARE @CleanCollectionName AS VARCHAR(100) 
		DECLARE @ManufacturerName AS VARCHAR(120) 
		DECLARE @SpexCompanyId AS VARCHAR(100) 
		DECLARE @DuplicateCollectionID AS V"
dbo,GetMonthlyNetSalesSummary,SQL_STORED_PROCEDURE,2016-03-09 00:02:23.900,2018-08-23 15:34:09.887,897,Has Source,5611,"CREATE PROCEDURE [dbo].[GetMonthlyNetSalesSummary]
@fromDate as datetime,
@toDate as datetime,
@officeNum varchar(max),
@doctorIds varchar(max),
@companyId varchar(20)

AS
BEGIN
   SET NOCOUNT ON;
   SELECT ID as OfficeID INTO #OfficeList from GetOfficeNumber(@officeNum);

   WITH postransaction_CTE AS
   (
     SELECT * FROM (
        SELECT orderid, amount, COALESCE(doctorid,1) as DoctorId, TransactionTypeID , o.officeNum as officeNum 
	    FROM dbo.PosTransaction pt 
        "
dbo,LoadAccessories_NewClients,SQL_STORED_PROCEDURE,2018-03-23 08:44:34.573,2018-06-25 10:36:28.080,94,Has Source,16812,"CREATE PROCEDURE [dbo].[LoadAccessories_NewClients]
(@RESULT AS INT = 0 OUTPUT) 
AS
BEGIN
       -- SET NOCOUNT ON added to prevent extra result sets from
       -- interfering with SELECT statements.
       SET NOCOUNT ON;
                     -- @TStyle, @TSize,@TTemple,@TAMeas, @TBMeas, @TEdMeas, @TDblMeas,@TBridge,@TCategory, @TCost, @TList,@TOPC,
               -- @TType, @TStatus, @TGroup,@TItemNo, @TFrameType,@Collection,@Model,@TRetail,@TRetailPrice2
	   DECLARE @TID AS int
   "
dbo,LoadFrames_NewClients,SQL_STORED_PROCEDURE,2017-12-28 14:11:01.980,2018-06-13 13:45:28.320,167,Has Source,43416,"CREATE PROCEDURE [dbo].[LoadFrames_NewClients]
(@RESULT AS INT = 0 OUTPUT) 
AS
BEGIN
       -- SET NOCOUNT ON added to prevent extra result sets from
       -- interfering with SELECT statements.
       SET NOCOUNT ON;
                     -- @TStyle, @TSize,@TTemple,@TAMeas, @TBMeas, @TEdMeas, @TDblMeas,@TBridge,@TCategory, @TCost, @TList,@TOPC,
               -- @TType, @TStatus, @TGroup,@TItemNo, @TFrameType,@Collection,@Model,@TRetail,@TRetailPrice2
	   DECLARE @TID AS int
       D"
dbo,ExportData,SQL_STORED_PROCEDURE,2016-05-10 18:04:32.097,2016-05-10 18:04:32.097,0,Has Source,1818,"




CREATE procedure [dbo].[ExportData]
@@companyid varchar(20)
as 
begin
exec xp_cmdshell 'DEL D:\export\output.csv'
end
begin
select * into  blink.dbo.temptable
from (select p.*,
                    lastexamdate101 = convert(varchar,lastexamdate,101),
                    b.address1,b.address2,b.city,b.state,b.zipcode, 
                       homephone = isnull((select top 1 phonenumber from phone, patientphone pp where pp.patientid = p.id and pp.phoneid = phone.id and phone.ph"
dbo,CreatePrimaryPhone,SQL_STORED_PROCEDURE,2015-08-14 19:02:57.650,2015-08-14 19:25:50.403,0,Has Source,947,"
CREATE PROCEDURE [dbo].[CreatePrimaryPhone]

	@PatientID int,
	@PhoneNum varchar(50)
AS
BEGIN

	DECLARE @PhoneID INT;
	DECLARE @myError INT;

	IF (ISNULL(@PatientID, 0) = 0)
	BEGIN
		RAISERROR('Invalid parameter: @PatientID cannot be NULL or zero', 18, 0)
		RETURN
	END

	IF (ISNULL(@PhoneNum, '') = '')
	BEGIN
		RAISERROR('Invalid parameter: @PhoneNum cannot be NULL or blank', 18, 0)
		RETURN
	END

	IF NOT EXISTS (
		SELECT * FROM Patient p
			JOIN PatientPhone pp on pp."
dbo,SetupNewCompanyTest,SQL_STORED_PROCEDURE,2015-01-16 18:25:13.823,2015-01-16 18:25:13.823,0,Has Source,88459,"CREATE PROCEDURE [dbo].[SetupNewCompanyTest]
	@NewCompanyID varchar(20),
	@CompanyName varchar(30),
	@OfficeKey varchar(10),
	@OfficeTimeZone int,
	@Password varchar(128),
	@Email varchar(100),
	
	@CompanyAddress1 varchar(100),
	@CompanyAddress2 varchar(100),
	@ProviderNpi varchar(100),
	@ProviderTaxId varchar(100),
	@CompanyFax varchar(100),
	@CompanyPhone varchar(100),
	@CompanyCity varchar(50),
	@CompanyState varchar(2),
	@CompanyZip varchar(30),

	@ProviderName varchar(30),"
dbo,LoadFromCLTemp,SQL_STORED_PROCEDURE,2014-05-21 12:47:11.537,2014-07-18 10:07:59.727,58,Has Source,6162,"-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[LoadFromCLTemp]
AS
BEGIN
	
	DECLARE @styleid AS INT
	DECLARE @prd_upc_code AS varchar(50)
	DECLARE @prd_description AS varchar(50)
	DECLARE @ItemID AS int
	DECLARE @ItemNum AS varchar(50)
	DECLARE @PowerID AS int
	DECLARE @ColorCode AS varchar(50)  
	DECLARE @Sphere AS d"
dbo,SaveItemPrice_Extensions,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.973,2014-03-10 00:09:07.973,0,Has Source,630,"
CREATE PROC [dbo].[SaveItemPrice_Extensions]
	@ItemID			INT, 
	@PriceTypeID	INT, 
	@Price			DECIMAL(8,2),
	@PriceListID	INT
AS
BEGIN
	SET NOCOUNT ON;
	
	IF EXISTS
	(
		SELECT	* 
		FROM	ItemPrice
		WHERE	ItemID		= @ItemID
		AND		PriceTypeID = @PriceTypeID
		AND		PriceListID = @PriceListID
	)
	BEGIN
		UPDATE	ItemPrice
		SET		Price		= @Price
		WHERE	ItemID		= @ItemID
		AND		PriceTypeID = @PriceTypeID
		AND		PriceListID = @PriceListID;
	END
	ELSE
	BEGIN
		INSERT INTO Item"
dbo,RemoveDuplicateRecalls,SQL_STORED_PROCEDURE,2014-03-10 00:09:07.970,2014-03-10 00:09:07.970,0,Has Source,870,"

CREATE PROCEDURE [dbo].[RemoveDuplicateRecalls]
@firstRecallID Varchar(20),
@RecallIDs Varchar(200)
AS
BEGIN
	SET NOCOUNT ON;
         
         
         DECLARE @RecallID AS varchar(50) 
         
         DECLARE DuplicateRecallCursor CURSOR FOR
	    select id from dbo.GetStringintable(@RecallIDs)	
	
	     OPEN DuplicateRecallCursor

	FETCH NEXT FROM DuplicateRecallCursor INTO
	@RecallID

	WHILE @@FETCH_STATUS = 0			
		BEGIN		
			
    delete from recalldetails where r"
WorkQueues,WorkFlowPurge_Clean,SQL_STORED_PROCEDURE,2014-03-10 00:08:58.310,2014-03-10 00:08:58.310,0,Has Source,714,"
-- =============================================
-- Author: Kris Jornlin
-- Create date: 03/13/2013
-- Description: Cleans WorkQueue tables
-- =============================================

CREATE PROCEDURE [WorkQueues].[WorkFlowPurge_Clean]  
        @WFDataTypeId int
AS  
BEGIN  

        --Clean the WorkQueue workflow tables from the results of a previous run
        --Only clean the rows associated with the particular data type (claims, orders, etc.)

        delete WorkQueue"
dbo,ExampleProcedure,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.230,2014-03-10 00:08:02.230,0,Has Source,241,"
CREATE PROCEDURE dbo.ExampleProcedure
@CompanyID as varchar(8),
@SortType as int
AS
BEGIN
	SET NOCOUNT ON;
	declare @SomeLocalValue int
		
	IF (@SortType) = 1
		BEGIN
			select 1
		End
	else 
		Begin
			select 2
		End
END
"
dbo,Scheduler_VspEligibilityHistory_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.227,2014-03-10 00:08:02.227,0,Has Source,491,"-- =============================================
-- Author:		Bret VanHorne
-- Create date: 3-23-2010
-- Description:	Gets the VSP Eligibility history for a patient
-- =============================================
CREATE PROCEDURE [Scheduler_VspEligibilityHistory_Get]
	@patientNo INT
AS
BEGIN

	SET NOCOUNT ON;

	SELECT
		DISTINCT(FileName)
		,Updated_date
		,Patient_no
	FROM
		Patient_Eligibility
	WHERE
		patient_no= @patientNo
	ORDER BY
		Updated_date DESC;

END
"
dbo,Scheduler_VspClaimHistory_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.210,2014-03-10 00:08:02.210,0,Has Source,535,"-- =============================================
-- Author:		Bret VanHorne
-- Create date: 3-23-2010
-- Description:	Gets the VSP claim history for a patient
-- =============================================
CREATE PROCEDURE [Scheduler_VspClaimHistory_Get]
	@patientNo INT
AS
BEGIN

	SET NOCOUNT ON;

	SELECT
		VSPID
		,VSPOrderID
		,UpdateDate
		,FeeSlipNo
		,VSP_Status
		,DocReport
		,PackingSlip
	FROM
		Patient_VSP_Claim
	WHERE
		Patient_no = @patientNo
		AND VSPOrderID<>"
dbo,Scheduler_TemplateServices_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:02.107,2014-03-10 00:08:02.107,0,Has Source,485,"-- =============================================
-- Author:		B. VanHorne
-- Create date: 12/18/2009
-- Description:	Gets the appointment templates for a Provider
-- =============================================

CREATE PROCEDURE [Scheduler_TemplateServices_Get]
	@service_GroupID INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		SGI.[appointmentTypeId]
	FROM
		AppSch_Service_Group_Items SGI WITH (NOLOCK)
	WHERE
		SGI.[service_GroupID] = @service_GroupID

	RETURN;

END
"
dbo,Scheduler_ServiceGroupServiceItems_Save,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.760,2014-03-10 00:08:01.760,0,Has Source,672,"CREATE PROCEDURE [Scheduler_ServiceGroupServiceItems_Save] 
	(
	@groupId int,
	@serviceID int = null
	)
-- =============================================
-- File Name:	Scheduler_ServiceGroupServiceItems_Save.sql
-- Description:	This Stored Procedure inserts  all service items of a service group.
-- Author:	Ali atabek
-- Example: exec [Scheduler_ServiceGroupServiceItems_Save] 
-- History:	Date		Initials	Description
--			04/01/2010	AA			Created
-- ======================================="
dbo,Scheduler_ServiceGroupServiceItems_Delete,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.730,2014-03-10 00:08:01.730,0,Has Source,582,"CREATE PROCEDURE [Scheduler_ServiceGroupServiceItems_Delete] 
	(
	@groupId int
	)
-- =============================================
-- File Name:	Scheduler_ServiceGroupServiceItems_Delete.sql
-- Description:	This Stored Procedure deletes all service items from a service group.
-- Author:	Ali atabek
-- Example: exec [Scheduler_ServiceGroupServiceItems_Delete] 
-- History:	Date		Initials	Description
--			04/01/2010	AA			Created
-- =============================================
AS
	DELET"
dbo,Scheduler_Resources_Save,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.553,2014-03-10 00:08:01.553,0,Has Source,1453,"

CREATE PROCEDURE [Scheduler_Resources_Save] 
	 @userID int
	, @resourceID int
	, @locationID int
	, @checked bit 
	, @vieworder int = NULL
AS

-- =============================================
-- File Name:	Scheduler_Resources_Save.sql
-- Description:	This Stored Procedure Saves Resources to display.
-- Author:	Armando Moran
-- Example: Scheduler_Resources_Save 1,1,1,1
-- History:	Date		Initials	Description
--			02/10/2010	AM			Created
-- ======================================="
dbo,Scheduler_Resources_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.520,2014-03-10 00:08:01.520,0,Has Source,937,"CREATE PROCEDURE [Scheduler_Resources_Get] 
	@userID int
	, @locationID int
AS

-- =============================================
-- File Name:	Scheduler_Resources_Get.sql
-- Description:	This Stored Procedure Gets Resources.
-- Author:	Armando Moran
-- Example: Scheduler_Resources_Get 0, 5
-- History:	Date		Initials	Description
--			02/10/2010	AM			Created
-- =============================================
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

"
dbo,Scheduler_ResourceInformation_Save,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.483,2014-03-10 00:08:01.483,0,Has Source,1708,"CREATE PROCEDURE [Scheduler_ResourceInformation_Save] 

	@resourceId int
	, @timeIncrement int
	, @allowsOverbooks bit
	, @howMany int
	, @available bit
	, @modifiedDate as datetime output
	, @modifiedComputerName as nvarchar(255)
	, @active bit
	
AS

-- =============================================
-- File Name:	Scheduler_ResourceInformation_Save.sql
-- Description:	This Stored Procedure Saves the Resource Information.
-- Author:	Armando Moran
-- Example: exec [Scheduler_Resour"
dbo,Scheduler_ReferringProfessionals_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.220,2014-03-10 00:08:01.220,0,Has Source,726,"-- =============================================
-- File Name:	Scheduler_ReferringProfessionals_Get.sql
-- Description:	Gets all active referring professionals
-- Author:	Ali Atabek
-- Example: Scheduler_ReferringProfessionals_Get
-- History:	Date		Initials	Description
--			02/16/2010	AA			Created
-- =============================================

CREATE PROCEDURE [Scheduler_ReferringProfessionals_Get] 

AS
BEGIN
	SET NOCOUNT ON
		
		SELECT
		refer_no, 
		refer_first_name,
		ref"
dbo,Scheduler_PatientValidationPreferences_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.043,2014-03-10 00:08:01.043,0,Has Source,681,"-- =============================================
-- File Name:	Scheduler_PatientValidationPreferences_Get.sql
-- Description:	This Stored Procedure Gets Locations.
-- Author:	Muhammad Nabeel
-- Example: [Scheduler_PatientValidationPreferences_Get] 
-- History:	Date		Initials	Description
--			02/09/2010	AM			Created
-- =============================================

CREATE PROCEDURE [Scheduler_PatientValidationPreferences_Get] 
	@categoryId int
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACT"
dbo,Scheduler_PatientOptions_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:01.010,2014-03-10 00:08:01.010,0,Has Source,605,"-- =============================================
-- File Name:	Scheduler_PatientOptions_Get.sql
-- Description:	This Stored Procedure Gets Patient Options.
-- Example: [Scheduler_PatientOptions_Get] 4 
-- History:	Date		Initials	Description
--			10/26/2010	MD			Created
-- =============================================

CREATE PROCEDURE [Scheduler_PatientOptions_Get] 
	@categoryId int
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT 
		patient_o"
dbo,Scheduler_PatientInsuranceUsed_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.997,2014-03-10 00:08:00.997,0,Has Source,690,"-- =============================================
-- Author:		Joel Deister
-- Create date: 12/12/2010
-- Description: Gets feeslip the patient insurance is used on.
-- =============================================

CREATE PROCEDURE [Scheduler_PatientInsuranceUsed_Get]
	@patientId INT = NULL
	,@patientInsuranceId INT = NULL

AS
BEGIN

	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT
		f.[feeslip_no]
		,fi.[insurance_no]
	FROM 
		fee_slip f WITH (NOLO"
dbo,Scheduler_PatientInsurancesDetail_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.960,2014-03-10 00:08:00.960,0,Has Source,1736,"-- =============================================
-- Author:		Joel Deister
-- Create date: 06/11/2010
-- Description:	Gets insurance detail for a selected insurance for a patient.
-- =============================================

CREATE PROCEDURE [Scheduler_PatientInsurancesDetail_Get]
	@patientId INT = NULL
	,@insuranceId INT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT 
		PI.[PatInsID]
		,PI.[patient_no] 
		,PI.[insurance_no]
		,"
dbo,Scheduler_PatientInsuranceOnFeeslip_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.943,2014-03-10 00:08:00.943,0,Has Source,2028,"-- =============================================
-- Author:		Joel Deister
-- Create date: 12/12/2010
-- Description: Checks feeslip the patient insurance is used on.
-- =============================================

CREATE PROCEDURE [Scheduler_PatientInsuranceOnFeeslip_Get]
	@patientId				INT = NULL
	,@patientInsuranceId	INT = NULL
	,@CanDelete				BIT OUTPUT	

AS
BEGIN

	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	
	----DEBUG
	--DECLARE @patientId INT = "
dbo,Scheduler_PatientInsurance_Save,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.923,2014-03-10 00:08:00.923,0,Has Source,1951,"-- =============================================
-- File Name:	Scheduler_PatientInsurance_Save.sql
-- Description:	This Stored Procedure saves the PatientInsurance data.
-- Author:	Joel Deister
-- History:	Date		Initials	Description
--			04/06/2010	JD			Created
--			12/06/2010	JD			Added new fields to save.
--			12/20/2010  JD			Added Scope Identity.
-- =============================================

CREATE PROCEDURE [Scheduler_PatientInsurance_Save] 
	@PatientInsuranceID		INT = NULL O"
dbo,Scheduler_PatientInsurance_Delete,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.890,2014-03-10 00:08:00.890,0,Has Source,740,"-- =============================================
-- Author:		Joel Deister
-- Create date: 12/12/2010
-- Description: Deletes the patient insurance
-- =============================================

CREATE PROCEDURE [Scheduler_PatientInsurance_Delete]
	@patientId		INT
	,@sequenceNo	INT

AS
BEGIN

	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	UPDATE
		patient_insurances
	SET
		[ins_seq] = [ins_seq] + 99
		,[insurance_status] = 1
	WHERE
		[patient_no] = "
dbo,Scheduler_PatientDemoPreferences_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.833,2014-03-10 00:08:00.833,0,Has Source,602,"-- =============================================
-- File Name:	Scheduler_PatientDemoPreferences_Get.sql
-- Description:	This Stored Procedure gets the patient demographics preferences.
-- Author:	Joel Deister
-- History:	Date		Initials	Description
--			02/25/2010	JD			Created
-- =============================================

CREATE PROCEDURE [Scheduler_PatientDemoPreferences_Get] 

AS

BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

SELECT	patient_code_"
dbo,Scheduler_LocationsOfficeHours_Upd,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.720,2014-03-10 00:08:00.720,0,Has Source,3251,"-- =============================================
-- File Name:	Scheduler_LocationsOfficeHours_Upd.sql
-- Description:	This Stored Procedure Gets data.
-- Author:	G. Tran
-- History:	Date		Initials	Description
--			02/04/2010	GT			Created
--			04/01/2010	JL			Inserting if doesnt exist.
-- =============================================

CREATE PROCEDURE [Scheduler_LocationsOfficeHours_Upd] 
	@LocationID			INT
	,@SundayActive		BIT = NULL
	,@SundayOpenFrom	NVARCHAR(11) = NULL
	,@SundayOp"
dbo,Scheduler_LocationOfficeHours_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.637,2014-03-10 00:08:00.637,0,Has Source,665,"-- =============================================
-- File Name:	Scheduler_LocationOfficeHours_Get_sql
-- Description:	This Stored Procedure retrieves office hours of a location
-- Author:	Ali Atabek
-- Example: Scheduler_LocationOfficeHours_Get 5
-- History:	Date		Initials	Description
--			04/16/2010	AA			Created
--          02/29/2012  PA          Modify to work in AL
-- =============================================


CREATE PROCEDURE [Scheduler_LocationOfficeHours_Get] 
	 @locationI"
dbo,Scheduler_LocationDisplayedOnlyStatus_Upd,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.600,2014-03-10 00:08:00.600,0,Has Source,704,"-- =============================================
-- File Name:	Scheduler_LocationDisplayedOnlyStatus_Upd.sql
-- Description:	This stored procedure updates displayed (status) for the given location.
-- Author:	Milenko Djuricin
-- Example: [Scheduler_LocationDisplayedOnlyStatus_Upd] 5, 0
-- History:	Date		Initials	Description
--			03/24/2010	MD			Created
-- =============================================

CREATE PROCEDURE [Scheduler_LocationDisplayedOnlyStatus_Upd]
	@locationId int,
	@dis"
dbo,Scheduler_LocationDisplayedOnlyStatus_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.583,2014-03-10 00:08:00.583,0,Has Source,992,"-- =============================================
-- File Name:	Scheduler_LocationDisplayedOnlyStatus_Get.sql
-- Description:	This stored procedure gets displayed (status) for the given location.
-- Author:	Milenko Djuricin
-- Example: [Scheduler_LocationDisplayedOnlyStatus_Get] 5
-- History:	Date		Initials	Description
--			03/24/2010	MD			Created
--          03/01/2012  PA          Modified to work in AL
-- =============================================

CREATE PROCEDURE [Scheduler_Loca"
dbo,Scheduler_Location_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.550,2014-03-10 00:08:00.550,0,Has Source,678,"-- =============================================
-- File Name:	Scheduler_Location_Get.sql
-- Description:	This Stored Procedure Gets Locations.
-- Author:	Armando Moran
-- Example: [Scheduler_Location_Get] 
-- History:	Date		Initials	Description
--			02/09/2010	AM			Created
--			04/01/2010	JL			Filtering location by loctype 1 (store)
-- =============================================

CREATE PROCEDURE [Scheduler_Location_Get] 
	
AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION L"
dbo,Scheduler_InsertFunctionalityTimer,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.393,2014-03-10 00:08:00.393,0,Has Source,737,"-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Scheduler_InsertFunctionalityTimer]
	-- Add the parameters for the stored procedure here
	@UniqueAction uniqueidentifier,
	@ActionName varchar(50),
	@ActionUser varchar(50)
	
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT state"
dbo,Scheduler_InsAuthorizations_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.377,2014-03-10 00:08:00.377,0,Has Source,958,"-- =============================================
-- File Name:	Scheduler_InsAuthorizations_Get.sql
-- Description:	This Stored Procedure Gets Existing Authorizations for a patient/insurance.
-- Author:	Ali Atabek
-- Example: [Scheduler_InsAuthorizations_Get] 64320, 36
-- History:	Date		Initials	Description
--			03/16/2011	AA			Created
-- =============================================

CREATE PROCEDURE [Scheduler_InsAuthorizations_Get]

	 @patient_no int = null
	 , @insurance_no int = "
dbo,Scheduler_ExceptionOfficeHourStatus_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.257,2014-03-10 00:08:00.257,0,Has Source,8675,"-- =============================================
-- File Name:	Scheduler_ExceptionOfficeHourStatus_Get.sql
-- Description:	This Stored Procedure Gets Locations.
-- Author:	Muhammad Nabeel
-- Example: [Scheduler_ExceptionOfficeHourStatus_Get] 
-- History:	Date		Initials	Description
--			02/25/2010	AM			Created
-- =============================================

CREATE PROCEDURE [Scheduler_ExceptionOfficeHourStatus_Get] 
	@locationId int,
	@startDateTime datetime,
	@endDateTime datetime"
dbo,Scheduler_DisplayedLocations_Delete,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.117,2014-03-10 00:08:00.117,0,Has Source,871,"
-- =============================================
-- File Name:	Scheduler_DisplayedLocations_Delete.sql
-- Description:	This stored procedure deletes displayed (available) location ids for the given location.
-- Author:	Milenko Djuricin
-- Example: [Scheduler_DisplayedLocations_Delete] 5
-- History:	Date		Initials	Description
--			03/24/2010	MD			Created
-- =============================================

CREATE PROCEDURE [Scheduler_DisplayedLocations_Delete]
	@locationID int
AS
BEGIN"
dbo,Scheduler_DisplayedLocation_Add,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.100,2014-03-10 00:08:00.100,0,Has Source,713,"-- =============================================
-- File Name:	Scheduler_DisplayedLocation_Add.sql
-- Description:	This stored procedure adds displayed (available) location ids for the given location.
-- Author:	Milenko Djuricin
-- Example: [Scheduler_DisplayedLocation_Add] 5, 7
-- History:	Date		Initials	Description
--			03/24/2010	MD			Created
-- =============================================

CREATE PROCEDURE [Scheduler_DisplayedLocation_Add]
	@locationID int,
	@available_locationID"
dbo,Scheduler_ControlItem_Get,SQL_STORED_PROCEDURE,2014-03-10 00:08:00.087,2014-03-10 00:08:00.087,0,Has Source,627,"-- =============================================
-- File Name:	Scheduler_ControlItem_Get.sql
-- Description:	Gets an item from the control table.
-- Author:	Joel Deister
-- Example: Scheduler_ControlItem_Get
-- History:	Date		Initials	Description
--			03/4/2010	JD			Created
-- =============================================

CREATE PROCEDURE [Scheduler_ControlItem_Get] 

	@controlId nvarchar(20)= NULL

AS
BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
		"
dbo,Scheduler_Authorizations_Get,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.887,2014-03-10 00:07:59.887,0,Has Source,904,"CREATE PROCEDURE [Scheduler_Authorizations_Get] 
	
	 @patient_no int = null
	
	
AS

-- =============================================
-- File Name:	Scheduler_Authorizations_Get.sql
-- Description:	This Stored Procedure Gets Existing Appointments.
-- Author:	Armando Moran
-- Example: [Scheduler_Authorizations_Get] 64320
-- History:	Date		Initials	Description
--			03/25/2010	AM			Created
--			04/19/2010	JD			Use correct table.
-- =============================================

BEGIN"
dbo,Scheduler_AppointmentIcons_Save,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.630,2014-03-10 00:07:59.630,0,Has Source,908,"CREATE PROCEDURE [Scheduler_AppointmentIcons_Save] 
	(
	@iconId			int = null,
	@iconPath		nvarchar(100),
	@description	nvarchar(50)
	)
AS

-- =============================================
-- File Name:	Scheduler_AppointmentIcons_Save.sql
-- Description:	This Stored Procedure Saves Appointment Icons.
-- Author:	Armando Moran
-- Example: [Scheduler_AppointmentIcons_Save] @iconPath = 'scisors.ico', @description='scisors'
-- History:	Date		Initials	Description
--			03/19/2010	AM			Crea"
dbo,Scheduler_AppointmentIcons_Get,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.613,2014-03-10 00:07:59.613,0,Has Source,652,"CREATE PROCEDURE [Scheduler_AppointmentIcons_Get] 
	
AS

-- =============================================
-- File Name:	[Scheduler_AppointmentIcons_Get].sql
-- Description:	This Stored Procedure Gets Appointment Icons.
-- Author:	Armando Moran
-- Example: [Scheduler_AppointmentIcons_Get]
-- History:	Date		Initials	Description
--			03/19/2010	AM			Created
--			04/30/2010	AA			Added Order By
-- =============================================

BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION I"
dbo,Scheduler_AppointmentIcon_Get,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.600,2014-03-10 00:07:59.600,0,Has Source,599,"-- =============================================
-- FileName:	Scheduler_AppointmentIcon_Get
-- Description:	gets an appointment icon
-- Author:		Ali Atabek
-- Example:		Scheduler_AppointmentIcon_Get 17
-- History:		Date		Initials	Description
--				05/02/2010	AA			Created
-- =============================================
CREATE PROCEDURE [Scheduler_AppointmentIcon_Get]
	@iconID int
AS
BEGIN

	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	SELECT 
		icon_no
	"
dbo,Scheduler_AppointmentIcon_Delete,SQL_STORED_PROCEDURE,2014-03-10 00:07:59.587,2014-03-10 00:07:59.587,0,Has Source,568,"-- =============================================
-- FileName:	Scheduler_AppointmentIcon_Delete
-- Description:	deletes appointment icon rows from the table
-- Author:		Ali Atabek
-- Example:		Scheduler_AppointmentIcon_Delete 4
-- History:		Date		Initials	Description
--				04/30/2010	AA			Created
-- =============================================
CREATE PROCEDURE [Scheduler_AppointmentIcon_Delete]
	@iconID int
AS
BEGIN

	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTE"
dbo,SaveRecallType_Extensions,SQL_STORED_PROCEDURE,2014-02-21 03:39:28.733,2014-02-21 03:39:28.733,0,Has Source,904,"CREATE PROC [dbo].[SaveRecallType_Extensions]
	@RecallTypeId INT,
	@CompanyId    VARCHAR(20),
	@Name         VARCHAR(40),
	@Months       SMALLINT,
	@IsActive     BIT
AS
BEGIN
	SET NOCOUNT ON;
	
	IF EXISTS(SELECT * FROM RecallType WHERE ID = @RecallTypeId)
		BEGIN
			UPDATE	RecallType
			SET		CompanyID = @CompanyId,
					Name      = @Name,
					Months    = @Months
			WHERE	ID        = @RecallTypeId;
		END
	ELSE
	BEGIN
		INSERT INTO RecallType
				( CompanyID,  Name,  Months)"
dbo,GetProductServiceTaxes_Extension,SQL_STORED_PROCEDURE,2014-02-21 03:37:54.590,2014-02-21 03:37:54.590,0,Has Source,2262,"
CREATE proc [GetProductServiceTaxes_Extension]
(
	@OfficeNum  varchar(8)
)
AS
BEGIN
	SET NOCOUNT ON; 		
	DECLARE @cnt int
	SET @cnt = (SELECT COUNT([Id]) FROM ProductServiceTax_Extension WHERE OfficeNum = @OfficeNum)
	
	IF (@cnt) = 0
		BEGIN
			INSERT INTO dbo.ProductServiceTax_Extension (OfficeNum, ProductServiceId, StateTax, CountyTax, LocalTax)
			VALUES ('999', 1, 0.0, 0.0, 0.0)
			INSERT INTO dbo.ProductServiceTax_Extension (OfficeNum, ProductServiceId, StateTax, CountyTax, "
dbo,SaveProductServiceTaxes_Extension,SQL_STORED_PROCEDURE,2014-02-21 03:37:54.260,2014-02-21 03:37:54.260,0,Has Source,316,"
CREATE proc SaveProductServiceTaxes_Extension
(
	@Id  int
	, @StateTax decimal(5,3)
	, @CountyTax decimal(5,3)
	, @LocalTax decimal(5,3)
)
AS
BEGIN
	SET NOCOUNT ON; 
	UPDATE ProductServiceTax_Extension
	SET	StateTax = @StateTax,
		CountyTax = @CountyTax,
		LocalTax = @LocalTax
	WHERE [Id] = @Id
END"
dbo,SaveContactLense_Extension,SQL_STORED_PROCEDURE,2014-02-21 03:37:54.247,2014-02-21 03:37:54.247,0,Has Source,143,"
CREATE PROC [dbo].SaveContactLense_Extension
	@ClStyleId INT
AS
BEGIN
	SET NOCOUNT ON;
	
END


PRINT 'Done Recreating Procedures...'"
dbo,GenerateSingleInsertByString,SQL_STORED_PROCEDURE,2014-02-21 03:37:54.060,2014-02-21 03:37:54.060,0,Has Source,1834,"CREATE PROCEDURE dbo.GenerateSingleInsertByString
    @table     NVARCHAR(511), -- expects schema.table notation
    @pk_column SYSNAME,       -- column that is primary key
    @pk_value  NVARCHAR(10)   -- change data type accordingly
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @cols   NVARCHAR(MAX), @vals   NVARCHAR(MAX),
            @valOut NVARCHAR(MAX), @valSQL NVARCHAR(MAX);

    SELECT @cols = N'', @vals = N'';

    SELECT @cols = @cols + ',' + QUOTENAME(name),
		   @vals = @va"
dbo,SearchColumnNames,SQL_STORED_PROCEDURE,2009-08-29 12:37:05.313,2014-02-21 03:37:53.973,1637,Has Source,534,"CREATE PROC [dbo].[SearchColumnNames]
(
	@SearchStr nvarchar(100)
)
AS
BEGIN

Set NoCount On

Declare @ColVar VarChar(30)

Set @ColVar = @SearchStr -- String To Find

 

Select

Convert(Char(75), SysObjects.Name) 'Table Names:',

Convert(Char(75), SysColumns.Name) 'Column Names:'

 

From SysObjects, SysColumns, SysTypes

 

Where SysObjects.ID = SysColumns.ID

And SysColumns.xType = SysTypes.xType

And SysColumns.Name like @ColVar

 

Order by SysObjects.Name "
dbo,SP_InsuranceSalesSummaryByOfficeByCarrierNew,SQL_STORED_PROCEDURE,2013-09-24 14:14:04.410,2013-09-24 14:14:04.410,0,Has Source,4333,"--SP_InsuranceSalesSummaryByOfficeByCarrierNew


--SP_InsuranceSalesSummaryByOfficeByCarrierNew '1/1/2013','9/24/2013',null,null,null,null



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









create PROCEDURE [dbo].[SP_InsuranceSalesSummaryByOfficeByCarrierNew]
@From"
dbo,AssignMissingDiagPointer,SQL_STORED_PROCEDURE,2012-08-31 16:08:00.353,2012-08-31 17:08:33.403,0,Has Source,565,"

CREATE PROCEDURE [dbo].[AssignMissingDiagPointer]
AS
BEGIN
	SET NOCOUNT ON;
  	update BillingLineDetails set DiagnosisPointer = dbo.GetDiagPointer(o.OrderNum) from Orders o inner join BillingClaimOrders bo on o.OrderNum = bo.OrderNum and o.OrderDate>='8/16/2012' 
      and (DiagCode1 is Not null or diagcode2 is not null or diagcode3 is not null or diagcode4 is not null)
      inner join BillingLineDetails bld on bo.ClaimID=bld.ClaimId and bld.DateOfService>='8/16/2012' 
      and bld."
dbo,CopyScheduleItemfromExitingSchedule,SQL_STORED_PROCEDURE,2009-12-16 00:09:51.333,2012-06-11 17:12:14.800,908,Has Source,5217,"-- =============================================
-- Author:		Digesh Sahu
-- Create date: 06/11/2012
-- Description:	Updating Ins
-- =============================================
CREATE PROCEDURE [dbo].[CopyScheduleItemfromExitingSchedule]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @oldScheduleID AS int
    DECLARE @newScheduleID AS int
    DECLARE @planID AS int

    DECLARE @itemNumold"
dbo,GetInsuranceInvoiceReport_BACK,SQL_STORED_PROCEDURE,2012-05-10 17:11:53.220,2012-05-10 17:11:53.220,0,Has Source,5152,"
CREATE PROCEDURE [dbo].[GetInsuranceInvoiceReport_BACK]
@FromDate1 datetime,
@ToDate1 datetime,
@OfficeNum varchar(20),
@CarrierCode varchar(100),
@FromOrderDate datetime,
@ToOrderDate datetime

AS
BEGIN
	SET NOCOUNT ON;
declare @iCnt as int
select @iCnt=count(*)  from sysobjects where xtype='U' and name = '#V_InvoiceDetailwithInsurance1'
if(@iCnt <>0) 
Begin
	drop table #V_InvoiceDetailwithInsurance1
end


SELECT   id.ID AS InvoiceDetailId, id.InvoiceID, ins.OrderNum, id.It"
dbo,LoadSEECustomer,SQL_STORED_PROCEDURE,2011-02-24 23:15:11.900,2011-09-01 22:58:33.613,189,Has Source,6795,"

-- =============================================
-- Author:		Digesh
-- Create date: 12/16/2008
-- Description:	Load Customer from Dbase Files
-- =============================================
CREATE PROCEDURE [dbo].[LoadSEECustomer]

AS
BEGIN
 
-- Variables to hold column values from source database
DECLARE @PatientID AS int
DECLARE @OfficeNum AS varchar(8)
DECLARE @LastName AS varchar(50)
DECLARE @FirstName AS varchar(50)
DECLARE @SSN AS varchar(9)
DECLARE @Title AS varchar(5"
dbo,CopyPricingSchedulefromInsuranceSchedule,SQL_STORED_PROCEDURE,2010-06-14 16:00:31.357,2011-06-28 22:51:23.717,379,Has Source,4145,"-- =============================================
-- Author:		Digesh Sahu
-- =============================================
CREATE PROCEDURE [dbo].[CopyPricingSchedulefromInsuranceSchedule]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @oldScheduleID AS int
    DECLARE @newScheduleID AS int
    DECLARE @planID AS int

    DECLARE @itemNumold AS int
    DECLARE @itemNumNew AS int

    DECLAR"
dbo,GetPatientRXSales,SQL_STORED_PROCEDURE,2011-06-21 15:34:02.637,2011-06-21 15:34:02.637,0,Has Source,4279,"
CREATE PROCEDURE [dbo].[GetPatientRXSales]

 @FromDate  datetime,
 @ToDate  datetime,
 @FromSpere  decimal(6,2),
 @ToSpere  decimal(6,2),
 @FromCylinder  decimal(6,2),
 @ToCylinder  decimal(6,2),
 @FromAxis  int,
 @ToAxis  int,
 @FromAge  int,
 @ToAge  int,
 @CLStyle  varchar(100),
 @CPTCode  varchar(10),
 @CompanyID varchar(20)

AS
BEGIN
SET NOCOUNT ON;


declare @iCnt as int
select @iCnt=count(*)  from sysobjects where xtype='U' and name = '#V_OrdersRXDetail'
if(@iCnt "
dbo,Clean835Files,SQL_STORED_PROCEDURE,2011-04-07 21:58:14.430,2011-04-07 21:58:14.430,0,Has Source,5149,"-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE Clean835Files
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   
SELECT COUNT([PayerID]) AS MAPFORCE_DEL_ROWS FROM [dbo].[EDI835ClaimInfo] WHERE ([dbo].[EDI835ClaimInfo].[PayerID]='680450459') AND (["
dbo,CopySchedulefromExitingSchedule_4,SQL_STORED_PROCEDURE,2010-09-16 13:20:28.593,2010-09-16 13:38:44.917,0,Has Source,5578,"-- =============================================
-- Author:		Digesh Sahu
-- =============================================
CREATE PROCEDURE [dbo].[CopySchedulefromExitingSchedule_4]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @oldScheduleID AS int
    DECLARE @newScheduleID AS int
    DECLARE @planID AS int

    DECLARE @itemNumold AS int
    DECLARE @itemNumNew AS int

    DECLARE @item"
dbo,CopySchedulefromExitingSchedule_1,SQL_STORED_PROCEDURE,2010-09-16 12:26:24.073,2010-09-16 13:07:24.210,0,Has Source,5571,"-- =============================================
-- Author:		Digesh Sahu
-- =============================================
CREATE PROCEDURE [dbo].[CopySchedulefromExitingSchedule_1]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @oldScheduleID AS int
    DECLARE @newScheduleID AS int
    DECLARE @planID AS int

    DECLARE @itemNumold AS int
    DECLARE @itemNumNew AS int

    DECLARE @item"
dbo,CopySchedulefromExitingSchedule_3,SQL_STORED_PROCEDURE,2010-09-16 13:01:54.323,2010-09-16 13:05:52.033,0,Has Source,5053,"-- =============================================
-- Author:		Digesh Sahu
-- =============================================
CREATE PROCEDURE [dbo].[CopySchedulefromExitingSchedule_3]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @oldScheduleID AS int
    DECLARE @newScheduleID AS int
    DECLARE @planID AS int

    DECLARE @itemNumold AS int
    DECLARE @itemNumNew AS int

    DECLARE @item"
dbo,CopySchedulefromExitingSchedule_2,SQL_STORED_PROCEDURE,2010-09-16 12:42:39.510,2010-09-16 12:42:39.510,0,Has Source,5023,"-- =============================================
-- Author:		Digesh Sahu
-- =============================================
create PROCEDURE [dbo].[CopySchedulefromExitingSchedule_2]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @oldScheduleID AS int
    DECLARE @newScheduleID AS int
    DECLARE @planID AS int

    DECLARE @itemNumold AS int
    DECLARE @itemNumNew AS int

    DECLARE @item"
dbo,GenerateBillingAR_test,SQL_STORED_PROCEDURE,2010-04-05 16:53:53.797,2010-04-05 17:00:59.520,0,Has Source,2274,"-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GenerateBillingAR_test]
 @FromSerivceDate as datetime,
 @ToServiceDate as datetime,
 @FromTransDate as datetime,
 @ToTransDate as datetime,
 @LastDepositDate as datetime,
 @CompanyID as varchar(10),
 @Officenum as varchar(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent e"
dbo,CopySchedulefromExitingScheduleUpdate,SQL_STORED_PROCEDURE,2010-01-17 16:51:23.247,2010-01-17 17:35:32.123,0,Has Source,2667,"-- =============================================
-- Author:		Ahmed Alhosaini
-- Create date: 09/08/2008
-- Description:	Updating Frames
-- =============================================
CREATE PROCEDURE [dbo].[CopySchedulefromExitingScheduleUpdate]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @oldScheduleID AS int
    DECLARE @newScheduleID AS int
    DECLARE @planID AS int

    DECLARE @o"
dbo,ADHOCQuery,SQL_STORED_PROCEDURE,2009-12-17 21:56:15.240,2009-12-17 21:56:15.240,0,Has Source,5150,"CREATE PROCEDURE [dbo].[ADHOCQuery]
AS
BEGIN
	SET NOCOUNT ON;
select 
pt.Officenum,sum(ind.amount)-sum(ind.tax) as TotalSales
, ((sum(ind.amount))+sum(case when pt.paymentid is not null then pt.amount else 0 end) ) as outstanding,
sum(case when ind.itemtype=6 then 0 else ind.amount end)-sum(case when ind.itemtype=6 then 0 else ind.tax end) as TotalSalesXExam,
sum(case when ind.itemtype=6 then ind.amount else 0 end) - sum(case when ind.itemtype=6 then ind.tax else 0 end) as ExamAmount,
s"
dbo,xifRecordFileName,SQL_STORED_PROCEDURE,2008-09-02 20:21:47.580,2009-08-29 11:27:55.130,361,Has Source,444,"

create procedure [dbo].[xifRecordFileName]
@xifDataBatchId int,
@fileName varchar(100)

as

delete from VisionStarStatusFileName where XifDataBatchId = @xifDataBatchId


insert into VisionStarStatusFileName (XifDataBatchId, FileName, ProcessedDate)
values (@xifDataBatchId, @fileName, getDate())



/****** Object:  StoredProcedure [dbo].[xifDeleteInboundBatch]    Script Date: 09/01/2008 13:35:45 ******/
SET ANSI_NULLS ON
"
dbo,sp_dropdiagram,SQL_STORED_PROCEDURE,2008-02-14 17:42:34.970,2009-08-29 11:27:54.927,562,Has Source,936,"
	CREATE PROCEDURE dbo.sp_dropdiagram
	(
		@diagramname 	sysname,
		@owner_id	int	= null
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
	
		if(@diagramname is null)
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end
	
		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
		"
dbo,sp_alterdiagram,SQL_STORED_PROCEDURE,2008-02-14 17:42:34.957,2009-08-29 11:27:54.880,562,Has Source,1565,"
	CREATE PROCEDURE dbo.sp_alterdiagram
	(
		@diagramname 	sysname,
		@owner_id	int	= null,
		@version 	int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
	
		declare @theId 			int
		declare @retval 		int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
		declare @ShouldChangeUID	int
	
		if(@diagramname is null)
		begin
			RAISERROR ('Invalid ARG', 16, 1)
			return -1
		end
	
		execute as caller;
		selec"
dbo,sp_renamediagram,SQL_STORED_PROCEDURE,2008-02-14 17:42:34.957,2009-08-29 11:27:54.863,562,Has Source,1782,"
	CREATE PROCEDURE dbo.sp_renamediagram
	(
		@diagramname 		sysname,
		@owner_id		int	= null,
		@new_diagramname	sysname
	
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
		declare @DiagIdTarg		int
		declare @u_name			sysname
		if((@diagramname is null) or (@new_diagramname is null))
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end
	
		EXECUTE AS CA"
dbo,sp_creatediagram,SQL_STORED_PROCEDURE,2008-02-14 17:42:34.957,2009-08-29 11:27:54.830,562,Has Source,1280,"
	CREATE PROCEDURE dbo.sp_creatediagram
	(
		@diagramname 	sysname,
		@owner_id		int	= null, 	
		@version 		int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
	
		declare @theId int
		declare @retval int
		declare @IsDbo	int
		declare @userName sysname
		if(@version is null or @diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID(); 
		se"
dbo,sp_helpdiagramdefinition,SQL_STORED_PROCEDURE,2008-02-14 17:42:34.940,2009-08-29 11:27:54.817,562,Has Source,960,"
	CREATE PROCEDURE dbo.sp_helpdiagramdefinition
	(
		@diagramname 	sysname,
		@owner_id	int	= null 		
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		set nocount on

		declare @theId 		int
		declare @IsDbo 		int
		declare @DiagId		int
		declare @UIDFound	int
	
		if(@diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner');
		if(@owner_id is nul"
dbo,sp_helpdiagrams,SQL_STORED_PROCEDURE,2008-02-14 17:42:34.940,2009-08-29 11:27:54.817,562,Has Source,688,"
	CREATE PROCEDURE dbo.sp_helpdiagrams
	(
		@diagramname sysname = NULL,
		@owner_id int = NULL
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		DECLARE @user sysname
		DECLARE @dboLogin bit
		EXECUTE AS CALLER;
			SET @user = USER_NAME();
			SET @dboLogin = CONVERT(bit,IS_MEMBER('db_owner'));
		REVERT;
		SELECT
			[Database] = DB_NAME(),
			[Name] = name,
			[ID] = diagram_id,
			[Owner] = USER_NAME(principal_id),
			[OwnerID] = principal_id
		FROM
			sysdiagrams
		WHERE
			(@dbo"
dbo,LoadABBData,SQL_STORED_PROCEDURE,2009-04-01 21:57:54.887,2009-08-29 11:27:54.817,150,Has Source,2291,"-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[LoadABBData]
AS
BEGIN
	
declare @styleid as int 
set @styleid = 84

INSERT INTO [DEV].[dbo].[Item]
           ([ItemType],[ItemNum],[ItemName],[UPCCode],[Active])
select  3,p1.prd_upc_code,p1.prd_description,p1.prd_upc_code,1 from dev.dbo.clstyle c
--select  * from dev.db"
dbo,sp_upgraddiagrams,SQL_STORED_PROCEDURE,2008-02-14 17:42:34.940,2009-08-29 11:27:54.520,562,Has Source,1522,"
	CREATE PROCEDURE dbo.sp_upgraddiagrams
	AS
	BEGIN
		IF OBJECT_ID(N'dbo.sysdiagrams') IS NOT NULL
			return 0;
	
		CREATE TABLE dbo.sysdiagrams
		(
			name sysname NOT NULL,
			principal_id int NOT NULL,	-- we may change it to varbinary(85)
			diagram_id int PRIMARY KEY IDENTITY,
			version int,
	
			definition varbinary(max)
			CONSTRAINT UK_principal_name UNIQUE
			(
				principal_id,
				name
			)
		);


		/* Add this if we need to have some form of extended properties"
dbo,CopySameStyleFrameIntoSchedule,SQL_STORED_PROCEDURE,2009-08-25 11:00:01.230,2009-08-29 11:27:53.737,4,Has Source,4717,"-- =============================================
CREATE PROCEDURE [dbo].[CopySameStyleFrameIntoSchedule]
AS
BEGIN

-- Variables to hold column values from source database
DECLARE @PlanId AS int
DECLARE @VersionId AS int
DECLARE @ItemType AS int
DECLARE @MethodId AS int
DECLARE @ItemId AS int
DECLARE @GroupItemId AS int
DECLARE @BaseLensId AS int
DECLARE @MinLimit AS decimal(18,2)
DECLARE @MaxLimit as decimal(18,2)
DECLARE @ModifiedBy AS int
DECLARE @ModifiedDate as datetime
decl"
dbo,sp_generate_inserts,SQL_STORED_PROCEDURE,2009-07-16 17:43:52.737,2009-07-16 17:43:52.737,0,Has Source,18801,"
Create PROC sp_generate_inserts
(
	@table_name varchar(776),  		-- The table/view for which the INSERT statements will be generated using the existing data
	@target_table varchar(776) = NULL, 	-- Use this parameter to specify a different table name into which the data will be inserted
	@include_column_list bit = 1,		-- Use this parameter to include/ommit column list in the generated INSERT statement
	@from varchar(800) = NULL, 		-- Use this parameter to filter the rows based on a filter c"
dbo,sp_CreateDataLoadScript,SQL_STORED_PROCEDURE,2009-07-16 17:43:52.643,2009-07-16 17:43:52.643,0,Has Source,1413,"
Create Procedure sp_CreateDataLoadScript
@TblName varchar(128)
as
/*
exec sp_CreateDataLoadScript 'MyTable'
*/


	create table #a (id int identity (1,1), ColType int, ColName varchar(128))

	insert 	#a (ColType, ColName)
	select case when DATA_TYPE like '%char%' then 1 else 0 end ,
		COLUMN_NAME
	from 	information_schema.columns
	where 	TABLE_NAME = @TblName
	order by ORDINAL_POSITION
	
	if not exists (select * from #a)
	begin
		raiserror('No columns found for table %s', 16,"
